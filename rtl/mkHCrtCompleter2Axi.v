//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Mar  3 14:29:39 EST 2013
//
// Method conflict info:
// Method: crtS0_request_put
// Conflict-free: crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: crtS0_request_put
//
// Method: crtS0_response_get
// Conflict-free: crtS0_request_put,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: crtS0_response_get
//
// Method: axiM0_wrAddr_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_wrAddr_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_wrAddr_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_wrAddr_ready
//
// Method: axiM0_wrData_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_wrData_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_wrData_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_wrData_ready
//
// Method: axiM0_wrResp_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_wrResp_data
//
// Method: axiM0_wrResp_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_wrResp_valid
//
// Method: axiM0_wrResp_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_rdAddr_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_rdAddr_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: axiM0_rdAddr_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_rdAddr_ready
//
// Method: axiM0_rdResp_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_rdResp_data
//
// Method: axiM0_rdResp_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
// Conflicts: axiM0_rdResp_valid
//
// Method: axiM0_rdResp_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: isActive
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
// Method: isFaulted
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready,
// 	       isActive,
// 	       isFaulted
//
//
// Ports:
// Name                         I/O  size props
// RDY_crtS0_request_put          O     1 reg
// crtS0_response_get             O    40
// RDY_crtS0_response_get         O     1 reg
// axiM0_wrAddr_data              O    35 reg
// axiM0_wrAddr_valid             O     1
// axiM0_wrData_data              O    36 reg
// axiM0_wrData_valid             O     1
// axiM0_wrResp_ready             O     1 reg
// axiM0_rdAddr_data              O    35 reg
// axiM0_rdAddr_valid             O     1
// axiM0_rdResp_ready             O     1 reg
// isActive                       O     1 reg
// RDY_isActive                   O     1 const
// isFaulted                      O     1 reg
// RDY_isFaulted                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// crtS0_request_put              I    32 reg
// axiM0_wrAddr_ready_value       I     1
// axiM0_wrData_ready_value       I     1
// axiM0_wrResp_data_value        I     2 reg
// axiM0_wrResp_valid_value       I     1
// axiM0_rdAddr_ready_value       I     1
// axiM0_rdResp_data_value        I    34 reg
// axiM0_rdResp_valid_value       I     1
// EN_crtS0_request_put           I     1
// EN_crtS0_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHCrtCompleter2Axi(CLK,
			   RST_N,

			   crtS0_request_put,
			   EN_crtS0_request_put,
			   RDY_crtS0_request_put,

			   EN_crtS0_response_get,
			   crtS0_response_get,
			   RDY_crtS0_response_get,

			   axiM0_wrAddr_data,

			   axiM0_wrAddr_valid,

			   axiM0_wrAddr_ready_value,

			   axiM0_wrData_data,

			   axiM0_wrData_valid,

			   axiM0_wrData_ready_value,

			   axiM0_wrResp_data_value,

			   axiM0_wrResp_valid_value,

			   axiM0_wrResp_ready,

			   axiM0_rdAddr_data,

			   axiM0_rdAddr_valid,

			   axiM0_rdAddr_ready_value,

			   axiM0_rdResp_data_value,

			   axiM0_rdResp_valid_value,

			   axiM0_rdResp_ready,

			   isActive,
			   RDY_isActive,

			   isFaulted,
			   RDY_isFaulted);
  input  CLK;
  input  RST_N;

  // action method crtS0_request_put
  input  [31 : 0] crtS0_request_put;
  input  EN_crtS0_request_put;
  output RDY_crtS0_request_put;

  // actionvalue method crtS0_response_get
  input  EN_crtS0_response_get;
  output [39 : 0] crtS0_response_get;
  output RDY_crtS0_response_get;

  // value method axiM0_wrAddr_data
  output [34 : 0] axiM0_wrAddr_data;

  // value method axiM0_wrAddr_valid
  output axiM0_wrAddr_valid;

  // action method axiM0_wrAddr_ready
  input  axiM0_wrAddr_ready_value;

  // value method axiM0_wrData_data
  output [35 : 0] axiM0_wrData_data;

  // value method axiM0_wrData_valid
  output axiM0_wrData_valid;

  // action method axiM0_wrData_ready
  input  axiM0_wrData_ready_value;

  // action method axiM0_wrResp_data
  input  [1 : 0] axiM0_wrResp_data_value;

  // action method axiM0_wrResp_valid
  input  axiM0_wrResp_valid_value;

  // value method axiM0_wrResp_ready
  output axiM0_wrResp_ready;

  // value method axiM0_rdAddr_data
  output [34 : 0] axiM0_rdAddr_data;

  // value method axiM0_rdAddr_valid
  output axiM0_rdAddr_valid;

  // action method axiM0_rdAddr_ready
  input  axiM0_rdAddr_ready_value;

  // action method axiM0_rdResp_data
  input  [33 : 0] axiM0_rdResp_data_value;

  // action method axiM0_rdResp_valid
  input  axiM0_rdResp_valid_value;

  // value method axiM0_rdResp_ready
  output axiM0_rdResp_ready;

  // value method isActive
  output isActive;
  output RDY_isActive;

  // value method isFaulted
  output isFaulted;
  output RDY_isFaulted;

  // signals for module outputs
  wire [39 : 0] crtS0_response_get;
  wire [35 : 0] axiM0_wrData_data;
  wire [34 : 0] axiM0_rdAddr_data, axiM0_wrAddr_data;
  wire RDY_crtS0_request_put,
       RDY_crtS0_response_get,
       RDY_isActive,
       RDY_isFaulted,
       axiM0_rdAddr_valid,
       axiM0_rdResp_ready,
       axiM0_wrAddr_valid,
       axiM0_wrData_valid,
       axiM0_wrResp_ready,
       isActive,
       isFaulted;

  // inlined wires
  wire a4l_a4wrAddr_fifof_enqueueing_whas;

  // register a4l_a4rdAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4rdAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdAddr_fifof_cntr_r_D_IN;
  wire a4l_a4rdAddr_fifof_cntr_r_EN;

  // register a4l_a4rdAddr_fifof_q_0
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0_D_IN;
  wire a4l_a4rdAddr_fifof_q_0_EN;

  // register a4l_a4rdAddr_fifof_q_1
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1_D_IN;
  wire a4l_a4rdAddr_fifof_q_1_EN;

  // register a4l_a4wrAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4wrAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrAddr_fifof_cntr_r_D_IN;
  wire a4l_a4wrAddr_fifof_cntr_r_EN;

  // register a4l_a4wrAddr_fifof_q_0
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0_D_IN;
  wire a4l_a4wrAddr_fifof_q_0_EN;

  // register a4l_a4wrAddr_fifof_q_1
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1_D_IN;
  wire a4l_a4wrAddr_fifof_q_1_EN;

  // register a4l_a4wrData_fifof_cntr_r
  reg [1 : 0] a4l_a4wrData_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrData_fifof_cntr_r_D_IN;
  wire a4l_a4wrData_fifof_cntr_r_EN;

  // register a4l_a4wrData_fifof_q_0
  reg [35 : 0] a4l_a4wrData_fifof_q_0;
  reg [35 : 0] a4l_a4wrData_fifof_q_0_D_IN;
  wire a4l_a4wrData_fifof_q_0_EN;

  // register a4l_a4wrData_fifof_q_1
  reg [35 : 0] a4l_a4wrData_fifof_q_1;
  reg [35 : 0] a4l_a4wrData_fifof_q_1_D_IN;
  wire a4l_a4wrData_fifof_q_1_EN;

  // register cmdAddrV
  reg [63 : 0] cmdAddrV;
  wire [63 : 0] cmdAddrV_D_IN;
  wire cmdAddrV_EN;

  // register cmdAdlRemain
  reg [11 : 0] cmdAdlRemain;
  reg [11 : 0] cmdAdlRemain_D_IN;
  wire cmdAdlRemain_EN;

  // register cmdAdrRemain
  reg [1 : 0] cmdAdrRemain;
  wire [1 : 0] cmdAdrRemain_D_IN;
  wire cmdAdrRemain_EN;

  // register cmdCRH
  reg [34 : 0] cmdCRH;
  wire [34 : 0] cmdCRH_D_IN;
  wire cmdCRH_EN;

  // register cmdIsDO
  reg cmdIsDO;
  wire cmdIsDO_D_IN, cmdIsDO_EN;

  // register cmdIsLast
  reg cmdIsLast;
  wire cmdIsLast_D_IN, cmdIsLast_EN;

  // register crtBusy
  reg crtBusy;
  wire crtBusy_D_IN, crtBusy_EN;

  // register lastTag
  reg [4 : 0] lastTag;
  wire [4 : 0] lastTag_D_IN;
  wire lastTag_EN;

  // register modActive
  reg modActive;
  wire modActive_D_IN, modActive_EN;

  // register modFaulted
  reg modFaulted;
  wire modFaulted_D_IN, modFaulted_EN;

  // register rspActive
  reg rspActive;
  wire rspActive_D_IN, rspActive_EN;

  // register rspAdlRemain
  reg [11 : 0] rspAdlRemain;
  wire [11 : 0] rspAdlRemain_D_IN;
  wire rspAdlRemain_EN;

  // register rspCRH
  reg [34 : 0] rspCRH;
  reg [34 : 0] rspCRH_D_IN;
  wire rspCRH_EN;

  // register sizInitRespB
  reg [31 : 0] sizInitRespB;
  wire [31 : 0] sizInitRespB_D_IN;
  wire sizInitRespB_EN;

  // ports of submodule a4l_a4rdResp_fifof
  wire [33 : 0] a4l_a4rdResp_fifof_D_IN, a4l_a4rdResp_fifof_D_OUT;
  wire a4l_a4rdResp_fifof_CLR,
       a4l_a4rdResp_fifof_DEQ,
       a4l_a4rdResp_fifof_EMPTY_N,
       a4l_a4rdResp_fifof_ENQ,
       a4l_a4rdResp_fifof_FULL_N;

  // ports of submodule a4l_a4wrResp_fifof
  wire [1 : 0] a4l_a4wrResp_fifof_D_IN;
  wire a4l_a4wrResp_fifof_CLR,
       a4l_a4wrResp_fifof_DEQ,
       a4l_a4wrResp_fifof_EMPTY_N,
       a4l_a4wrResp_fifof_ENQ,
       a4l_a4wrResp_fifof_FULL_N;

  // ports of submodule crtCmdF
  wire [31 : 0] crtCmdF_D_IN, crtCmdF_D_OUT;
  wire crtCmdF_CLR, crtCmdF_DEQ, crtCmdF_EMPTY_N, crtCmdF_ENQ, crtCmdF_FULL_N;

  // ports of submodule crtRespF
  reg [39 : 0] crtRespF_D_IN;
  wire [39 : 0] crtRespF_D_OUT;
  wire crtRespF_CLR,
       crtRespF_DEQ,
       crtRespF_EMPTY_N,
       crtRespF_ENQ,
       crtRespF_FULL_N;

  // ports of submodule respBufferF
  wire [39 : 0] respBufferF_D_IN;
  wire respBufferF_CLR, respBufferF_DEQ, respBufferF_ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_deq,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4rdResp_do_enq,
       CAN_FIRE_RL_a4l_a4wrAddr_do_deq,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrData_do_deq,
       CAN_FIRE_RL_a4l_a4wrData_fifof_both,
       CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrResp_do_enq,
       CAN_FIRE_RL_cmd_crh,
       CAN_FIRE_RL_cmd_nop,
       CAN_FIRE_RL_cmd_read,
       CAN_FIRE_RL_cmd_write,
       CAN_FIRE_RL_modActive__dreg_update,
       CAN_FIRE_RL_modFaulted__dreg_update,
       CAN_FIRE_RL_rsp_nop,
       CAN_FIRE_RL_rsp_read,
       CAN_FIRE_RL_rsp_write,
       CAN_FIRE_axiM0_rdAddr_ready,
       CAN_FIRE_axiM0_rdResp_data,
       CAN_FIRE_axiM0_rdResp_valid,
       CAN_FIRE_axiM0_wrAddr_ready,
       CAN_FIRE_axiM0_wrData_ready,
       CAN_FIRE_axiM0_wrResp_data,
       CAN_FIRE_axiM0_wrResp_valid,
       CAN_FIRE_crtS0_request_put,
       CAN_FIRE_crtS0_response_get,
       WILL_FIRE_RL_a4l_a4rdAddr_do_deq,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4rdResp_do_enq,
       WILL_FIRE_RL_a4l_a4wrAddr_do_deq,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrData_do_deq,
       WILL_FIRE_RL_a4l_a4wrData_fifof_both,
       WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrResp_do_enq,
       WILL_FIRE_RL_cmd_crh,
       WILL_FIRE_RL_cmd_nop,
       WILL_FIRE_RL_cmd_read,
       WILL_FIRE_RL_cmd_write,
       WILL_FIRE_RL_modActive__dreg_update,
       WILL_FIRE_RL_modFaulted__dreg_update,
       WILL_FIRE_RL_rsp_nop,
       WILL_FIRE_RL_rsp_read,
       WILL_FIRE_RL_rsp_write,
       WILL_FIRE_axiM0_rdAddr_ready,
       WILL_FIRE_axiM0_rdResp_data,
       WILL_FIRE_axiM0_rdResp_valid,
       WILL_FIRE_axiM0_wrAddr_ready,
       WILL_FIRE_axiM0_wrData_ready,
       WILL_FIRE_axiM0_wrResp_data,
       WILL_FIRE_axiM0_wrResp_valid,
       WILL_FIRE_crtS0_request_put,
       WILL_FIRE_crtS0_response_get;

  // inputs to muxes for submodule ports
  wire [39 : 0] MUX_crtRespF_enq_1__VAL_1,
		MUX_crtRespF_enq_1__VAL_2,
		MUX_crtRespF_enq_1__VAL_3;
  wire [35 : 0] MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_1;
  wire [34 : 0] MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_1,
		MUX_cmdCRH_write_1__VAL_1,
		MUX_rspCRH_write_1__VAL_1,
		MUX_rspCRH_write_1__VAL_2,
		MUX_rspCRH_write_1__VAL_3;
  wire [11 : 0] MUX_cmdAdlRemain_write_1__VAL_2,
		MUX_cmdAdlRemain_write_1__VAL_3;
  wire [4 : 0] MUX_lastTag_write_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2,
	       MUX_cmdAdrRemain_write_1__VAL_1,
	       MUX_cmdAdrRemain_write_1__VAL_2;
  wire MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2,
       MUX_cmdAdlRemain_write_1__SEL_1,
       MUX_cmdAdrRemain_write_1__SEL_1,
       MUX_cmdCRH_write_1__SEL_2,
       MUX_cmdCRH_write_1__SEL_3,
       MUX_cmdIsDO_write_1__PSEL_2,
       MUX_cmdIsDO_write_1__SEL_2,
       MUX_cmdIsLast_write_1__SEL_1,
       MUX_cmdIsLast_write_1__SEL_3,
       MUX_lastTag_write_1__PSEL_2,
       MUX_lastTag_write_1__SEL_1,
       MUX_rspCRH_write_1__SEL_3,
       MUX_rspCRH_write_1__SEL_4;

  // remaining internal signals
  reg [63 : 0] v__h11604,
	       v__h11661,
	       v__h13051,
	       v__h6928,
	       v__h7081,
	       v__h9380,
	       v__h9722;
  reg [3 : 0] IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208;
  reg [2 : 0] CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q5;
  reg [1 : 0] CASE_crtRespFD_OUT_BITS_19_TO_18_0_crtRespFD_ETC__q3,
	      CASE_crtRespFD_OUT_BITS_29_TO_28_0_crtRespFD_ETC__q2,
	      CASE_crtRespFD_OUT_BITS_39_TO_38_0_crtRespFD_ETC__q1,
	      CASE_crtRespFD_OUT_BITS_9_TO_8_0_crtRespFD_O_ETC__q4;
  wire [31 : 0] IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211,
		advert__h7065,
		data__h12146;
  wire [11 : 0] cmdAdlRemain_68_MINUS_1___d170;
  wire [1 : 0] IF_NOT_rspActive_90_98_OR_NOT_rspAdlRemain_87__ETC___d200,
	       a4l_a4rdAddr_fifof_cntr_r_7_MINUS_1___d75,
	       a4l_a4wrAddr_fifof_cntr_r_MINUS_1___d15,
	       a4l_a4wrData_fifof_cntr_r_4_MINUS_1___d42;
  wire _dand2lastTag_EN_write,
       _dfoo1,
       _dfoo11,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       _dfoo9,
       cmdAdrRemain_20_EQ_0_21_AND_cmdAdlRemain_68_EQ_ETC___d250,
       cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227,
       crtCmdF_i_notEmpty__02_AND_NOT_cmdAdrRemain_20_ETC___d235;

  // action method crtS0_request_put
  assign RDY_crtS0_request_put = crtCmdF_FULL_N ;
  assign CAN_FIRE_crtS0_request_put = crtCmdF_FULL_N ;
  assign WILL_FIRE_crtS0_request_put = EN_crtS0_request_put ;

  // actionvalue method crtS0_response_get
  assign crtS0_response_get =
	     { CASE_crtRespFD_OUT_BITS_39_TO_38_0_crtRespFD_ETC__q1,
	       crtRespF_D_OUT[37:30],
	       CASE_crtRespFD_OUT_BITS_29_TO_28_0_crtRespFD_ETC__q2,
	       crtRespF_D_OUT[27:20],
	       CASE_crtRespFD_OUT_BITS_19_TO_18_0_crtRespFD_ETC__q3,
	       crtRespF_D_OUT[17:10],
	       CASE_crtRespFD_OUT_BITS_9_TO_8_0_crtRespFD_O_ETC__q4,
	       crtRespF_D_OUT[7:0] } ;
  assign RDY_crtS0_response_get = crtRespF_EMPTY_N ;
  assign CAN_FIRE_crtS0_response_get = crtRespF_EMPTY_N ;
  assign WILL_FIRE_crtS0_response_get = EN_crtS0_response_get ;

  // value method axiM0_wrAddr_data
  assign axiM0_wrAddr_data = a4l_a4wrAddr_fifof_q_0 ;

  // value method axiM0_wrAddr_valid
  assign axiM0_wrAddr_valid = a4l_a4wrAddr_fifof_cntr_r != 2'd0 ;

  // action method axiM0_wrAddr_ready
  assign CAN_FIRE_axiM0_wrAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrAddr_ready = 1'd1 ;

  // value method axiM0_wrData_data
  assign axiM0_wrData_data = a4l_a4wrData_fifof_q_0 ;

  // value method axiM0_wrData_valid
  assign axiM0_wrData_valid = a4l_a4wrData_fifof_cntr_r != 2'd0 ;

  // action method axiM0_wrData_ready
  assign CAN_FIRE_axiM0_wrData_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrData_ready = 1'd1 ;

  // action method axiM0_wrResp_data
  assign CAN_FIRE_axiM0_wrResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_data = 1'd1 ;

  // action method axiM0_wrResp_valid
  assign CAN_FIRE_axiM0_wrResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_valid = 1'd1 ;

  // value method axiM0_wrResp_ready
  assign axiM0_wrResp_ready = a4l_a4wrResp_fifof_FULL_N ;

  // value method axiM0_rdAddr_data
  assign axiM0_rdAddr_data = a4l_a4rdAddr_fifof_q_0 ;

  // value method axiM0_rdAddr_valid
  assign axiM0_rdAddr_valid = a4l_a4rdAddr_fifof_cntr_r != 2'd0 ;

  // action method axiM0_rdAddr_ready
  assign CAN_FIRE_axiM0_rdAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_rdAddr_ready = 1'd1 ;

  // action method axiM0_rdResp_data
  assign CAN_FIRE_axiM0_rdResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_data = 1'd1 ;

  // action method axiM0_rdResp_valid
  assign CAN_FIRE_axiM0_rdResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_valid = 1'd1 ;

  // value method axiM0_rdResp_ready
  assign axiM0_rdResp_ready = a4l_a4rdResp_fifof_FULL_N ;

  // value method isActive
  assign isActive = modActive ;
  assign RDY_isActive = 1'd1 ;

  // value method isFaulted
  assign isFaulted = modFaulted ;
  assign RDY_isFaulted = 1'd1 ;

  // submodule a4l_a4rdResp_fifof
  FIFO2 #(.width(32'd34), .guarded(32'd1)) a4l_a4rdResp_fifof(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(a4l_a4rdResp_fifof_D_IN),
							      .ENQ(a4l_a4rdResp_fifof_ENQ),
							      .DEQ(a4l_a4rdResp_fifof_DEQ),
							      .CLR(a4l_a4rdResp_fifof_CLR),
							      .D_OUT(a4l_a4rdResp_fifof_D_OUT),
							      .FULL_N(a4l_a4rdResp_fifof_FULL_N),
							      .EMPTY_N(a4l_a4rdResp_fifof_EMPTY_N));

  // submodule a4l_a4wrResp_fifof
  FIFO2 #(.width(32'd2), .guarded(32'd1)) a4l_a4wrResp_fifof(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(a4l_a4wrResp_fifof_D_IN),
							     .ENQ(a4l_a4wrResp_fifof_ENQ),
							     .DEQ(a4l_a4wrResp_fifof_DEQ),
							     .CLR(a4l_a4wrResp_fifof_CLR),
							     .D_OUT(),
							     .FULL_N(a4l_a4wrResp_fifof_FULL_N),
							     .EMPTY_N(a4l_a4wrResp_fifof_EMPTY_N));

  // submodule crtCmdF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) crtCmdF(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(crtCmdF_D_IN),
						   .ENQ(crtCmdF_ENQ),
						   .DEQ(crtCmdF_DEQ),
						   .CLR(crtCmdF_CLR),
						   .D_OUT(crtCmdF_D_OUT),
						   .FULL_N(crtCmdF_FULL_N),
						   .EMPTY_N(crtCmdF_EMPTY_N));

  // submodule crtRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) crtRespF(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(crtRespF_D_IN),
						    .ENQ(crtRespF_ENQ),
						    .DEQ(crtRespF_DEQ),
						    .CLR(crtRespF_CLR),
						    .D_OUT(crtRespF_D_OUT),
						    .FULL_N(crtRespF_FULL_N),
						    .EMPTY_N(crtRespF_EMPTY_N));

  // submodule respBufferF
  SizedFIFO #(.p1width(32'd40),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) respBufferF(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(respBufferF_D_IN),
					   .ENQ(respBufferF_ENQ),
					   .DEQ(respBufferF_DEQ),
					   .CLR(respBufferF_CLR),
					   .D_OUT(),
					   .FULL_N(),
					   .EMPTY_N());

  // rule RL_cmd_crh
  assign CAN_FIRE_RL_cmd_crh =
	     crtCmdF_EMPTY_N && cmdCRH[34:32] != 3'd0 &&
	     cmdCRH[34:32] != 3'd1 &&
	     cmdCRH[34:32] != 3'd2 &&
	     cmdCRH[34:32] != 3'd3 &&
	     cmdCRH[34:32] != 3'd4 &&
	     cmdCRH[34:32] != 3'd5 &&
	     !crtBusy ;
  assign WILL_FIRE_RL_cmd_crh = CAN_FIRE_RL_cmd_crh ;

  // rule RL_cmd_nop
  assign CAN_FIRE_RL_cmd_nop =
	     crtCmdF_EMPTY_N && cmdCRH[34:32] == 3'd0 &&
	     rspCRH[34:32] != 3'd0 &&
	     rspCRH[34:32] != 3'd1 &&
	     rspCRH[34:32] != 3'd2 &&
	     rspCRH[34:32] != 3'd3 &&
	     rspCRH[34:32] != 3'd4 &&
	     rspCRH[34:32] != 3'd5 ;
  assign WILL_FIRE_RL_cmd_nop = CAN_FIRE_RL_cmd_nop ;

  // rule RL_rsp_nop
  assign CAN_FIRE_RL_rsp_nop = crtRespF_FULL_N && rspCRH[34:32] == 3'd3 ;
  assign WILL_FIRE_RL_rsp_nop = CAN_FIRE_RL_rsp_nop ;

  // rule RL_cmd_write
  assign CAN_FIRE_RL_cmd_write =
	     crtCmdF_i_notEmpty__02_AND_NOT_cmdAdrRemain_20_ETC___d235 &&
	     cmdCRH[34:32] == 3'd1 &&
	     rspCRH[34:32] != 3'd0 &&
	     rspCRH[34:32] != 3'd1 &&
	     rspCRH[34:32] != 3'd2 &&
	     rspCRH[34:32] != 3'd3 &&
	     rspCRH[34:32] != 3'd4 &&
	     rspCRH[34:32] != 3'd5 ;
  assign WILL_FIRE_RL_cmd_write = CAN_FIRE_RL_cmd_write ;

  // rule RL_rsp_write
  assign CAN_FIRE_RL_rsp_write =
	     crtRespF_FULL_N && a4l_a4wrResp_fifof_EMPTY_N &&
	     rspCRH[34:32] == 3'd4 ;
  assign WILL_FIRE_RL_rsp_write = CAN_FIRE_RL_rsp_write ;

  // rule RL_cmd_read
  assign CAN_FIRE_RL_cmd_read =
	     crtCmdF_EMPTY_N &&
	     (cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 &&
	      lastTag[4] &&
	      !cmdCRH[7] ||
	      a4l_a4rdAddr_fifof_cntr_r != 2'd2) &&
	     cmdCRH[34:32] == 3'd2 &&
	     rspCRH[34:32] != 3'd0 &&
	     rspCRH[34:32] != 3'd1 &&
	     rspCRH[34:32] != 3'd2 &&
	     rspCRH[34:32] != 3'd3 &&
	     rspCRH[34:32] != 3'd4 &&
	     rspCRH[34:32] != 3'd5 ;
  assign WILL_FIRE_RL_cmd_read = CAN_FIRE_RL_cmd_read ;

  // rule RL_rsp_read
  assign CAN_FIRE_RL_rsp_read =
	     crtRespF_FULL_N && (!rspActive || a4l_a4rdResp_fifof_EMPTY_N) &&
	     rspCRH[34:32] == 3'd5 ;
  assign WILL_FIRE_RL_rsp_read = CAN_FIRE_RL_rsp_read ;

  // rule RL_a4l_a4wrAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_deq =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd0 && axiM0_wrAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_deq = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // rule RL_a4l_a4wrAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     !CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ;

  // rule RL_a4l_a4wrAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq &&
	     !a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // rule RL_a4l_a4wrAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_both =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq &&
	     a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_both ;

  // rule RL_a4l_a4wrData_do_deq
  assign CAN_FIRE_RL_a4l_a4wrData_do_deq =
	     a4l_a4wrData_fifof_cntr_r != 2'd0 && axiM0_wrData_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_deq = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // rule RL_a4l_a4wrData_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     !CAN_FIRE_RL_a4l_a4wrData_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr ;

  // rule RL_a4l_a4wrData_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_do_deq &&
	     !a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // rule RL_a4l_a4wrData_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_both =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     CAN_FIRE_RL_a4l_a4wrData_do_deq &&
	     a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_both ;

  // rule RL_a4l_a4wrResp_do_enq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_enq =
	     a4l_a4wrResp_fifof_FULL_N && axiM0_wrResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_enq = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;

  // rule RL_a4l_a4rdAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_deq =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd0 && axiM0_rdAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_deq = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // rule RL_a4l_a4rdAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr =
	     MUX_rspCRH_write_1__SEL_3 && MUX_rspCRH_write_1__SEL_3 &&
	     !CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ;

  // rule RL_a4l_a4rdAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq && !MUX_rspCRH_write_1__SEL_3 ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // rule RL_a4l_a4rdAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_both =
	     MUX_rspCRH_write_1__SEL_3 && CAN_FIRE_RL_a4l_a4rdAddr_do_deq &&
	     MUX_rspCRH_write_1__SEL_3 ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_both =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_both ;

  // rule RL_a4l_a4rdResp_do_enq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_enq =
	     a4l_a4rdResp_fifof_FULL_N && axiM0_rdResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_enq = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;

  // rule RL_modActive__dreg_update
  assign CAN_FIRE_RL_modActive__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_modActive__dreg_update = 1'd1 ;

  // rule RL_modFaulted__dreg_update
  assign CAN_FIRE_RL_modFaulted__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_modFaulted__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo11 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo9 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo3 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo7 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo5 ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd1 ;
  assign MUX_cmdAdlRemain_write_1__SEL_1 =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 &&
	     (crtCmdF_D_OUT[5:4] == 2'd0 || crtCmdF_D_OUT[5:4] == 2'd1) ;
  assign MUX_cmdAdrRemain_write_1__SEL_1 =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 ;
  assign MUX_cmdCRH_write_1__SEL_2 =
	     WILL_FIRE_RL_cmd_nop && cmdAdlRemain == 12'd1 ;
  assign MUX_cmdCRH_write_1__SEL_3 =
	     WILL_FIRE_RL_cmd_write && cmdAdrRemain == 2'd0 &&
	     cmdAdlRemain == 12'd1 ;
  assign MUX_cmdIsDO_write_1__PSEL_2 =
	     WILL_FIRE_RL_rsp_read || WILL_FIRE_RL_rsp_nop ;
  assign MUX_cmdIsDO_write_1__SEL_2 =
	     MUX_cmdIsDO_write_1__PSEL_2 && rspActive &&
	     rspAdlRemain == 12'd1 ;
  assign MUX_cmdIsLast_write_1__SEL_1 =
	     WILL_FIRE_RL_rsp_read && rspActive && rspAdlRemain == 12'd1 ;
  assign MUX_cmdIsLast_write_1__SEL_3 =
	     WILL_FIRE_RL_rsp_nop && rspActive && rspAdlRemain == 12'd1 ;
  assign MUX_lastTag_write_1__SEL_1 = WILL_FIRE_RL_cmd_nop && !cmdCRH[7] ;
  assign MUX_lastTag_write_1__PSEL_2 =
	     WILL_FIRE_RL_cmd_read || WILL_FIRE_RL_cmd_write ;
  assign MUX_rspCRH_write_1__SEL_3 =
	     WILL_FIRE_RL_cmd_read &&
	     (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	      !lastTag[4] ||
	      cmdCRH[7]) ;
  assign MUX_rspCRH_write_1__SEL_4 =
	     MUX_cmdIsDO_write_1__PSEL_2 && rspActive &&
	     rspAdlRemain == 12'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4rdAddr_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 = { 3'd0, crtCmdF_D_OUT } ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       a4l_a4rdAddr_fifof_q_1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       35'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrAddr_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_1 =
	     (a4l_a4wrAddr_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 :
	       a4l_a4wrAddr_fifof_q_1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 =
	     { 3'd0, cmdAddrV[63:32] } ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_1 =
	     (a4l_a4wrAddr_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 :
	       35'd0 ;
  assign MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrData_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 =
	     (a4l_a4wrData_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 :
	       a4l_a4wrData_fifof_q_1 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 =
	     { cmdCRH[11:8], crtCmdF_D_OUT } ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_1 =
	     (a4l_a4wrData_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 :
	       36'd0 ;
  assign MUX_cmdAdlRemain_write_1__VAL_2 =
	     (cmdAdlRemain == 12'd0) ?
	       cmdAdlRemain :
	       cmdAdlRemain_68_MINUS_1___d170 ;
  assign MUX_cmdAdlRemain_write_1__VAL_3 =
	     (cmdAdrRemain != 2'd0 || cmdAdlRemain == 12'd0) ?
	       cmdAdlRemain :
	       cmdAdlRemain_68_MINUS_1___d170 ;
  assign MUX_cmdAdrRemain_write_1__VAL_1 = crtCmdF_D_OUT[6] ? 2'd2 : 2'd1 ;
  assign MUX_cmdAdrRemain_write_1__VAL_2 =
	     (cmdAdrRemain == 2'd0) ? cmdAdrRemain : cmdAdrRemain - 2'd1 ;
  assign MUX_cmdCRH_write_1__VAL_1 =
	     { CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q5, crtCmdF_D_OUT } ;
  assign MUX_crtRespF_enq_1__VAL_1 =
	     { IF_NOT_rspActive_90_98_OR_NOT_rspAdlRemain_87__ETC___d200,
	       IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211[31:24],
	       2'd0,
	       IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211[23:16],
	       2'd0,
	       IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211[15:8],
	       2'd0,
	       IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211[7:0] } ;
  assign MUX_crtRespF_enq_1__VAL_2 =
	     { 2'd1,
	       rspCRH[31:24],
	       2'd0,
	       rspCRH[23:16],
	       2'd0,
	       rspCRH[15:12],
	       IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208,
	       2'd0,
	       rspCRH[7:0] } ;
  assign MUX_crtRespF_enq_1__VAL_3 =
	     { IF_NOT_rspActive_90_98_OR_NOT_rspAdlRemain_87__ETC___d200,
	       data__h12146[31:24],
	       2'd0,
	       data__h12146[23:16],
	       2'd0,
	       data__h12146[15:8],
	       2'd0,
	       data__h12146[7:0] } ;
  assign MUX_lastTag_write_1__VAL_2 = { 1'd1, cmdCRH[3:0] } ;
  assign MUX_rspCRH_write_1__VAL_1 =
	     { 7'd56, cmdCRH[27:16], 8'd0, cmdCRH[7], 3'd3, cmdCRH[3:0] } ;
  assign MUX_rspCRH_write_1__VAL_2 = { 31'd1207959555, cmdCRH[3:0] } ;
  assign MUX_rspCRH_write_1__VAL_3 =
	     { 7'd88, cmdCRH[27:16], 12'd3, cmdCRH[3:0] } ;

  // inlined wires
  assign a4l_a4wrAddr_fifof_enqueueing_whas =
	     WILL_FIRE_RL_cmd_write &&
	     cmdAdrRemain_20_EQ_0_21_AND_cmdAdlRemain_68_EQ_ETC___d250 ;

  // register a4l_a4rdAddr_fifof_cntr_r
  assign a4l_a4rdAddr_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ?
	       a4l_a4rdAddr_fifof_cntr_r_7_MINUS_1___d75 :
	       MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4rdAddr_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ;

  // register a4l_a4rdAddr_fifof_q_0
  always@(MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr or a4l_a4rdAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2:
	  a4l_a4rdAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_0_D_IN = a4l_a4rdAddr_fifof_q_1;
      default: a4l_a4rdAddr_fifof_q_0_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo11 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4rdAddr_fifof_q_1
  always@(MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2:
	  a4l_a4rdAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_1_D_IN = 35'd0;
      default: a4l_a4rdAddr_fifof_q_1_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo9 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_cntr_r
  assign a4l_a4wrAddr_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ?
	       a4l_a4wrAddr_fifof_cntr_r_MINUS_1___d15 :
	       MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrAddr_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ;

  // register a4l_a4wrAddr_fifof_q_0
  always@(MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr or a4l_a4wrAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_0_D_IN = a4l_a4wrAddr_fifof_q_1;
      default: a4l_a4wrAddr_fifof_q_0_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_q_1
  always@(MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_1;
      MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2:
	  a4l_a4wrAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_1_D_IN = 35'd0;
      default: a4l_a4wrAddr_fifof_q_1_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrData_fifof_cntr_r
  assign a4l_a4wrData_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ?
	       a4l_a4wrData_fifof_cntr_r_4_MINUS_1___d42 :
	       MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrData_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr ;

  // register a4l_a4wrData_fifof_q_0
  always@(MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr or a4l_a4wrData_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrData_fifof_q_0_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrData_fifof_q_0_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_0_D_IN = a4l_a4wrData_fifof_q_1;
      default: a4l_a4wrData_fifof_q_0_D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo7 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register a4l_a4wrData_fifof_q_1
  always@(MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_1 or
	  MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1:
	  a4l_a4wrData_fifof_q_1_D_IN =
	      MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_1;
      MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2:
	  a4l_a4wrData_fifof_q_1_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_1_D_IN = 36'd0;
      default: a4l_a4wrData_fifof_q_1_D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo5 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register cmdAddrV
  assign cmdAddrV_D_IN = { crtCmdF_D_OUT, cmdAddrV[63:32] } ;
  assign cmdAddrV_EN = MUX_lastTag_write_1__PSEL_2 && cmdAdrRemain != 2'd0 ;

  // register cmdAdlRemain
  always@(MUX_cmdAdlRemain_write_1__SEL_1 or
	  crtCmdF_D_OUT or
	  WILL_FIRE_RL_cmd_nop or
	  MUX_cmdAdlRemain_write_1__VAL_2 or
	  WILL_FIRE_RL_cmd_write or MUX_cmdAdlRemain_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cmdAdlRemain_write_1__SEL_1:
	  cmdAdlRemain_D_IN = crtCmdF_D_OUT[27:16];
      WILL_FIRE_RL_cmd_nop:
	  cmdAdlRemain_D_IN = MUX_cmdAdlRemain_write_1__VAL_2;
      WILL_FIRE_RL_cmd_write:
	  cmdAdlRemain_D_IN = MUX_cmdAdlRemain_write_1__VAL_3;
      default: cmdAdlRemain_D_IN = 12'b101010101010 /* unspecified value */ ;
    endcase
  end
  assign cmdAdlRemain_EN =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 &&
	     (crtCmdF_D_OUT[5:4] == 2'd0 || crtCmdF_D_OUT[5:4] == 2'd1) ||
	     WILL_FIRE_RL_cmd_nop ||
	     WILL_FIRE_RL_cmd_write ;

  // register cmdAdrRemain
  assign cmdAdrRemain_D_IN =
	     MUX_cmdAdrRemain_write_1__SEL_1 ?
	       MUX_cmdAdrRemain_write_1__VAL_1 :
	       MUX_cmdAdrRemain_write_1__VAL_2 ;
  assign cmdAdrRemain_EN =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 ||
	     WILL_FIRE_RL_cmd_read ||
	     WILL_FIRE_RL_cmd_write ;

  // register cmdCRH
  assign cmdCRH_D_IN =
	     MUX_cmdAdrRemain_write_1__SEL_1 ?
	       MUX_cmdCRH_write_1__VAL_1 :
	       35'h6AAAAAAAA ;
  assign cmdCRH_EN =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 ||
	     WILL_FIRE_RL_cmd_nop && cmdAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_cmd_write && cmdAdrRemain == 2'd0 &&
	     cmdAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_cmd_read ;

  // register cmdIsDO
  assign cmdIsDO_D_IN =
	     !MUX_cmdIsDO_write_1__SEL_2 && !WILL_FIRE_RL_rsp_write ;
  assign cmdIsDO_EN =
	     (WILL_FIRE_RL_cmd_read || WILL_FIRE_RL_cmd_write ||
	      WILL_FIRE_RL_cmd_nop) &&
	     cmdCRH[7] ||
	     (WILL_FIRE_RL_rsp_read || WILL_FIRE_RL_rsp_nop) && rspActive &&
	     rspAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_rsp_write ;

  // register cmdIsLast
  assign cmdIsLast_D_IN =
	     !MUX_cmdIsLast_write_1__SEL_1 && !WILL_FIRE_RL_rsp_write &&
	     !MUX_cmdIsLast_write_1__SEL_3 &&
	     crtCmdF_D_OUT[31] ;
  assign cmdIsLast_EN =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 ||
	     (WILL_FIRE_RL_rsp_read || WILL_FIRE_RL_rsp_nop) && rspActive &&
	     rspAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_rsp_write ;

  // register crtBusy
  assign crtBusy_D_IN =
	     !MUX_cmdIsLast_write_1__SEL_1 && !WILL_FIRE_RL_rsp_write &&
	     !MUX_cmdIsLast_write_1__SEL_3 ;
  assign crtBusy_EN =
	     WILL_FIRE_RL_cmd_crh && crtCmdF_D_OUT != 32'd0 ||
	     (WILL_FIRE_RL_rsp_read || WILL_FIRE_RL_rsp_nop) && rspActive &&
	     rspAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_rsp_write ;

  // register lastTag
  assign lastTag_D_IN =
	     MUX_lastTag_write_1__SEL_1 ? 5'd10 : MUX_lastTag_write_1__VAL_2 ;
  assign lastTag_EN =
	     WILL_FIRE_RL_cmd_nop && !cmdCRH[7] || _dand2lastTag_EN_write ;

  // register modActive
  assign modActive_D_IN = 1'b1 ;
  assign modActive_EN = 1'd1 ;

  // register modFaulted
  assign modFaulted_D_IN = 1'b1 ;
  assign modFaulted_EN = 1'd1 ;

  // register rspActive
  assign rspActive_D_IN = rspAdlRemain != 12'd1 ;
  assign rspActive_EN = MUX_cmdIsDO_write_1__PSEL_2 ;

  // register rspAdlRemain
  assign rspAdlRemain_D_IN =
	     rspActive ? rspAdlRemain - 12'd1 : rspCRH[27:16] ;
  assign rspAdlRemain_EN = MUX_cmdIsDO_write_1__PSEL_2 ;

  // register rspCRH
  always@(MUX_cmdCRH_write_1__SEL_2 or
	  MUX_rspCRH_write_1__VAL_1 or
	  MUX_cmdCRH_write_1__SEL_3 or
	  MUX_rspCRH_write_1__VAL_2 or
	  MUX_rspCRH_write_1__SEL_3 or
	  MUX_rspCRH_write_1__VAL_3 or
	  MUX_rspCRH_write_1__SEL_4 or WILL_FIRE_RL_rsp_write)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cmdCRH_write_1__SEL_2: rspCRH_D_IN = MUX_rspCRH_write_1__VAL_1;
      MUX_cmdCRH_write_1__SEL_3: rspCRH_D_IN = MUX_rspCRH_write_1__VAL_2;
      MUX_rspCRH_write_1__SEL_3: rspCRH_D_IN = MUX_rspCRH_write_1__VAL_3;
      MUX_rspCRH_write_1__SEL_4 || WILL_FIRE_RL_rsp_write:
	  rspCRH_D_IN = 35'h6AAAAAAAA;
      default: rspCRH_D_IN = 35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rspCRH_EN =
	     WILL_FIRE_RL_cmd_nop && cmdAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_cmd_write && cmdAdrRemain == 2'd0 &&
	     cmdAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_cmd_read &&
	     (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	      !lastTag[4] ||
	      cmdCRH[7]) ||
	     (WILL_FIRE_RL_rsp_read || WILL_FIRE_RL_rsp_nop) && rspActive &&
	     rspAdlRemain == 12'd1 ||
	     WILL_FIRE_RL_rsp_write ;

  // register sizInitRespB
  assign sizInitRespB_D_IN = crtCmdF_D_OUT ;
  assign sizInitRespB_EN = WILL_FIRE_RL_cmd_nop && cmdAdlRemain == 12'd2 ;

  // submodule a4l_a4rdResp_fifof
  assign a4l_a4rdResp_fifof_D_IN = axiM0_rdResp_data_value ;
  assign a4l_a4rdResp_fifof_ENQ = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;
  assign a4l_a4rdResp_fifof_DEQ = WILL_FIRE_RL_rsp_read && rspActive ;
  assign a4l_a4rdResp_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrResp_fifof
  assign a4l_a4wrResp_fifof_D_IN = axiM0_wrResp_data_value ;
  assign a4l_a4wrResp_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;
  assign a4l_a4wrResp_fifof_DEQ = CAN_FIRE_RL_rsp_write ;
  assign a4l_a4wrResp_fifof_CLR = 1'b0 ;

  // submodule crtCmdF
  assign crtCmdF_D_IN = crtS0_request_put ;
  assign crtCmdF_ENQ = EN_crtS0_request_put ;
  assign crtCmdF_DEQ =
	     WILL_FIRE_RL_cmd_read || WILL_FIRE_RL_cmd_write ||
	     WILL_FIRE_RL_cmd_nop ||
	     WILL_FIRE_RL_cmd_crh ;
  assign crtCmdF_CLR = 1'b0 ;

  // submodule crtRespF
  always@(WILL_FIRE_RL_rsp_nop or
	  MUX_crtRespF_enq_1__VAL_1 or
	  WILL_FIRE_RL_rsp_write or
	  MUX_crtRespF_enq_1__VAL_2 or
	  WILL_FIRE_RL_rsp_read or MUX_crtRespF_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rsp_nop: crtRespF_D_IN = MUX_crtRespF_enq_1__VAL_1;
      WILL_FIRE_RL_rsp_write: crtRespF_D_IN = MUX_crtRespF_enq_1__VAL_2;
      WILL_FIRE_RL_rsp_read: crtRespF_D_IN = MUX_crtRespF_enq_1__VAL_3;
      default: crtRespF_D_IN = 40'hAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign crtRespF_ENQ =
	     WILL_FIRE_RL_rsp_nop || WILL_FIRE_RL_rsp_write ||
	     WILL_FIRE_RL_rsp_read ;
  assign crtRespF_DEQ = EN_crtS0_response_get ;
  assign crtRespF_CLR = 1'b0 ;

  // submodule respBufferF
  assign respBufferF_D_IN = 40'h0 ;
  assign respBufferF_ENQ = 1'b0 ;
  assign respBufferF_DEQ = 1'b0 ;
  assign respBufferF_CLR =
	     MUX_lastTag_write_1__PSEL_2 &&
	     (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	      !lastTag[4] ||
	      cmdCRH[7]) ;

  // remaining internal signals
  assign IF_NOT_rspActive_90_98_OR_NOT_rspAdlRemain_87__ETC___d200 =
	     (!rspActive || rspAdlRemain != 12'd1) ? 2'd0 : 2'd1 ;
  assign IF_rspActive_90_THEN_IF_rspAdlRemain_87_EQ_2_9_ETC___d211 =
	     rspActive ?
	       advert__h7065 :
	       { rspCRH[31:12],
		 IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208,
		 rspCRH[7:0] } ;
  assign _dand2lastTag_EN_write =
	     (WILL_FIRE_RL_cmd_read || WILL_FIRE_RL_cmd_write) &&
	     (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	      !lastTag[4]) &&
	     !cmdCRH[7] ;
  assign _dfoo1 =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrAddr_fifof_cntr_r_MINUS_1___d15 == 2'd1 ;
  assign _dfoo11 =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd1 ||
	     a4l_a4rdAddr_fifof_cntr_r_7_MINUS_1___d75 == 2'd0 ;
  assign _dfoo3 =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrAddr_fifof_cntr_r_MINUS_1___d15 == 2'd0 ;
  assign _dfoo5 =
	     a4l_a4wrData_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrData_fifof_cntr_r_4_MINUS_1___d42 == 2'd1 ;
  assign _dfoo7 =
	     a4l_a4wrData_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrData_fifof_cntr_r_4_MINUS_1___d42 == 2'd0 ;
  assign _dfoo9 =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd2 ||
	     a4l_a4rdAddr_fifof_cntr_r_7_MINUS_1___d75 == 2'd1 ;
  assign a4l_a4rdAddr_fifof_cntr_r_7_MINUS_1___d75 =
	     a4l_a4rdAddr_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrAddr_fifof_cntr_r_MINUS_1___d15 =
	     a4l_a4wrAddr_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrData_fifof_cntr_r_4_MINUS_1___d42 =
	     a4l_a4wrData_fifof_cntr_r - 2'd1 ;
  assign advert__h7065 = (rspAdlRemain == 12'd2) ? 32'h00000052 : 32'd0 ;
  assign cmdAdlRemain_68_MINUS_1___d170 = cmdAdlRemain - 12'd1 ;
  assign cmdAdrRemain_20_EQ_0_21_AND_cmdAdlRemain_68_EQ_ETC___d250 =
	     cmdAdrRemain == 2'd0 && cmdAdlRemain == 12'd1 &&
	     (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	      !lastTag[4] ||
	      cmdCRH[7]) ;
  assign cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 =
	     cmdCRH[3:0] == lastTag[3:0] ;
  assign crtCmdF_i_notEmpty__02_AND_NOT_cmdAdrRemain_20_ETC___d235 =
	     crtCmdF_EMPTY_N &&
	     (cmdAdrRemain != 2'd0 || cmdAdlRemain != 12'd1 ||
	      (cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 &&
	       lastTag[4] &&
	       !cmdCRH[7] ||
	       a4l_a4wrAddr_fifof_cntr_r != 2'd2) &&
	      (cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 &&
	       lastTag[4] &&
	       !cmdCRH[7] ||
	       a4l_a4wrData_fifof_cntr_r != 2'd2)) ;
  assign data__h12146 =
	     rspActive ?
	       a4l_a4rdResp_fifof_D_OUT[31:0] :
	       { rspCRH[31:12],
		 IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208,
		 rspCRH[7:0] } ;
  always@(crtRespF_D_OUT)
  begin
    case (crtRespF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_crtRespFD_OUT_BITS_39_TO_38_0_crtRespFD_ETC__q1 =
	      crtRespF_D_OUT[39:38];
      2'd3: CASE_crtRespFD_OUT_BITS_39_TO_38_0_crtRespFD_ETC__q1 = 2'd3;
    endcase
  end
  always@(crtRespF_D_OUT)
  begin
    case (crtRespF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_crtRespFD_OUT_BITS_29_TO_28_0_crtRespFD_ETC__q2 =
	      crtRespF_D_OUT[29:28];
      2'd3: CASE_crtRespFD_OUT_BITS_29_TO_28_0_crtRespFD_ETC__q2 = 2'd3;
    endcase
  end
  always@(crtRespF_D_OUT)
  begin
    case (crtRespF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_crtRespFD_OUT_BITS_19_TO_18_0_crtRespFD_ETC__q3 =
	      crtRespF_D_OUT[19:18];
      2'd3: CASE_crtRespFD_OUT_BITS_19_TO_18_0_crtRespFD_ETC__q3 = 2'd3;
    endcase
  end
  always@(crtRespF_D_OUT)
  begin
    case (crtRespF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_crtRespFD_OUT_BITS_9_TO_8_0_crtRespFD_O_ETC__q4 =
	      crtRespF_D_OUT[9:8];
      2'd3: CASE_crtRespFD_OUT_BITS_9_TO_8_0_crtRespFD_O_ETC__q4 = 2'd3;
    endcase
  end
  always@(rspCRH)
  begin
    case (rspCRH[11:8])
      4'd0, 4'd1, 4'd2:
	  IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208 =
	      rspCRH[11:8];
      default: IF_rspCRH_47_BITS_11_TO_8_02_EQ_0_03_OR_rspCRH_ETC___d208 =
		   4'd15;
    endcase
  end
  always@(crtCmdF_D_OUT)
  begin
    case (crtCmdF_D_OUT[5:4])
      2'd0: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q5 = 3'd0;
      2'd1: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q5 = 3'd1;
      default: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q5 = 3'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	cmdAdlRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	cmdAdrRemain <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cmdCRH <= `BSV_ASSIGNMENT_DELAY 35'h6AAAAAAAA;
	cmdIsDO <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cmdIsLast <= `BSV_ASSIGNMENT_DELAY 1'd0;
	crtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lastTag <= `BSV_ASSIGNMENT_DELAY 5'd10;
	modActive <= `BSV_ASSIGNMENT_DELAY 1'd1;
	modFaulted <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rspActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rspAdlRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rspCRH <= `BSV_ASSIGNMENT_DELAY 35'h6AAAAAAAA;
	sizInitRespB <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a4l_a4rdAddr_fifof_cntr_r_EN)
	  a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_cntr_r_D_IN;
	if (a4l_a4rdAddr_fifof_q_0_EN)
	  a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_0_D_IN;
	if (a4l_a4rdAddr_fifof_q_1_EN)
	  a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_1_D_IN;
	if (a4l_a4wrAddr_fifof_cntr_r_EN)
	  a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_cntr_r_D_IN;
	if (a4l_a4wrAddr_fifof_q_0_EN)
	  a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_0_D_IN;
	if (a4l_a4wrAddr_fifof_q_1_EN)
	  a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_1_D_IN;
	if (a4l_a4wrData_fifof_cntr_r_EN)
	  a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_cntr_r_D_IN;
	if (a4l_a4wrData_fifof_q_0_EN)
	  a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_0_D_IN;
	if (a4l_a4wrData_fifof_q_1_EN)
	  a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_1_D_IN;
	if (cmdAdlRemain_EN)
	  cmdAdlRemain <= `BSV_ASSIGNMENT_DELAY cmdAdlRemain_D_IN;
	if (cmdAdrRemain_EN)
	  cmdAdrRemain <= `BSV_ASSIGNMENT_DELAY cmdAdrRemain_D_IN;
	if (cmdCRH_EN) cmdCRH <= `BSV_ASSIGNMENT_DELAY cmdCRH_D_IN;
	if (cmdIsDO_EN) cmdIsDO <= `BSV_ASSIGNMENT_DELAY cmdIsDO_D_IN;
	if (cmdIsLast_EN) cmdIsLast <= `BSV_ASSIGNMENT_DELAY cmdIsLast_D_IN;
	if (crtBusy_EN) crtBusy <= `BSV_ASSIGNMENT_DELAY crtBusy_D_IN;
	if (lastTag_EN) lastTag <= `BSV_ASSIGNMENT_DELAY lastTag_D_IN;
	if (modActive_EN) modActive <= `BSV_ASSIGNMENT_DELAY modActive_D_IN;
	if (modFaulted_EN)
	  modFaulted <= `BSV_ASSIGNMENT_DELAY modFaulted_D_IN;
	if (rspActive_EN) rspActive <= `BSV_ASSIGNMENT_DELAY rspActive_D_IN;
	if (rspAdlRemain_EN)
	  rspAdlRemain <= `BSV_ASSIGNMENT_DELAY rspAdlRemain_D_IN;
	if (rspCRH_EN) rspCRH <= `BSV_ASSIGNMENT_DELAY rspCRH_D_IN;
	if (sizInitRespB_EN)
	  sizInitRespB <= `BSV_ASSIGNMENT_DELAY sizInitRespB_D_IN;
      end
    if (cmdAddrV_EN) cmdAddrV <= `BSV_ASSIGNMENT_DELAY cmdAddrV_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdAddr_fifof_cntr_r = 2'h2;
    a4l_a4rdAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4rdAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_cntr_r = 2'h2;
    a4l_a4wrAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrData_fifof_cntr_r = 2'h2;
    a4l_a4wrData_fifof_q_0 = 36'hAAAAAAAAA;
    a4l_a4wrData_fifof_q_1 = 36'hAAAAAAAAA;
    cmdAddrV = 64'hAAAAAAAAAAAAAAAA;
    cmdAdlRemain = 12'hAAA;
    cmdAdrRemain = 2'h2;
    cmdCRH = 35'h2AAAAAAAA;
    cmdIsDO = 1'h0;
    cmdIsLast = 1'h0;
    crtBusy = 1'h0;
    lastTag = 5'h0A;
    modActive = 1'h0;
    modFaulted = 1'h0;
    rspActive = 1'h0;
    rspAdlRemain = 12'hAAA;
    rspCRH = 35'h2AAAAAAAA;
    sizInitRespB = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_nop)
	begin
	  v__h6928 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_nop)
	$display("[%0d]: %m: Hcrt cmd_nop cmdAdlRemain:%0d data:%0x",
		 v__h6928,
		 $unsigned(cmdAdlRemain),
		 crtCmdF_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_nop)
	begin
	  v__h7081 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_nop)
	$display("[%0d]: %m: Hcrt rsp_nop rspAdlRemain:%0d advert:%0x",
		 v__h7081,
		 $unsigned(rspAdlRemain),
		 advert__h7065);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_write && cmdAdrRemain == 2'd0 &&
	  cmdAdlRemain == 12'd1)
	begin
	  v__h9380 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_write && cmdAdrRemain == 2'd0 &&
	  cmdAdlRemain == 12'd1)
	$display("[%0d]: %m: Hcrt cmd_write address:%0x data:%0x",
		 v__h9380,
		 cmdAddrV[63:32],
		 crtCmdF_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_write)
	begin
	  v__h9722 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_write)
	$display("[%0d]: %m: Hcrt rsp_write", v__h9722);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_read &&
	  (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	   !lastTag[4] ||
	   cmdCRH[7]))
	begin
	  v__h11604 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_read &&
	  (!cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 ||
	   !lastTag[4] ||
	   cmdCRH[7]))
	$display("[%0d]: %m: Hcrt cmd_read address:%0x",
		 v__h11604,
		 crtCmdF_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_read &&
	  cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 &&
	  lastTag[4] &&
	  !cmdCRH[7])
	begin
	  v__h11661 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cmd_read &&
	  cmdCRH_03_BITS_3_TO_0_77_EQ_lastTag_25_BITS_3__ETC___d227 &&
	  lastTag[4] &&
	  !cmdCRH[7])
	$display("[%0d]: %m: Hcrt cmd_read *TAGS MATCH *address:%0x",
		 v__h11661,
		 crtCmdF_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_read && rspActive && rspAdlRemain == 12'd1)
	begin
	  v__h13051 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rsp_read && rspActive && rspAdlRemain == 12'd1)
	$display("[%0d]: %m: Hcrt rsp_read got data:%0x",
		 v__h13051,
		 data__h12146);
  end
  // synopsys translate_on
endmodule  // mkHCrtCompleter2Axi

