//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Mar  3 15:41:48 EST 2013
//
// Method conflict info:
// Method: m_axi_mAWVALID
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sAWREADY
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sAWREADY
//
// Method: m_axi_mAWADDR
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_mAWPROT
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_mWVALID
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sWREADY
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sWREADY
//
// Method: m_axi_mWDATA
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_mWSTRB
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sBVALID
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sBVALID
//
// Method: m_axi_mBREADY
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sBRESP
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sBRESP
//
// Method: m_axi_mARVALID
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sARREADY
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sARREADY
//
// Method: m_axi_mARADDR
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_mARPROT
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sRVALID
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sRVALID
//
// Method: m_axi_mRREADY
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: m_axi_sRDATA
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sRDATA
//
// Method: m_axi_sRRESP
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: m_axi_sRRESP
//
// Method: gmii_rx_rxd
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_en
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_er
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_col
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: m_axi_mAWVALID,
// 	       m_axi_sAWREADY,
// 	       m_axi_mAWADDR,
// 	       m_axi_mAWPROT,
// 	       m_axi_mWVALID,
// 	       m_axi_sWREADY,
// 	       m_axi_mWDATA,
// 	       m_axi_mWSTRB,
// 	       m_axi_sBVALID,
// 	       m_axi_mBREADY,
// 	       m_axi_sBRESP,
// 	       m_axi_mARVALID,
// 	       m_axi_sARREADY,
// 	       m_axi_mARADDR,
// 	       m_axi_mARPROT,
// 	       m_axi_sRVALID,
// 	       m_axi_mRREADY,
// 	       m_axi_sRDATA,
// 	       m_axi_sRRESP,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
//
// Ports:
// Name                         I/O  size props
// m_axi_awvalid                  O     1
// m_axi_awaddr                   O    32 reg
// m_axi_awprot                   O     3 reg
// m_axi_wvalid                   O     1
// m_axi_wdata                    O    32 reg
// m_axi_wstrb                    O     4 reg
// m_axi_bready                   O     1 reg
// m_axi_arvalid                  O     1
// m_axi_araddr                   O    32 reg
// m_axi_arprot                   O     3 reg
// m_axi_rready                   O     1 reg
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// gmii_led                       O     1 reg
// m_axi_aclk                     O     1 clock
// CLK_GATE_m_axi_aclk            O     1 const
// rxclk_ModBnd                   O     1 clock
// CLK_GATE_rxclk_ModBnd          O     1 const
// gmii_gtx_clk                   O     1 clock
// CLK_GATE_gmii_gtx_clk          O     1 const
// m_axi_aresetn                  O     1 reset
// gmii_rstn                      O     1 reset
// sys0_clk                       I     1 unused
// sys0_rst                       I     1 reset
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// m_axi_bresp                    I     2 reg
// m_axi_rdata                    I    32 reg
// m_axi_rresp                    I     2 reg
// gmii_rxd                       I     8 reg
// gmii_rx_dv                     I     1 reg
// gmii_rx_er                     I     1 reg
// gmii_col                       I     1
// gmii_crs                       I     1
// gmii_int                       I     1
// m_axi_awready                  I     1
// m_axi_wready                   I     1
// m_axi_bvalid                   I     1
// m_axi_arready                  I     1
// m_axi_rvalid                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkL2HCrt(sys0_clk,
		sys0_rst,
		sys1_clkp,
		sys1_clkn,
		gmii_rx_clk,

		m_axi_awvalid,

		m_axi_awready,

		m_axi_awaddr,

		m_axi_awprot,

		m_axi_wvalid,

		m_axi_wready,

		m_axi_wdata,

		m_axi_wstrb,

		m_axi_bvalid,

		m_axi_bready,

		m_axi_bresp,

		m_axi_arvalid,

		m_axi_arready,

		m_axi_araddr,

		m_axi_arprot,

		m_axi_rvalid,

		m_axi_rready,

		m_axi_rdata,

		m_axi_rresp,

		gmii_rxd,

		gmii_rx_dv,

		gmii_rx_er,

		gmii_txd,

		gmii_tx_en,

		gmii_tx_er,

		gmii_col,

		gmii_crs,

		gmii_int,

		gmii_led,

		m_axi_aclk,
		CLK_GATE_m_axi_aclk,

		rxclk_ModBnd,
		CLK_GATE_rxclk_ModBnd,

		gmii_gtx_clk,
		CLK_GATE_gmii_gtx_clk,

		m_axi_aresetn,
		gmii_rstn);
  input  sys0_clk;
  input  sys0_rst;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;

  // value method m_axi_mAWVALID
  output m_axi_awvalid;

  // action method m_axi_sAWREADY
  input  m_axi_awready;

  // value method m_axi_mAWADDR
  output [31 : 0] m_axi_awaddr;

  // value method m_axi_mAWPROT
  output [2 : 0] m_axi_awprot;

  // value method m_axi_mWVALID
  output m_axi_wvalid;

  // action method m_axi_sWREADY
  input  m_axi_wready;

  // value method m_axi_mWDATA
  output [31 : 0] m_axi_wdata;

  // value method m_axi_mWSTRB
  output [3 : 0] m_axi_wstrb;

  // action method m_axi_sBVALID
  input  m_axi_bvalid;

  // value method m_axi_mBREADY
  output m_axi_bready;

  // action method m_axi_sBRESP
  input  [1 : 0] m_axi_bresp;

  // value method m_axi_mARVALID
  output m_axi_arvalid;

  // action method m_axi_sARREADY
  input  m_axi_arready;

  // value method m_axi_mARADDR
  output [31 : 0] m_axi_araddr;

  // value method m_axi_mARPROT
  output [2 : 0] m_axi_arprot;

  // action method m_axi_sRVALID
  input  m_axi_rvalid;

  // value method m_axi_mRREADY
  output m_axi_rready;

  // action method m_axi_sRDATA
  input  [31 : 0] m_axi_rdata;

  // action method m_axi_sRRESP
  input  [1 : 0] m_axi_rresp;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rxd;

  // action method gmii_rx_rx_dv
  input  gmii_rx_dv;

  // action method gmii_rx_rx_er
  input  gmii_rx_er;

  // value method gmii_tx_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_er;

  // action method gmii_col
  input  gmii_col;

  // action method gmii_crs
  input  gmii_crs;

  // action method gmii_intr
  input  gmii_int;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock m_axi_aclk
  output m_axi_aclk;
  output CLK_GATE_m_axi_aclk;

  // oscillator and gates for output clock rxclk_ModBnd
  output rxclk_ModBnd;
  output CLK_GATE_rxclk_ModBnd;

  // oscillator and gates for output clock gmii_gtx_clk
  output gmii_gtx_clk;
  output CLK_GATE_gmii_gtx_clk;

  // output resets
  output m_axi_aresetn;
  output gmii_rstn;

  // signals for module outputs
  wire [31 : 0] m_axi_araddr, m_axi_awaddr, m_axi_wdata;
  wire [7 : 0] gmii_txd;
  wire [3 : 0] m_axi_wstrb;
  wire [2 : 0] m_axi_arprot, m_axi_awprot;
  wire CLK_GATE_gmii_gtx_clk,
       CLK_GATE_m_axi_aclk,
       CLK_GATE_rxclk_ModBnd,
       gmii_gtx_clk,
       gmii_led,
       gmii_rstn,
       gmii_tx_en,
       gmii_tx_er,
       m_axi_aclk,
       m_axi_aresetn,
       m_axi_arvalid,
       m_axi_awvalid,
       m_axi_bready,
       m_axi_rready,
       m_axi_wvalid,
       rxclk_ModBnd;

  // register l2qc_ptr
  reg [1 : 0] l2qc_ptr;
  wire [1 : 0] l2qc_ptr_D_IN;
  wire l2qc_ptr_EN;

  // register l2qc_sr
  reg [29 : 0] l2qc_sr;
  wire [29 : 0] l2qc_sr_D_IN;
  wire l2qc_sr_EN;

  // register qcl2_ptr
  reg [1 : 0] qcl2_ptr;
  wire [1 : 0] qcl2_ptr_D_IN;
  wire qcl2_ptr_EN;

  // ports of submodule crt2axi
  wire [39 : 0] crt2axi_crtS0_response_get;
  wire [35 : 0] crt2axi_axiM0_wrData_data;
  wire [34 : 0] crt2axi_axiM0_rdAddr_data, crt2axi_axiM0_wrAddr_data;
  wire [33 : 0] crt2axi_axiM0_rdResp_data_value;
  wire [31 : 0] crt2axi_crtS0_request_put;
  wire [1 : 0] crt2axi_axiM0_wrResp_data_value;
  wire crt2axi_EN_crtS0_request_put,
       crt2axi_EN_crtS0_response_get,
       crt2axi_RDY_crtS0_request_put,
       crt2axi_RDY_crtS0_response_get,
       crt2axi_axiM0_rdAddr_ready_value,
       crt2axi_axiM0_rdAddr_valid,
       crt2axi_axiM0_rdResp_ready,
       crt2axi_axiM0_rdResp_valid_value,
       crt2axi_axiM0_wrAddr_ready_value,
       crt2axi_axiM0_wrAddr_valid,
       crt2axi_axiM0_wrData_ready_value,
       crt2axi_axiM0_wrData_valid,
       crt2axi_axiM0_wrResp_ready,
       crt2axi_axiM0_wrResp_valid_value;

  // ports of submodule gmac
  wire [9 : 0] gmac_rx_get, gmac_tx_put;
  wire [7 : 0] gmac_gmii_rxd, gmac_gmii_txd;
  wire gmac_CLK_gmii_gtx_clk,
       gmac_CLK_rxclk_ModBnd,
       gmac_EN_rxOperate,
       gmac_EN_rx_get,
       gmac_EN_txOperate,
       gmac_EN_tx_put,
       gmac_RDY_rx_get,
       gmac_RDY_tx_put,
       gmac_gmii_col,
       gmac_gmii_crs,
       gmac_gmii_int,
       gmac_gmii_led,
       gmac_gmii_rx_dv,
       gmac_gmii_rx_er,
       gmac_gmii_tx_en,
       gmac_gmii_tx_er;

  // ports of submodule l2P
  wire [47 : 0] l2P_macAddr_u;
  wire [9 : 0] l2P_client_request_get,
	       l2P_client_response_put,
	       l2P_server_request_put,
	       l2P_server_response_get;
  wire l2P_EN_client_request_get,
       l2P_EN_client_response_put,
       l2P_EN_macAddr,
       l2P_EN_server_request_put,
       l2P_EN_server_response_get,
       l2P_RDY_client_request_get,
       l2P_RDY_client_response_put,
       l2P_RDY_server_request_put,
       l2P_RDY_server_response_get;

  // ports of submodule l2qc_inF
  wire [9 : 0] l2qc_inF_D_IN, l2qc_inF_D_OUT;
  wire l2qc_inF_CLR,
       l2qc_inF_DEQ,
       l2qc_inF_EMPTY_N,
       l2qc_inF_ENQ,
       l2qc_inF_FULL_N;

  // ports of submodule l2qc_outF
  wire [39 : 0] l2qc_outF_D_IN, l2qc_outF_D_OUT;
  wire l2qc_outF_CLR,
       l2qc_outF_DEQ,
       l2qc_outF_EMPTY_N,
       l2qc_outF_ENQ,
       l2qc_outF_FULL_N;

  // ports of submodule qcl2_inF
  wire [39 : 0] qcl2_inF_D_IN, qcl2_inF_D_OUT;
  wire qcl2_inF_CLR,
       qcl2_inF_DEQ,
       qcl2_inF_EMPTY_N,
       qcl2_inF_ENQ,
       qcl2_inF_FULL_N;

  // ports of submodule qcl2_outF
  wire [9 : 0] qcl2_outF_D_IN, qcl2_outF_D_OUT;
  wire qcl2_outF_CLR,
       qcl2_outF_DEQ,
       qcl2_outF_EMPTY_N,
       qcl2_outF_ENQ,
       qcl2_outF_FULL_N;

  // ports of submodule sys1_clk
  wire sys1_clk_O;

  // ports of submodule sys1_clki
  wire sys1_clki_O;

  // ports of submodule sys1_rst
  wire sys1_rst_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4lm_doAlways,
       CAN_FIRE_RL_gmacOperate,
       CAN_FIRE_RL_l2qc_unfunnel,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_qcl2_funnel,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       CAN_FIRE_m_axi_sARREADY,
       CAN_FIRE_m_axi_sAWREADY,
       CAN_FIRE_m_axi_sBRESP,
       CAN_FIRE_m_axi_sBVALID,
       CAN_FIRE_m_axi_sRDATA,
       CAN_FIRE_m_axi_sRRESP,
       CAN_FIRE_m_axi_sRVALID,
       CAN_FIRE_m_axi_sWREADY,
       WILL_FIRE_RL_a4lm_doAlways,
       WILL_FIRE_RL_gmacOperate,
       WILL_FIRE_RL_l2qc_unfunnel,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_qcl2_funnel,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd,
       WILL_FIRE_m_axi_sARREADY,
       WILL_FIRE_m_axi_sAWREADY,
       WILL_FIRE_m_axi_sBRESP,
       WILL_FIRE_m_axi_sBVALID,
       WILL_FIRE_m_axi_sRDATA,
       WILL_FIRE_m_axi_sRRESP,
       WILL_FIRE_m_axi_sRVALID,
       WILL_FIRE_m_axi_sWREADY;

  // remaining internal signals
  reg [7 : 0] SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83;
  reg [1 : 0] CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q13,
	      CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q12,
	      CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q11,
	      CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q14,
	      CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q8,
	      CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q9,
	      CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q6,
	      CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q1,
	      CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q3,
	      CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q10,
	      CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q2,
	      CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q7;
  reg CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4,
      CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5,
      SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75;
  wire [9 : 0] IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d100,
	       IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d99,
	       IF_l2qc_inF_first_BITS_9_TO_8_EQ_0_OR_l2qc_inF_ETC___d43,
	       IF_l2qc_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_l2qc_sr_ETC___d23,
	       IF_l2qc_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_l2qc_sr_2_ETC___d34;

  // oscillator and gates for output clock m_axi_aclk
  assign m_axi_aclk = sys1_clk_O ;
  assign CLK_GATE_m_axi_aclk = 1'b1 ;

  // oscillator and gates for output clock rxclk_ModBnd
  assign rxclk_ModBnd = gmac_CLK_rxclk_ModBnd ;
  assign CLK_GATE_rxclk_ModBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_gtx_clk
  assign gmii_gtx_clk = gmac_CLK_gmii_gtx_clk ;
  assign CLK_GATE_gmii_gtx_clk = 1'b1 ;

  // output resets
  assign m_axi_aresetn = sys1_rst_OUT_RST ;
  assign gmii_rstn = sys1_rst_OUT_RST ;

  // value method m_axi_mAWVALID
  assign m_axi_awvalid = crt2axi_axiM0_wrAddr_valid ;

  // action method m_axi_sAWREADY
  assign CAN_FIRE_m_axi_sAWREADY = 1'd1 ;
  assign WILL_FIRE_m_axi_sAWREADY = m_axi_awready ;

  // value method m_axi_mAWADDR
  assign m_axi_awaddr = crt2axi_axiM0_wrAddr_data[31:0] ;

  // value method m_axi_mAWPROT
  assign m_axi_awprot = crt2axi_axiM0_wrAddr_data[34:32] ;

  // value method m_axi_mWVALID
  assign m_axi_wvalid = crt2axi_axiM0_wrData_valid ;

  // action method m_axi_sWREADY
  assign CAN_FIRE_m_axi_sWREADY = 1'd1 ;
  assign WILL_FIRE_m_axi_sWREADY = m_axi_wready ;

  // value method m_axi_mWDATA
  assign m_axi_wdata = crt2axi_axiM0_wrData_data[31:0] ;

  // value method m_axi_mWSTRB
  assign m_axi_wstrb = crt2axi_axiM0_wrData_data[35:32] ;

  // action method m_axi_sBVALID
  assign CAN_FIRE_m_axi_sBVALID = 1'd1 ;
  assign WILL_FIRE_m_axi_sBVALID = m_axi_bvalid ;

  // value method m_axi_mBREADY
  assign m_axi_bready = crt2axi_axiM0_wrResp_ready ;

  // action method m_axi_sBRESP
  assign CAN_FIRE_m_axi_sBRESP = 1'd1 ;
  assign WILL_FIRE_m_axi_sBRESP = 1'd1 ;

  // value method m_axi_mARVALID
  assign m_axi_arvalid = crt2axi_axiM0_rdAddr_valid ;

  // action method m_axi_sARREADY
  assign CAN_FIRE_m_axi_sARREADY = 1'd1 ;
  assign WILL_FIRE_m_axi_sARREADY = m_axi_arready ;

  // value method m_axi_mARADDR
  assign m_axi_araddr = crt2axi_axiM0_rdAddr_data[31:0] ;

  // value method m_axi_mARPROT
  assign m_axi_arprot = crt2axi_axiM0_rdAddr_data[34:32] ;

  // action method m_axi_sRVALID
  assign CAN_FIRE_m_axi_sRVALID = 1'd1 ;
  assign WILL_FIRE_m_axi_sRVALID = m_axi_rvalid ;

  // value method m_axi_mRREADY
  assign m_axi_rready = crt2axi_axiM0_rdResp_ready ;

  // action method m_axi_sRDATA
  assign CAN_FIRE_m_axi_sRDATA = 1'd1 ;
  assign WILL_FIRE_m_axi_sRDATA = 1'd1 ;

  // action method m_axi_sRRESP
  assign CAN_FIRE_m_axi_sRRESP = 1'd1 ;
  assign WILL_FIRE_m_axi_sRRESP = 1'd1 ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_txd = gmac_gmii_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_en = gmac_gmii_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_er = gmac_gmii_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gmac_gmii_led ;

  // submodule crt2axi
  mkHCrtCompleter2Axi crt2axi(.CLK(sys1_clk_O),
			      .RST_N(sys1_rst_OUT_RST),
			      .axiM0_rdAddr_ready_value(crt2axi_axiM0_rdAddr_ready_value),
			      .axiM0_rdResp_data_value(crt2axi_axiM0_rdResp_data_value),
			      .axiM0_rdResp_valid_value(crt2axi_axiM0_rdResp_valid_value),
			      .axiM0_wrAddr_ready_value(crt2axi_axiM0_wrAddr_ready_value),
			      .axiM0_wrData_ready_value(crt2axi_axiM0_wrData_ready_value),
			      .axiM0_wrResp_data_value(crt2axi_axiM0_wrResp_data_value),
			      .axiM0_wrResp_valid_value(crt2axi_axiM0_wrResp_valid_value),
			      .crtS0_request_put(crt2axi_crtS0_request_put),
			      .EN_crtS0_request_put(crt2axi_EN_crtS0_request_put),
			      .EN_crtS0_response_get(crt2axi_EN_crtS0_response_get),
			      .RDY_crtS0_request_put(crt2axi_RDY_crtS0_request_put),
			      .crtS0_response_get(crt2axi_crtS0_response_get),
			      .RDY_crtS0_response_get(crt2axi_RDY_crtS0_response_get),
			      .axiM0_wrAddr_data(crt2axi_axiM0_wrAddr_data),
			      .axiM0_wrAddr_valid(crt2axi_axiM0_wrAddr_valid),
			      .axiM0_wrData_data(crt2axi_axiM0_wrData_data),
			      .axiM0_wrData_valid(crt2axi_axiM0_wrData_valid),
			      .axiM0_wrResp_ready(crt2axi_axiM0_wrResp_ready),
			      .axiM0_rdAddr_data(crt2axi_axiM0_rdAddr_data),
			      .axiM0_rdAddr_valid(crt2axi_axiM0_rdAddr_valid),
			      .axiM0_rdResp_ready(crt2axi_axiM0_rdResp_ready),
			      .isActive(),
			      .RDY_isActive(),
			      .isFaulted(),
			      .RDY_isFaulted());

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(gmii_rx_clk),
	      .CLK_txClk(sys1_clk_O),
	      .CLK(sys1_clk_O),
	      .RST_N(sys1_rst_OUT_RST),
	      .gmii_col(gmac_gmii_col),
	      .gmii_crs(gmac_gmii_crs),
	      .gmii_int(gmac_gmii_int),
	      .gmii_rx_dv(gmac_gmii_rx_dv),
	      .gmii_rx_er(gmac_gmii_rx_er),
	      .gmii_rxd(gmac_gmii_rxd),
	      .tx_put(gmac_tx_put),
	      .EN_rx_get(gmac_EN_rx_get),
	      .EN_tx_put(gmac_EN_tx_put),
	      .EN_rxOperate(gmac_EN_rxOperate),
	      .EN_txOperate(gmac_EN_txOperate),
	      .gmii_txd(gmac_gmii_txd),
	      .gmii_tx_en(gmac_gmii_tx_en),
	      .gmii_tx_er(gmac_gmii_tx_er),
	      .gmii_led(gmac_gmii_led),
	      .rx_get(gmac_rx_get),
	      .RDY_rx_get(gmac_RDY_rx_get),
	      .RDY_tx_put(gmac_RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_gtx_clk(gmac_CLK_gmii_gtx_clk),
	      .CLK_GATE_gmii_gtx_clk(),
	      .CLK_rxclk_ModBnd(gmac_CLK_rxclk_ModBnd),
	      .CLK_GATE_rxclk_ModBnd());

  // submodule l2P
  mkL2Proc l2P(.CLK(sys1_clk_O),
	       .RST_N(sys1_rst_OUT_RST),
	       .client_response_put(l2P_client_response_put),
	       .macAddr_u(l2P_macAddr_u),
	       .server_request_put(l2P_server_request_put),
	       .EN_server_request_put(l2P_EN_server_request_put),
	       .EN_server_response_get(l2P_EN_server_response_get),
	       .EN_client_request_get(l2P_EN_client_request_get),
	       .EN_client_response_put(l2P_EN_client_response_put),
	       .EN_macAddr(l2P_EN_macAddr),
	       .RDY_server_request_put(l2P_RDY_server_request_put),
	       .server_response_get(l2P_server_response_get),
	       .RDY_server_response_get(l2P_RDY_server_response_get),
	       .client_request_get(l2P_client_request_get),
	       .RDY_client_request_get(l2P_RDY_client_request_get),
	       .RDY_client_response_put(l2P_RDY_client_response_put),
	       .RDY_macAddr(),
	       .l2Rx(),
	       .RDY_l2Rx(),
	       .l2Tx(),
	       .RDY_l2Tx());

  // submodule l2qc_inF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) l2qc_inF(.RST(sys1_rst_OUT_RST),
						    .CLK(sys1_clk_O),
						    .D_IN(l2qc_inF_D_IN),
						    .ENQ(l2qc_inF_ENQ),
						    .DEQ(l2qc_inF_DEQ),
						    .CLR(l2qc_inF_CLR),
						    .D_OUT(l2qc_inF_D_OUT),
						    .FULL_N(l2qc_inF_FULL_N),
						    .EMPTY_N(l2qc_inF_EMPTY_N));

  // submodule l2qc_outF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) l2qc_outF(.RST(sys1_rst_OUT_RST),
						     .CLK(sys1_clk_O),
						     .D_IN(l2qc_outF_D_IN),
						     .ENQ(l2qc_outF_ENQ),
						     .DEQ(l2qc_outF_DEQ),
						     .CLR(l2qc_outF_CLR),
						     .D_OUT(l2qc_outF_D_OUT),
						     .FULL_N(l2qc_outF_FULL_N),
						     .EMPTY_N(l2qc_outF_EMPTY_N));

  // submodule qcl2_inF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qcl2_inF(.RST(sys1_rst_OUT_RST),
						    .CLK(sys1_clk_O),
						    .D_IN(qcl2_inF_D_IN),
						    .ENQ(qcl2_inF_ENQ),
						    .DEQ(qcl2_inF_DEQ),
						    .CLR(qcl2_inF_CLR),
						    .D_OUT(qcl2_inF_D_OUT),
						    .FULL_N(qcl2_inF_FULL_N),
						    .EMPTY_N(qcl2_inF_EMPTY_N));

  // submodule qcl2_outF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) qcl2_outF(.RST(sys1_rst_OUT_RST),
						     .CLK(sys1_clk_O),
						     .D_IN(qcl2_outF_D_IN),
						     .ENQ(qcl2_outF_ENQ),
						     .DEQ(qcl2_outF_DEQ),
						     .CLR(qcl2_outF_CLR),
						     .D_OUT(qcl2_outF_D_OUT),
						     .FULL_N(qcl2_outF_FULL_N),
						     .EMPTY_N(qcl2_outF_EMPTY_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki_O), .O(sys1_clk_O));

  // submodule sys1_clki
  IBUFDS_GTE2 sys1_clki(.I(sys1_clkp),
			.IB(sys1_clkn),
			.CEB(1'd0),
			.O(sys1_clki_O),
			.ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk_O),
					  .IN_RST(sys0_rst),
					  .OUT_RST(sys1_rst_OUT_RST));

  // rule RL_gmacOperate
  assign CAN_FIRE_RL_gmacOperate = 1'd1 ;
  assign WILL_FIRE_RL_gmacOperate = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     l2P_RDY_server_request_put && gmac_RDY_rx_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     l2P_RDY_client_request_get && l2qc_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     crt2axi_RDY_crtS0_request_put && l2qc_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     crt2axi_RDY_crtS0_response_get && qcl2_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     l2P_RDY_client_response_put && qcl2_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     l2P_RDY_server_response_get && gmac_RDY_tx_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_l2qc_unfunnel
  assign CAN_FIRE_RL_l2qc_unfunnel =
	     l2qc_inF_EMPTY_N &&
	     (l2qc_ptr != 2'd3 && l2qc_inF_D_OUT[9:8] == 2'd0 ||
	      l2qc_outF_FULL_N) ;
  assign WILL_FIRE_RL_l2qc_unfunnel = CAN_FIRE_RL_l2qc_unfunnel ;

  // rule RL_qcl2_funnel
  assign CAN_FIRE_RL_qcl2_funnel = qcl2_inF_EMPTY_N && qcl2_outF_FULL_N ;
  assign WILL_FIRE_RL_qcl2_funnel = CAN_FIRE_RL_qcl2_funnel ;

  // rule RL_a4lm_doAlways
  assign CAN_FIRE_RL_a4lm_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_a4lm_doAlways = 1'd1 ;

  // register l2qc_ptr
  assign l2qc_ptr_D_IN =
	     (l2qc_inF_D_OUT[9:8] == 2'd0) ? l2qc_ptr + 2'd1 : 2'd0 ;
  assign l2qc_ptr_EN = CAN_FIRE_RL_l2qc_unfunnel ;

  // register l2qc_sr
  assign l2qc_sr_D_IN =
	     { IF_l2qc_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_l2qc_sr_ETC___d23,
	       IF_l2qc_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_l2qc_sr_2_ETC___d34,
	       IF_l2qc_inF_first_BITS_9_TO_8_EQ_0_OR_l2qc_inF_ETC___d43 } ;
  assign l2qc_sr_EN = CAN_FIRE_RL_l2qc_unfunnel ;

  // register qcl2_ptr
  assign qcl2_ptr_D_IN =
	     SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 ?
	       qcl2_ptr + 2'd1 :
	       2'd0 ;
  assign qcl2_ptr_EN = CAN_FIRE_RL_qcl2_funnel ;

  // submodule crt2axi
  assign crt2axi_axiM0_rdAddr_ready_value = m_axi_arready ;
  assign crt2axi_axiM0_rdResp_data_value = { m_axi_rresp, m_axi_rdata } ;
  assign crt2axi_axiM0_rdResp_valid_value = m_axi_rvalid ;
  assign crt2axi_axiM0_wrAddr_ready_value = m_axi_awready ;
  assign crt2axi_axiM0_wrData_ready_value = m_axi_wready ;
  assign crt2axi_axiM0_wrResp_data_value = m_axi_bresp ;
  assign crt2axi_axiM0_wrResp_valid_value = m_axi_bvalid ;
  assign crt2axi_crtS0_request_put =
	     { l2qc_outF_D_OUT[37:30],
	       l2qc_outF_D_OUT[27:20],
	       l2qc_outF_D_OUT[17:10],
	       l2qc_outF_D_OUT[7:0] } ;
  assign crt2axi_EN_crtS0_request_put =
	     crt2axi_RDY_crtS0_request_put && l2qc_outF_EMPTY_N ;
  assign crt2axi_EN_crtS0_response_get =
	     crt2axi_RDY_crtS0_response_get && qcl2_inF_FULL_N ;

  // submodule gmac
  assign gmac_gmii_col = gmii_col ;
  assign gmac_gmii_crs = gmii_crs ;
  assign gmac_gmii_int = gmii_int ;
  assign gmac_gmii_rx_dv = gmii_rx_dv ;
  assign gmac_gmii_rx_er = gmii_rx_er ;
  assign gmac_gmii_rxd = gmii_rxd ;
  assign gmac_tx_put =
	     { CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q6,
	       l2P_server_response_get[7:0] } ;
  assign gmac_EN_rx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign gmac_EN_tx_put = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign gmac_EN_rxOperate = 1'd1 ;
  assign gmac_EN_txOperate = 1'd1 ;

  // submodule l2P
  assign l2P_client_response_put =
	     { CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q7,
	       qcl2_outF_D_OUT[7:0] } ;
  assign l2P_macAddr_u = 48'h0 ;
  assign l2P_server_request_put =
	     { CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q8,
	       gmac_rx_get[7:0] } ;
  assign l2P_EN_server_request_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign l2P_EN_server_response_get = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign l2P_EN_client_request_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign l2P_EN_client_response_put = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign l2P_EN_macAddr = 1'b0 ;

  // submodule l2qc_inF
  assign l2qc_inF_D_IN =
	     { CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q9,
	       l2P_client_request_get[7:0] } ;
  assign l2qc_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign l2qc_inF_DEQ = CAN_FIRE_RL_l2qc_unfunnel ;
  assign l2qc_inF_CLR = 1'b0 ;

  // submodule l2qc_outF
  assign l2qc_outF_D_IN =
	     { IF_l2qc_inF_first_BITS_9_TO_8_EQ_0_OR_l2qc_inF_ETC___d43,
	       IF_l2qc_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_l2qc_sr_2_ETC___d34,
	       IF_l2qc_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_l2qc_sr_ETC___d23,
	       CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q10,
	       l2qc_sr[27:20] } ;
  assign l2qc_outF_ENQ =
	     WILL_FIRE_RL_l2qc_unfunnel &&
	     (l2qc_ptr == 2'd3 || l2qc_inF_D_OUT[9:8] != 2'd0) ;
  assign l2qc_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign l2qc_outF_CLR = 1'b0 ;

  // submodule qcl2_inF
  assign qcl2_inF_D_IN =
	     { CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q11,
	       crt2axi_crtS0_response_get[37:30],
	       CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q12,
	       crt2axi_crtS0_response_get[27:20],
	       CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q13,
	       crt2axi_crtS0_response_get[17:10],
	       CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q14,
	       crt2axi_crtS0_response_get[7:0] } ;
  assign qcl2_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign qcl2_inF_DEQ =
	     WILL_FIRE_RL_qcl2_funnel &&
	     (qcl2_ptr == 2'd3 ||
	      !SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75) ;
  assign qcl2_inF_CLR = 1'b0 ;

  // submodule qcl2_outF
  assign qcl2_outF_D_IN =
	     SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 ?
	       { 2'd0,
		 SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 } :
	       IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d100 ;
  assign qcl2_outF_ENQ = CAN_FIRE_RL_qcl2_funnel ;
  assign qcl2_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign qcl2_outF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d100 =
	     CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5 ?
	       { 2'd1,
		 SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 } :
	       IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d99 ;
  assign IF_SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ__ETC___d99 =
	     { CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4 ?
		 2'd2 :
		 2'd3,
	       SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 } ;
  assign IF_l2qc_inF_first_BITS_9_TO_8_EQ_0_OR_l2qc_inF_ETC___d43 =
	     { CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q1,
	       l2qc_inF_D_OUT[7:0] } ;
  assign IF_l2qc_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_l2qc_sr_ETC___d23 =
	     { CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q3,
	       l2qc_sr[17:10] } ;
  assign IF_l2qc_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_l2qc_sr_2_ETC___d34 =
	     { CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q2,
	       l2qc_sr[7:0] } ;
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 =
	      qcl2_inF_D_OUT[9:8] == 2'd0;
      2'd1:
	  SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 =
	      qcl2_inF_D_OUT[19:18] == 2'd0;
      2'd2:
	  SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 =
	      qcl2_inF_D_OUT[29:28] == 2'd0;
      2'd3:
	  SEL_ARR_qcl2_inF_first__4_BITS_9_TO_8_5_EQ_0_6_ETC___d75 =
	      qcl2_inF_D_OUT[39:38] == 2'd0;
    endcase
  end
  always@(l2qc_inF_D_OUT)
  begin
    case (l2qc_inF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q1 =
	      l2qc_inF_D_OUT[9:8];
      2'd3: CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q1 = 2'd3;
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q2 =
	      l2qc_sr[9:8];
      2'd3: CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q2 = 2'd3;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 =
	      qcl2_inF_D_OUT[7:0];
      2'd1:
	  SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 =
	      qcl2_inF_D_OUT[17:10];
      2'd2:
	  SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 =
	      qcl2_inF_D_OUT[27:20];
      2'd3:
	  SEL_ARR_qcl2_inF_first__4_BITS_7_TO_0_8_qcl2_i_ETC___d83 =
	      qcl2_inF_D_OUT[37:30];
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q3 =
	      l2qc_sr[19:18];
      2'd3: CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q3 = 2'd3;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4 =
	      qcl2_inF_D_OUT[9:8] == 2'd2;
      2'd1:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4 =
	      qcl2_inF_D_OUT[19:18] == 2'd2;
      2'd2:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4 =
	      qcl2_inF_D_OUT[29:28] == 2'd2;
      2'd3:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q4 =
	      qcl2_inF_D_OUT[39:38] == 2'd2;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5 =
	      qcl2_inF_D_OUT[9:8] == 2'd1;
      2'd1:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5 =
	      qcl2_inF_D_OUT[19:18] == 2'd1;
      2'd2:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5 =
	      qcl2_inF_D_OUT[29:28] == 2'd1;
      2'd3:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q5 =
	      qcl2_inF_D_OUT[39:38] == 2'd1;
    endcase
  end
  always@(l2P_server_response_get)
  begin
    case (l2P_server_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q6 =
	      l2P_server_response_get[9:8];
      2'd3: CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q6 = 2'd3;
    endcase
  end
  always@(qcl2_outF_D_OUT)
  begin
    case (qcl2_outF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q7 =
	      qcl2_outF_D_OUT[9:8];
      2'd3: CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q7 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q8 =
	      gmac_rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q8 = 2'd3;
    endcase
  end
  always@(l2P_client_request_get)
  begin
    case (l2P_client_request_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q9 =
	      l2P_client_request_get[9:8];
      2'd3: CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q9 = 2'd3;
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q10 =
	      l2qc_sr[29:28];
      2'd3: CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q10 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q11 =
	      crt2axi_crtS0_response_get[39:38];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q11 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q12 =
	      crt2axi_crtS0_response_get[29:28];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q12 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q13 =
	      crt2axi_crtS0_response_get[19:18];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q13 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q14 =
	      crt2axi_crtS0_response_get[9:8];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q14 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys1_clk_O)
  begin
    if (sys1_rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        l2qc_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	qcl2_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (l2qc_ptr_EN) l2qc_ptr <= `BSV_ASSIGNMENT_DELAY l2qc_ptr_D_IN;
	if (qcl2_ptr_EN) qcl2_ptr <= `BSV_ASSIGNMENT_DELAY qcl2_ptr_D_IN;
      end
    if (l2qc_sr_EN) l2qc_sr <= `BSV_ASSIGNMENT_DELAY l2qc_sr_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    l2qc_ptr = 2'h2;
    l2qc_sr = 30'h2AAAAAAA;
    qcl2_ptr = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkL2HCrt

