//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Wed Mar  6 14:25:53 EST 2013
//
// Method conflict info:
// Method: s_mAWVALID
// Conflict-free: s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mAWVALID
//
// Method: s_sAWREADY
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mAWADDR
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mAWADDR
//
// Method: s_mAWPROT
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mAWPROT
//
// Method: s_mWVALID
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mWVALID
//
// Method: s_sWREADY
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mWDATA
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mWDATA
//
// Method: s_mWSTRB
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mWSTRB
//
// Method: s_sBVALID
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mBREADY
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mBREADY
//
// Method: s_sBRESP
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mARVALID
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mARVALID
//
// Method: s_sARREADY
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mARADDR
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mARADDR
//
// Method: s_mARPROT
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mARPROT
//
// Method: s_sRVALID
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_mRREADY
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
// Conflicts: s_mRREADY
//
// Method: s_sRDATA
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: s_sRRESP
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
// Method: r
// Conflict-free: s_mAWVALID,
// 	       s_sAWREADY,
// 	       s_mAWADDR,
// 	       s_mAWPROT,
// 	       s_mWVALID,
// 	       s_sWREADY,
// 	       s_mWDATA,
// 	       s_mWSTRB,
// 	       s_sBVALID,
// 	       s_mBREADY,
// 	       s_sBRESP,
// 	       s_mARVALID,
// 	       s_sARREADY,
// 	       s_mARADDR,
// 	       s_mARPROT,
// 	       s_sRVALID,
// 	       s_mRREADY,
// 	       s_sRDATA,
// 	       s_sRRESP,
// 	       r
//
//
// Ports:
// Name                         I/O  size props
// s_awready                      O     1 reg
// s_wready                       O     1 reg
// s_bvalid                       O     1
// s_bresp                        O     2 reg
// s_arready                      O     1 reg
// s_rvalid                       O     1
// s_rdata                        O    32 reg
// s_rresp                        O     2 reg
// r                              O  2048 reg
// RDY_r                          O     1 const
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// s_awaddr                       I    32 reg
// s_awprot                       I     3 reg
// s_wdata                        I    32 reg
// s_wstrb                        I     4 reg
// s_araddr                       I    32 reg
// s_arprot                       I     3 reg
// s_awvalid                      I     1
// s_wvalid                       I     1
// s_bready                       I     1
// s_arvalid                      I     1
// s_rready                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkA4LSA(s_axi_aclk,
	       s_axi_aresetn,

	       s_awvalid,

	       s_awready,

	       s_awaddr,

	       s_awprot,

	       s_wvalid,

	       s_wready,

	       s_wdata,

	       s_wstrb,

	       s_bvalid,

	       s_bready,

	       s_bresp,

	       s_arvalid,

	       s_arready,

	       s_araddr,

	       s_arprot,

	       s_rvalid,

	       s_rready,

	       s_rdata,

	       s_rresp,

	       r,
	       RDY_r);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method s_mAWVALID
  input  s_awvalid;

  // value method s_sAWREADY
  output s_awready;

  // action method s_mAWADDR
  input  [31 : 0] s_awaddr;

  // action method s_mAWPROT
  input  [2 : 0] s_awprot;

  // action method s_mWVALID
  input  s_wvalid;

  // value method s_sWREADY
  output s_wready;

  // action method s_mWDATA
  input  [31 : 0] s_wdata;

  // action method s_mWSTRB
  input  [3 : 0] s_wstrb;

  // value method s_sBVALID
  output s_bvalid;

  // action method s_mBREADY
  input  s_bready;

  // value method s_sBRESP
  output [1 : 0] s_bresp;

  // action method s_mARVALID
  input  s_arvalid;

  // value method s_sARREADY
  output s_arready;

  // action method s_mARADDR
  input  [31 : 0] s_araddr;

  // action method s_mARPROT
  input  [2 : 0] s_arprot;

  // value method s_sRVALID
  output s_rvalid;

  // action method s_mRREADY
  input  s_rready;

  // value method s_sRDATA
  output [31 : 0] s_rdata;

  // value method s_sRRESP
  output [1 : 0] s_rresp;

  // value method r
  output [2047 : 0] r;
  output RDY_r;

  // signals for module outputs
  wire [2047 : 0] r;
  wire [31 : 0] s_rdata;
  wire [1 : 0] s_bresp, s_rresp;
  wire RDY_r, s_arready, s_awready, s_bvalid, s_rvalid, s_wready;

  // inlined wires
  wire [35 : 0] a4l_a4wrData_data_wire_wget;
  wire [34 : 0] a4l_a4rdAddr_data_wire_wget, a4l_a4wrAddr_data_wire_wget;

  // register a4l_a4rdResp_fifof_cntr_r
  reg [1 : 0] a4l_a4rdResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_D_IN;
  wire a4l_a4rdResp_fifof_cntr_r_EN;

  // register a4l_a4rdResp_fifof_q_0
  reg [33 : 0] a4l_a4rdResp_fifof_q_0;
  reg [33 : 0] a4l_a4rdResp_fifof_q_0_D_IN;
  wire a4l_a4rdResp_fifof_q_0_EN;

  // register a4l_a4rdResp_fifof_q_1
  reg [33 : 0] a4l_a4rdResp_fifof_q_1;
  reg [33 : 0] a4l_a4rdResp_fifof_q_1_D_IN;
  wire a4l_a4rdResp_fifof_q_1_EN;

  // register a4l_a4wrResp_fifof_cntr_r
  reg [1 : 0] a4l_a4wrResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrResp_fifof_cntr_r_D_IN;
  wire a4l_a4wrResp_fifof_cntr_r_EN;

  // register a4l_a4wrResp_fifof_q_0
  reg [1 : 0] a4l_a4wrResp_fifof_q_0;
  reg [1 : 0] a4l_a4wrResp_fifof_q_0_D_IN;
  wire a4l_a4wrResp_fifof_q_0_EN;

  // register a4l_a4wrResp_fifof_q_1
  reg [1 : 0] a4l_a4wrResp_fifof_q_1;
  wire [1 : 0] a4l_a4wrResp_fifof_q_1_D_IN;
  wire a4l_a4wrResp_fifof_q_1_EN;

  // register b18
  reg [7 : 0] b18;
  wire [7 : 0] b18_D_IN;
  wire b18_EN;

  // register b19
  reg [7 : 0] b19;
  wire [7 : 0] b19_D_IN;
  wire b19_EN;

  // register b1A
  reg [7 : 0] b1A;
  wire [7 : 0] b1A_D_IN;
  wire b1A_EN;

  // register b1B
  reg [7 : 0] b1B;
  wire [7 : 0] b1B_D_IN;
  wire b1B_EN;

  // register lastReadAddr
  reg [31 : 0] lastReadAddr;
  wire [31 : 0] lastReadAddr_D_IN;
  wire lastReadAddr_EN;

  // register lastWriteAddr
  reg [31 : 0] lastWriteAddr;
  wire [31 : 0] lastWriteAddr_D_IN;
  wire lastWriteAddr_EN;

  // register r0
  reg [31 : 0] r0;
  wire [31 : 0] r0_D_IN;
  wire r0_EN;

  // register r4
  reg [31 : 0] r4;
  wire [31 : 0] r4_D_IN;
  wire r4_EN;

  // register rV_0
  reg [31 : 0] rV_0;
  wire [31 : 0] rV_0_D_IN;
  wire rV_0_EN;

  // register rV_1
  reg [31 : 0] rV_1;
  wire [31 : 0] rV_1_D_IN;
  wire rV_1_EN;

  // register rV_10
  reg [31 : 0] rV_10;
  wire [31 : 0] rV_10_D_IN;
  wire rV_10_EN;

  // register rV_11
  reg [31 : 0] rV_11;
  wire [31 : 0] rV_11_D_IN;
  wire rV_11_EN;

  // register rV_12
  reg [31 : 0] rV_12;
  wire [31 : 0] rV_12_D_IN;
  wire rV_12_EN;

  // register rV_13
  reg [31 : 0] rV_13;
  wire [31 : 0] rV_13_D_IN;
  wire rV_13_EN;

  // register rV_14
  reg [31 : 0] rV_14;
  wire [31 : 0] rV_14_D_IN;
  wire rV_14_EN;

  // register rV_15
  reg [31 : 0] rV_15;
  wire [31 : 0] rV_15_D_IN;
  wire rV_15_EN;

  // register rV_16
  reg [31 : 0] rV_16;
  wire [31 : 0] rV_16_D_IN;
  wire rV_16_EN;

  // register rV_17
  reg [31 : 0] rV_17;
  wire [31 : 0] rV_17_D_IN;
  wire rV_17_EN;

  // register rV_18
  reg [31 : 0] rV_18;
  wire [31 : 0] rV_18_D_IN;
  wire rV_18_EN;

  // register rV_19
  reg [31 : 0] rV_19;
  wire [31 : 0] rV_19_D_IN;
  wire rV_19_EN;

  // register rV_2
  reg [31 : 0] rV_2;
  wire [31 : 0] rV_2_D_IN;
  wire rV_2_EN;

  // register rV_20
  reg [31 : 0] rV_20;
  wire [31 : 0] rV_20_D_IN;
  wire rV_20_EN;

  // register rV_21
  reg [31 : 0] rV_21;
  wire [31 : 0] rV_21_D_IN;
  wire rV_21_EN;

  // register rV_22
  reg [31 : 0] rV_22;
  wire [31 : 0] rV_22_D_IN;
  wire rV_22_EN;

  // register rV_23
  reg [31 : 0] rV_23;
  wire [31 : 0] rV_23_D_IN;
  wire rV_23_EN;

  // register rV_24
  reg [31 : 0] rV_24;
  wire [31 : 0] rV_24_D_IN;
  wire rV_24_EN;

  // register rV_25
  reg [31 : 0] rV_25;
  wire [31 : 0] rV_25_D_IN;
  wire rV_25_EN;

  // register rV_26
  reg [31 : 0] rV_26;
  wire [31 : 0] rV_26_D_IN;
  wire rV_26_EN;

  // register rV_27
  reg [31 : 0] rV_27;
  wire [31 : 0] rV_27_D_IN;
  wire rV_27_EN;

  // register rV_28
  reg [31 : 0] rV_28;
  wire [31 : 0] rV_28_D_IN;
  wire rV_28_EN;

  // register rV_29
  reg [31 : 0] rV_29;
  wire [31 : 0] rV_29_D_IN;
  wire rV_29_EN;

  // register rV_3
  reg [31 : 0] rV_3;
  wire [31 : 0] rV_3_D_IN;
  wire rV_3_EN;

  // register rV_30
  reg [31 : 0] rV_30;
  wire [31 : 0] rV_30_D_IN;
  wire rV_30_EN;

  // register rV_31
  reg [31 : 0] rV_31;
  wire [31 : 0] rV_31_D_IN;
  wire rV_31_EN;

  // register rV_32
  reg [31 : 0] rV_32;
  wire [31 : 0] rV_32_D_IN;
  wire rV_32_EN;

  // register rV_33
  reg [31 : 0] rV_33;
  wire [31 : 0] rV_33_D_IN;
  wire rV_33_EN;

  // register rV_34
  reg [31 : 0] rV_34;
  wire [31 : 0] rV_34_D_IN;
  wire rV_34_EN;

  // register rV_35
  reg [31 : 0] rV_35;
  wire [31 : 0] rV_35_D_IN;
  wire rV_35_EN;

  // register rV_36
  reg [31 : 0] rV_36;
  wire [31 : 0] rV_36_D_IN;
  wire rV_36_EN;

  // register rV_37
  reg [31 : 0] rV_37;
  wire [31 : 0] rV_37_D_IN;
  wire rV_37_EN;

  // register rV_38
  reg [31 : 0] rV_38;
  wire [31 : 0] rV_38_D_IN;
  wire rV_38_EN;

  // register rV_39
  reg [31 : 0] rV_39;
  wire [31 : 0] rV_39_D_IN;
  wire rV_39_EN;

  // register rV_4
  reg [31 : 0] rV_4;
  wire [31 : 0] rV_4_D_IN;
  wire rV_4_EN;

  // register rV_40
  reg [31 : 0] rV_40;
  wire [31 : 0] rV_40_D_IN;
  wire rV_40_EN;

  // register rV_41
  reg [31 : 0] rV_41;
  wire [31 : 0] rV_41_D_IN;
  wire rV_41_EN;

  // register rV_42
  reg [31 : 0] rV_42;
  wire [31 : 0] rV_42_D_IN;
  wire rV_42_EN;

  // register rV_43
  reg [31 : 0] rV_43;
  wire [31 : 0] rV_43_D_IN;
  wire rV_43_EN;

  // register rV_44
  reg [31 : 0] rV_44;
  wire [31 : 0] rV_44_D_IN;
  wire rV_44_EN;

  // register rV_45
  reg [31 : 0] rV_45;
  wire [31 : 0] rV_45_D_IN;
  wire rV_45_EN;

  // register rV_46
  reg [31 : 0] rV_46;
  wire [31 : 0] rV_46_D_IN;
  wire rV_46_EN;

  // register rV_47
  reg [31 : 0] rV_47;
  wire [31 : 0] rV_47_D_IN;
  wire rV_47_EN;

  // register rV_48
  reg [31 : 0] rV_48;
  wire [31 : 0] rV_48_D_IN;
  wire rV_48_EN;

  // register rV_49
  reg [31 : 0] rV_49;
  wire [31 : 0] rV_49_D_IN;
  wire rV_49_EN;

  // register rV_5
  reg [31 : 0] rV_5;
  wire [31 : 0] rV_5_D_IN;
  wire rV_5_EN;

  // register rV_50
  reg [31 : 0] rV_50;
  wire [31 : 0] rV_50_D_IN;
  wire rV_50_EN;

  // register rV_51
  reg [31 : 0] rV_51;
  wire [31 : 0] rV_51_D_IN;
  wire rV_51_EN;

  // register rV_52
  reg [31 : 0] rV_52;
  wire [31 : 0] rV_52_D_IN;
  wire rV_52_EN;

  // register rV_53
  reg [31 : 0] rV_53;
  wire [31 : 0] rV_53_D_IN;
  wire rV_53_EN;

  // register rV_54
  reg [31 : 0] rV_54;
  wire [31 : 0] rV_54_D_IN;
  wire rV_54_EN;

  // register rV_55
  reg [31 : 0] rV_55;
  wire [31 : 0] rV_55_D_IN;
  wire rV_55_EN;

  // register rV_56
  reg [31 : 0] rV_56;
  wire [31 : 0] rV_56_D_IN;
  wire rV_56_EN;

  // register rV_57
  reg [31 : 0] rV_57;
  wire [31 : 0] rV_57_D_IN;
  wire rV_57_EN;

  // register rV_58
  reg [31 : 0] rV_58;
  wire [31 : 0] rV_58_D_IN;
  wire rV_58_EN;

  // register rV_59
  reg [31 : 0] rV_59;
  wire [31 : 0] rV_59_D_IN;
  wire rV_59_EN;

  // register rV_6
  reg [31 : 0] rV_6;
  wire [31 : 0] rV_6_D_IN;
  wire rV_6_EN;

  // register rV_60
  reg [31 : 0] rV_60;
  wire [31 : 0] rV_60_D_IN;
  wire rV_60_EN;

  // register rV_61
  reg [31 : 0] rV_61;
  wire [31 : 0] rV_61_D_IN;
  wire rV_61_EN;

  // register rV_62
  reg [31 : 0] rV_62;
  wire [31 : 0] rV_62_D_IN;
  wire rV_62_EN;

  // register rV_63
  reg [31 : 0] rV_63;
  wire [31 : 0] rV_63_D_IN;
  wire rV_63_EN;

  // register rV_7
  reg [31 : 0] rV_7;
  wire [31 : 0] rV_7_D_IN;
  wire rV_7_EN;

  // register rV_8
  reg [31 : 0] rV_8;
  wire [31 : 0] rV_8_D_IN;
  wire rV_8_EN;

  // register rV_9
  reg [31 : 0] rV_9;
  wire [31 : 0] rV_9_D_IN;
  wire rV_9_EN;

  // ports of submodule a4l_a4rdAddr_fifof
  wire [34 : 0] a4l_a4rdAddr_fifof_D_IN, a4l_a4rdAddr_fifof_D_OUT;
  wire a4l_a4rdAddr_fifof_CLR,
       a4l_a4rdAddr_fifof_DEQ,
       a4l_a4rdAddr_fifof_EMPTY_N,
       a4l_a4rdAddr_fifof_ENQ,
       a4l_a4rdAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrAddr_fifof
  wire [34 : 0] a4l_a4wrAddr_fifof_D_IN, a4l_a4wrAddr_fifof_D_OUT;
  wire a4l_a4wrAddr_fifof_CLR,
       a4l_a4wrAddr_fifof_DEQ,
       a4l_a4wrAddr_fifof_EMPTY_N,
       a4l_a4wrAddr_fifof_ENQ,
       a4l_a4wrAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrData_fifof
  wire [35 : 0] a4l_a4wrData_fifof_D_IN, a4l_a4wrData_fifof_D_OUT;
  wire a4l_a4wrData_fifof_CLR,
       a4l_a4wrData_fifof_DEQ,
       a4l_a4wrData_fifof_EMPTY_N,
       a4l_a4wrData_fifof_ENQ,
       a4l_a4wrData_fifof_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_enq,
       CAN_FIRE_RL_a4l_a4rdResp_do_deq,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_both,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_do_enq,
       CAN_FIRE_RL_a4l_a4wrData_do_enq,
       CAN_FIRE_RL_a4l_a4wrResp_do_deq,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_both,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_cfrd,
       CAN_FIRE_RL_a4l_cfwr,
       CAN_FIRE_RL_a4ls_doAlways,
       CAN_FIRE_s_mARADDR,
       CAN_FIRE_s_mARPROT,
       CAN_FIRE_s_mARVALID,
       CAN_FIRE_s_mAWADDR,
       CAN_FIRE_s_mAWPROT,
       CAN_FIRE_s_mAWVALID,
       CAN_FIRE_s_mBREADY,
       CAN_FIRE_s_mRREADY,
       CAN_FIRE_s_mWDATA,
       CAN_FIRE_s_mWSTRB,
       CAN_FIRE_s_mWVALID,
       WILL_FIRE_RL_a4l_a4rdAddr_do_enq,
       WILL_FIRE_RL_a4l_a4rdResp_do_deq,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_both,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_do_enq,
       WILL_FIRE_RL_a4l_a4wrData_do_enq,
       WILL_FIRE_RL_a4l_a4wrResp_do_deq,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_both,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_cfrd,
       WILL_FIRE_RL_a4l_cfwr,
       WILL_FIRE_RL_a4ls_doAlways,
       WILL_FIRE_s_mARADDR,
       WILL_FIRE_s_mARPROT,
       WILL_FIRE_s_mARVALID,
       WILL_FIRE_s_mAWADDR,
       WILL_FIRE_s_mAWPROT,
       WILL_FIRE_s_mAWVALID,
       WILL_FIRE_s_mBREADY,
       WILL_FIRE_s_mRREADY,
       WILL_FIRE_s_mWDATA,
       WILL_FIRE_s_mWSTRB,
       WILL_FIRE_s_mWVALID;

  // inputs to muxes for submodule ports
  wire [33 : 0] MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
  wire MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h11624, v__h12112, v__h12144;
  reg [31 : 0] IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267,
	       rdat__h11899;
  wire [31 : 0] _theResult____h11720, rdat__h11868;
  wire [5 : 0] idx__h11898, idx__h8796;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60,
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27;
  wire _dfoo1, _dfoo3, _dfoo5, _dfoo7;

  // action method s_mAWVALID
  assign CAN_FIRE_s_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_mAWVALID = s_awvalid ;

  // value method s_sAWREADY
  assign s_awready = a4l_a4wrAddr_fifof_FULL_N ;

  // action method s_mAWADDR
  assign CAN_FIRE_s_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_mAWADDR = 1'd1 ;

  // action method s_mAWPROT
  assign CAN_FIRE_s_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_mAWPROT = 1'd1 ;

  // action method s_mWVALID
  assign CAN_FIRE_s_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_mWVALID = s_wvalid ;

  // value method s_sWREADY
  assign s_wready = a4l_a4wrData_fifof_FULL_N ;

  // action method s_mWDATA
  assign CAN_FIRE_s_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_mWDATA = 1'd1 ;

  // action method s_mWSTRB
  assign CAN_FIRE_s_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_mWSTRB = 1'd1 ;

  // value method s_sBVALID
  assign s_bvalid = a4l_a4wrResp_fifof_cntr_r != 2'd0 ;

  // action method s_mBREADY
  assign CAN_FIRE_s_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_mBREADY = s_bready ;

  // value method s_sBRESP
  assign s_bresp = a4l_a4wrResp_fifof_q_0 ;

  // action method s_mARVALID
  assign CAN_FIRE_s_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_mARVALID = s_arvalid ;

  // value method s_sARREADY
  assign s_arready = a4l_a4rdAddr_fifof_FULL_N ;

  // action method s_mARADDR
  assign CAN_FIRE_s_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_mARADDR = 1'd1 ;

  // action method s_mARPROT
  assign CAN_FIRE_s_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_mARPROT = 1'd1 ;

  // value method s_sRVALID
  assign s_rvalid = a4l_a4rdResp_fifof_cntr_r != 2'd0 ;

  // action method s_mRREADY
  assign CAN_FIRE_s_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_mRREADY = s_rready ;

  // value method s_sRDATA
  assign s_rdata = a4l_a4rdResp_fifof_q_0[31:0] ;

  // value method s_sRRESP
  assign s_rresp = a4l_a4rdResp_fifof_q_0[33:32] ;

  // value method r
  assign r = { rV_63,
	       rV_62,
	       rV_61,
	       rV_60,
	       rV_59,
	       rV_58,
	       rV_57,
	       rV_56,
	       rV_55,
	       rV_54,
	       rV_53,
	       rV_52,
	       rV_51,
	       rV_50,
	       rV_49,
	       rV_48,
	       rV_47,
	       rV_46,
	       rV_45,
	       rV_44,
	       rV_43,
	       rV_42,
	       rV_41,
	       rV_40,
	       rV_39,
	       rV_38,
	       rV_37,
	       rV_36,
	       rV_35,
	       rV_34,
	       rV_33,
	       rV_32,
	       rV_31,
	       rV_30,
	       rV_29,
	       rV_28,
	       rV_27,
	       rV_26,
	       rV_25,
	       rV_24,
	       rV_23,
	       rV_22,
	       rV_21,
	       rV_20,
	       rV_19,
	       rV_18,
	       rV_17,
	       rV_16,
	       rV_15,
	       rV_14,
	       rV_13,
	       rV_12,
	       rV_11,
	       rV_10,
	       rV_9,
	       rV_8,
	       rV_7,
	       rV_6,
	       rV_5,
	       rV_4,
	       rV_3,
	       rV_2,
	       rV_1,
	       rV_0 } ;
  assign RDY_r = 1'd1 ;

  // submodule a4l_a4rdAddr_fifof
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) a4l_a4rdAddr_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4rdAddr_fifof_D_IN),
					      .ENQ(a4l_a4rdAddr_fifof_ENQ),
					      .DEQ(a4l_a4rdAddr_fifof_DEQ),
					      .CLR(a4l_a4rdAddr_fifof_CLR),
					      .D_OUT(a4l_a4rdAddr_fifof_D_OUT),
					      .FULL_N(a4l_a4rdAddr_fifof_FULL_N),
					      .EMPTY_N(a4l_a4rdAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrAddr_fifof
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) a4l_a4wrAddr_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4wrAddr_fifof_D_IN),
					      .ENQ(a4l_a4wrAddr_fifof_ENQ),
					      .DEQ(a4l_a4wrAddr_fifof_DEQ),
					      .CLR(a4l_a4wrAddr_fifof_CLR),
					      .D_OUT(a4l_a4wrAddr_fifof_D_OUT),
					      .FULL_N(a4l_a4wrAddr_fifof_FULL_N),
					      .EMPTY_N(a4l_a4wrAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrData_fifof
  FIFO2 #(.width(32'd36),
	  .guarded(32'd1)) a4l_a4wrData_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4wrData_fifof_D_IN),
					      .ENQ(a4l_a4wrData_fifof_ENQ),
					      .DEQ(a4l_a4wrData_fifof_DEQ),
					      .CLR(a4l_a4wrData_fifof_CLR),
					      .D_OUT(a4l_a4wrData_fifof_D_OUT),
					      .FULL_N(a4l_a4wrData_fifof_FULL_N),
					      .EMPTY_N(a4l_a4wrData_fifof_EMPTY_N));

  // rule RL_a4l_cfrd
  assign CAN_FIRE_RL_a4l_cfrd =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 && a4l_a4rdAddr_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfrd = CAN_FIRE_RL_a4l_cfrd ;

  // rule RL_a4l_cfwr
  assign CAN_FIRE_RL_a4l_cfwr =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 &&
	     a4l_a4wrAddr_fifof_EMPTY_N &&
	     a4l_a4wrData_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfwr = CAN_FIRE_RL_a4l_cfwr ;

  // rule RL_a4ls_doAlways
  assign CAN_FIRE_RL_a4ls_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_a4ls_doAlways = 1'd1 ;

  // rule RL_a4l_a4wrAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_enq =
	     a4l_a4wrAddr_fifof_FULL_N && s_awvalid ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_enq = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;

  // rule RL_a4l_a4wrData_do_enq
  assign CAN_FIRE_RL_a4l_a4wrData_do_enq =
	     a4l_a4wrData_fifof_FULL_N && s_wvalid ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_enq = CAN_FIRE_RL_a4l_a4wrData_do_enq ;

  // rule RL_a4l_a4wrResp_do_deq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_deq =
	     a4l_a4wrResp_fifof_cntr_r != 2'd0 && s_bready ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_deq = CAN_FIRE_RL_a4l_a4wrResp_do_deq ;

  // rule RL_a4l_a4wrResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_cfwr &&
	     !CAN_FIRE_RL_a4l_a4wrResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // rule RL_a4l_a4wrResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_do_deq && !CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // rule RL_a4l_a4wrResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_a4wrResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_both ;

  // rule RL_a4l_a4rdAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_enq =
	     a4l_a4rdAddr_fifof_FULL_N && s_arvalid ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_enq = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;

  // rule RL_a4l_a4rdResp_do_deq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_deq =
	     a4l_a4rdResp_fifof_cntr_r != 2'd0 && s_rready ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_deq = CAN_FIRE_RL_a4l_a4rdResp_do_deq ;

  // rule RL_a4l_a4rdResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_cfrd &&
	     !CAN_FIRE_RL_a4l_a4rdResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // rule RL_a4l_a4rdResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_do_deq && !CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // rule RL_a4l_a4rdResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_a4rdResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ;
  assign MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4rdResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 =
	     { 2'd0, _theResult____h11720 } ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       a4l_a4rdResp_fifof_q_1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4wrResp_fifof_cntr_r == 2'd1) ?
	       2'd0 :
	       a4l_a4wrResp_fifof_q_1 ;

  // inlined wires
  assign a4l_a4wrAddr_data_wire_wget = { s_awprot, s_awaddr } ;
  assign a4l_a4wrData_data_wire_wget = { s_wstrb, s_wdata } ;
  assign a4l_a4rdAddr_data_wire_wget = { s_arprot, s_araddr } ;

  // register a4l_a4rdResp_fifof_cntr_r
  assign a4l_a4rdResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ?
	       a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 :
	       MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4rdResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // register a4l_a4rdResp_fifof_q_0
  always@(MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr or a4l_a4rdResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_0_D_IN = a4l_a4rdResp_fifof_q_1;
      default: a4l_a4rdResp_fifof_q_0_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4rdResp_fifof_q_1
  always@(MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_1_D_IN = 34'd0;
      default: a4l_a4rdResp_fifof_q_1_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_cntr_r
  assign a4l_a4wrResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ?
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 :
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // register a4l_a4wrResp_fifof_q_0
  always@(MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr or a4l_a4wrResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrResp_fifof_q_0_D_IN = 2'd0;
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrResp_fifof_q_0_D_IN =
	      MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr:
	  a4l_a4wrResp_fifof_q_0_D_IN = a4l_a4wrResp_fifof_q_1;
      default: a4l_a4wrResp_fifof_q_0_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_q_1
  assign a4l_a4wrResp_fifof_q_1_D_IN = 2'd0 ;
  assign a4l_a4wrResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register b18
  assign b18_D_IN = a4l_a4wrData_fifof_D_OUT[7:0] ;
  assign b18_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[32] ;

  // register b19
  assign b19_D_IN = a4l_a4wrData_fifof_D_OUT[15:8] ;
  assign b19_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[33] ;

  // register b1A
  assign b1A_D_IN = a4l_a4wrData_fifof_D_OUT[23:16] ;
  assign b1A_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[34] ;

  // register b1B
  assign b1B_D_IN = a4l_a4wrData_fifof_D_OUT[31:24] ;
  assign b1B_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[35] ;

  // register lastReadAddr
  assign lastReadAddr_D_IN = a4l_a4rdAddr_fifof_D_OUT[31:0] ;
  assign lastReadAddr_EN = CAN_FIRE_RL_a4l_cfrd ;

  // register lastWriteAddr
  assign lastWriteAddr_D_IN = a4l_a4wrAddr_fifof_D_OUT[31:0] ;
  assign lastWriteAddr_EN = CAN_FIRE_RL_a4l_cfwr ;

  // register r0
  assign r0_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r0_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h0 ;

  // register r4
  assign r4_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r4_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] == 4'h0 &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h04 ;

  // register rV_0
  assign rV_0_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_0_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd0 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_1
  assign rV_1_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_1_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd1 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_10
  assign rV_10_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_10_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd10 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_11
  assign rV_11_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_11_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd11 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_12
  assign rV_12_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_12_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd12 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_13
  assign rV_13_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_13_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd13 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_14
  assign rV_14_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_14_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd14 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_15
  assign rV_15_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_15_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd15 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_16
  assign rV_16_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_16_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd16 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_17
  assign rV_17_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_17_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd17 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_18
  assign rV_18_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_18_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd18 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_19
  assign rV_19_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_19_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd19 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_2
  assign rV_2_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_2_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd2 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_20
  assign rV_20_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_20_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd20 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_21
  assign rV_21_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_21_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd21 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_22
  assign rV_22_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_22_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd22 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_23
  assign rV_23_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_23_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd23 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_24
  assign rV_24_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_24_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd24 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_25
  assign rV_25_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_25_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd25 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_26
  assign rV_26_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_26_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd26 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_27
  assign rV_27_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_27_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd27 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_28
  assign rV_28_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_28_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd28 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_29
  assign rV_29_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_29_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd29 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_3
  assign rV_3_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_3_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd3 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_30
  assign rV_30_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_30_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd30 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_31
  assign rV_31_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_31_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd31 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_32
  assign rV_32_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_32_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd32 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_33
  assign rV_33_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_33_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd33 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_34
  assign rV_34_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_34_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd34 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_35
  assign rV_35_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_35_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd35 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_36
  assign rV_36_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_36_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd36 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_37
  assign rV_37_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_37_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd37 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_38
  assign rV_38_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_38_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd38 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_39
  assign rV_39_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_39_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd39 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_4
  assign rV_4_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_4_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd4 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_40
  assign rV_40_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_40_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd40 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_41
  assign rV_41_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_41_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd41 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_42
  assign rV_42_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_42_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd42 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_43
  assign rV_43_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_43_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd43 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_44
  assign rV_44_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_44_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd44 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_45
  assign rV_45_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_45_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd45 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_46
  assign rV_46_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_46_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd46 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_47
  assign rV_47_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_47_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd47 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_48
  assign rV_48_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_48_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd48 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_49
  assign rV_49_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_49_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd49 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_5
  assign rV_5_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_5_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd5 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_50
  assign rV_50_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_50_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd50 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_51
  assign rV_51_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_51_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd51 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_52
  assign rV_52_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_52_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd52 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_53
  assign rV_53_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_53_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd53 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_54
  assign rV_54_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_54_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd54 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_55
  assign rV_55_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_55_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd55 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_56
  assign rV_56_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_56_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd56 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_57
  assign rV_57_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_57_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd57 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_58
  assign rV_58_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_58_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd58 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_59
  assign rV_59_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_59_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd59 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_6
  assign rV_6_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_6_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd6 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_60
  assign rV_60_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_60_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd60 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_61
  assign rV_61_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_61_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd61 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_62
  assign rV_62_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_62_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd62 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_63
  assign rV_63_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_63_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd63 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_7
  assign rV_7_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_7_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd7 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_8
  assign rV_8_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_8_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd8 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // register rV_9
  assign rV_9_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign rV_9_EN =
	     WILL_FIRE_RL_a4l_cfwr && idx__h8796 == 6'd9 &&
	     a4l_a4wrAddr_fifof_D_OUT[15:12] != 4'h0 ;

  // submodule a4l_a4rdAddr_fifof
  assign a4l_a4rdAddr_fifof_D_IN = a4l_a4rdAddr_data_wire_wget ;
  assign a4l_a4rdAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;
  assign a4l_a4rdAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfrd ;
  assign a4l_a4rdAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrAddr_fifof
  assign a4l_a4wrAddr_fifof_D_IN = a4l_a4wrAddr_data_wire_wget ;
  assign a4l_a4wrAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;
  assign a4l_a4wrAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrData_fifof
  assign a4l_a4wrData_fifof_D_IN = a4l_a4wrData_data_wire_wget ;
  assign a4l_a4wrData_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrData_do_enq ;
  assign a4l_a4wrData_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrData_fifof_CLR = 1'b0 ;

  // remaining internal signals
  assign _dfoo1 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd1 ;
  assign _dfoo3 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd0 ;
  assign _dfoo5 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd1 ;
  assign _dfoo7 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd0 ;
  assign _theResult____h11720 =
	     (a4l_a4rdAddr_fifof_D_OUT[15:12] == 4'h0) ?
	       IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 :
	       rdat__h11899 ;
  assign a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 =
	     a4l_a4rdResp_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 =
	     a4l_a4wrResp_fifof_cntr_r - 2'd1 ;
  assign idx__h11898 =
	     { a4l_a4rdAddr_fifof_D_OUT[11:8],
	       a4l_a4rdAddr_fifof_D_OUT[3:2] } ;
  assign idx__h8796 =
	     { a4l_a4wrAddr_fifof_D_OUT[11:8],
	       a4l_a4wrAddr_fifof_D_OUT[3:2] } ;
  assign rdat__h11868 = { b1B, b1A, b19, b18 } ;
  always@(idx__h11898 or
	  rV_0 or
	  rV_1 or
	  rV_2 or
	  rV_3 or
	  rV_4 or
	  rV_5 or
	  rV_6 or
	  rV_7 or
	  rV_8 or
	  rV_9 or
	  rV_10 or
	  rV_11 or
	  rV_12 or
	  rV_13 or
	  rV_14 or
	  rV_15 or
	  rV_16 or
	  rV_17 or
	  rV_18 or
	  rV_19 or
	  rV_20 or
	  rV_21 or
	  rV_22 or
	  rV_23 or
	  rV_24 or
	  rV_25 or
	  rV_26 or
	  rV_27 or
	  rV_28 or
	  rV_29 or
	  rV_30 or
	  rV_31 or
	  rV_32 or
	  rV_33 or
	  rV_34 or
	  rV_35 or
	  rV_36 or
	  rV_37 or
	  rV_38 or
	  rV_39 or
	  rV_40 or
	  rV_41 or
	  rV_42 or
	  rV_43 or
	  rV_44 or
	  rV_45 or
	  rV_46 or
	  rV_47 or
	  rV_48 or
	  rV_49 or
	  rV_50 or
	  rV_51 or
	  rV_52 or
	  rV_53 or
	  rV_54 or
	  rV_55 or
	  rV_56 or
	  rV_57 or rV_58 or rV_59 or rV_60 or rV_61 or rV_62 or rV_63)
  begin
    case (idx__h11898)
      6'd0: rdat__h11899 = rV_0;
      6'd1: rdat__h11899 = rV_1;
      6'd2: rdat__h11899 = rV_2;
      6'd3: rdat__h11899 = rV_3;
      6'd4: rdat__h11899 = rV_4;
      6'd5: rdat__h11899 = rV_5;
      6'd6: rdat__h11899 = rV_6;
      6'd7: rdat__h11899 = rV_7;
      6'd8: rdat__h11899 = rV_8;
      6'd9: rdat__h11899 = rV_9;
      6'd10: rdat__h11899 = rV_10;
      6'd11: rdat__h11899 = rV_11;
      6'd12: rdat__h11899 = rV_12;
      6'd13: rdat__h11899 = rV_13;
      6'd14: rdat__h11899 = rV_14;
      6'd15: rdat__h11899 = rV_15;
      6'd16: rdat__h11899 = rV_16;
      6'd17: rdat__h11899 = rV_17;
      6'd18: rdat__h11899 = rV_18;
      6'd19: rdat__h11899 = rV_19;
      6'd20: rdat__h11899 = rV_20;
      6'd21: rdat__h11899 = rV_21;
      6'd22: rdat__h11899 = rV_22;
      6'd23: rdat__h11899 = rV_23;
      6'd24: rdat__h11899 = rV_24;
      6'd25: rdat__h11899 = rV_25;
      6'd26: rdat__h11899 = rV_26;
      6'd27: rdat__h11899 = rV_27;
      6'd28: rdat__h11899 = rV_28;
      6'd29: rdat__h11899 = rV_29;
      6'd30: rdat__h11899 = rV_30;
      6'd31: rdat__h11899 = rV_31;
      6'd32: rdat__h11899 = rV_32;
      6'd33: rdat__h11899 = rV_33;
      6'd34: rdat__h11899 = rV_34;
      6'd35: rdat__h11899 = rV_35;
      6'd36: rdat__h11899 = rV_36;
      6'd37: rdat__h11899 = rV_37;
      6'd38: rdat__h11899 = rV_38;
      6'd39: rdat__h11899 = rV_39;
      6'd40: rdat__h11899 = rV_40;
      6'd41: rdat__h11899 = rV_41;
      6'd42: rdat__h11899 = rV_42;
      6'd43: rdat__h11899 = rV_43;
      6'd44: rdat__h11899 = rV_44;
      6'd45: rdat__h11899 = rV_45;
      6'd46: rdat__h11899 = rV_46;
      6'd47: rdat__h11899 = rV_47;
      6'd48: rdat__h11899 = rV_48;
      6'd49: rdat__h11899 = rV_49;
      6'd50: rdat__h11899 = rV_50;
      6'd51: rdat__h11899 = rV_51;
      6'd52: rdat__h11899 = rV_52;
      6'd53: rdat__h11899 = rV_53;
      6'd54: rdat__h11899 = rV_54;
      6'd55: rdat__h11899 = rV_55;
      6'd56: rdat__h11899 = rV_56;
      6'd57: rdat__h11899 = rV_57;
      6'd58: rdat__h11899 = rV_58;
      6'd59: rdat__h11899 = rV_59;
      6'd60: rdat__h11899 = rV_60;
      6'd61: rdat__h11899 = rV_61;
      6'd62: rdat__h11899 = rV_62;
      6'd63: rdat__h11899 = rV_63;
    endcase
  end
  always@(a4l_a4rdAddr_fifof_D_OUT or
	  lastReadAddr or r0 or r4 or rdat__h11868 or lastWriteAddr)
  begin
    case (a4l_a4rdAddr_fifof_D_OUT[7:0])
      8'h0: IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 = r0;
      8'h04: IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 = r4;
      8'h10:
	  IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 =
	      32'hF00DFACE;
      8'h18:
	  IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 =
	      rdat__h11868;
      8'h20:
	  IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 =
	      lastWriteAddr;
      default: IF_a4l_a4rdAddr_fifof_first__41_BITS_7_TO_0_45_ETC___d267 =
		   lastReadAddr;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn == `BSV_RESET_VALUE)
      begin
        a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	b18 <= `BSV_ASSIGNMENT_DELAY 8'h18;
	b19 <= `BSV_ASSIGNMENT_DELAY 8'h19;
	b1A <= `BSV_ASSIGNMENT_DELAY 8'h1A;
	b1B <= `BSV_ASSIGNMENT_DELAY 8'h1B;
	lastReadAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lastWriteAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_32 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_33 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_34 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_35 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_36 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_37 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_38 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_39 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_40 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_41 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_42 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_43 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_44 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_45 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_46 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_47 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_48 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_49 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_50 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_51 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_52 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_53 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_54 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_55 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_56 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_57 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_58 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_59 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_60 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_61 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_62 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_63 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rV_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a4l_a4rdResp_fifof_cntr_r_EN)
	  a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_cntr_r_D_IN;
	if (a4l_a4rdResp_fifof_q_0_EN)
	  a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_0_D_IN;
	if (a4l_a4rdResp_fifof_q_1_EN)
	  a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_1_D_IN;
	if (a4l_a4wrResp_fifof_cntr_r_EN)
	  a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_cntr_r_D_IN;
	if (a4l_a4wrResp_fifof_q_0_EN)
	  a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_0_D_IN;
	if (a4l_a4wrResp_fifof_q_1_EN)
	  a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_1_D_IN;
	if (b18_EN) b18 <= `BSV_ASSIGNMENT_DELAY b18_D_IN;
	if (b19_EN) b19 <= `BSV_ASSIGNMENT_DELAY b19_D_IN;
	if (b1A_EN) b1A <= `BSV_ASSIGNMENT_DELAY b1A_D_IN;
	if (b1B_EN) b1B <= `BSV_ASSIGNMENT_DELAY b1B_D_IN;
	if (lastReadAddr_EN)
	  lastReadAddr <= `BSV_ASSIGNMENT_DELAY lastReadAddr_D_IN;
	if (lastWriteAddr_EN)
	  lastWriteAddr <= `BSV_ASSIGNMENT_DELAY lastWriteAddr_D_IN;
	if (r0_EN) r0 <= `BSV_ASSIGNMENT_DELAY r0_D_IN;
	if (r4_EN) r4 <= `BSV_ASSIGNMENT_DELAY r4_D_IN;
	if (rV_0_EN) rV_0 <= `BSV_ASSIGNMENT_DELAY rV_0_D_IN;
	if (rV_1_EN) rV_1 <= `BSV_ASSIGNMENT_DELAY rV_1_D_IN;
	if (rV_10_EN) rV_10 <= `BSV_ASSIGNMENT_DELAY rV_10_D_IN;
	if (rV_11_EN) rV_11 <= `BSV_ASSIGNMENT_DELAY rV_11_D_IN;
	if (rV_12_EN) rV_12 <= `BSV_ASSIGNMENT_DELAY rV_12_D_IN;
	if (rV_13_EN) rV_13 <= `BSV_ASSIGNMENT_DELAY rV_13_D_IN;
	if (rV_14_EN) rV_14 <= `BSV_ASSIGNMENT_DELAY rV_14_D_IN;
	if (rV_15_EN) rV_15 <= `BSV_ASSIGNMENT_DELAY rV_15_D_IN;
	if (rV_16_EN) rV_16 <= `BSV_ASSIGNMENT_DELAY rV_16_D_IN;
	if (rV_17_EN) rV_17 <= `BSV_ASSIGNMENT_DELAY rV_17_D_IN;
	if (rV_18_EN) rV_18 <= `BSV_ASSIGNMENT_DELAY rV_18_D_IN;
	if (rV_19_EN) rV_19 <= `BSV_ASSIGNMENT_DELAY rV_19_D_IN;
	if (rV_2_EN) rV_2 <= `BSV_ASSIGNMENT_DELAY rV_2_D_IN;
	if (rV_20_EN) rV_20 <= `BSV_ASSIGNMENT_DELAY rV_20_D_IN;
	if (rV_21_EN) rV_21 <= `BSV_ASSIGNMENT_DELAY rV_21_D_IN;
	if (rV_22_EN) rV_22 <= `BSV_ASSIGNMENT_DELAY rV_22_D_IN;
	if (rV_23_EN) rV_23 <= `BSV_ASSIGNMENT_DELAY rV_23_D_IN;
	if (rV_24_EN) rV_24 <= `BSV_ASSIGNMENT_DELAY rV_24_D_IN;
	if (rV_25_EN) rV_25 <= `BSV_ASSIGNMENT_DELAY rV_25_D_IN;
	if (rV_26_EN) rV_26 <= `BSV_ASSIGNMENT_DELAY rV_26_D_IN;
	if (rV_27_EN) rV_27 <= `BSV_ASSIGNMENT_DELAY rV_27_D_IN;
	if (rV_28_EN) rV_28 <= `BSV_ASSIGNMENT_DELAY rV_28_D_IN;
	if (rV_29_EN) rV_29 <= `BSV_ASSIGNMENT_DELAY rV_29_D_IN;
	if (rV_3_EN) rV_3 <= `BSV_ASSIGNMENT_DELAY rV_3_D_IN;
	if (rV_30_EN) rV_30 <= `BSV_ASSIGNMENT_DELAY rV_30_D_IN;
	if (rV_31_EN) rV_31 <= `BSV_ASSIGNMENT_DELAY rV_31_D_IN;
	if (rV_32_EN) rV_32 <= `BSV_ASSIGNMENT_DELAY rV_32_D_IN;
	if (rV_33_EN) rV_33 <= `BSV_ASSIGNMENT_DELAY rV_33_D_IN;
	if (rV_34_EN) rV_34 <= `BSV_ASSIGNMENT_DELAY rV_34_D_IN;
	if (rV_35_EN) rV_35 <= `BSV_ASSIGNMENT_DELAY rV_35_D_IN;
	if (rV_36_EN) rV_36 <= `BSV_ASSIGNMENT_DELAY rV_36_D_IN;
	if (rV_37_EN) rV_37 <= `BSV_ASSIGNMENT_DELAY rV_37_D_IN;
	if (rV_38_EN) rV_38 <= `BSV_ASSIGNMENT_DELAY rV_38_D_IN;
	if (rV_39_EN) rV_39 <= `BSV_ASSIGNMENT_DELAY rV_39_D_IN;
	if (rV_4_EN) rV_4 <= `BSV_ASSIGNMENT_DELAY rV_4_D_IN;
	if (rV_40_EN) rV_40 <= `BSV_ASSIGNMENT_DELAY rV_40_D_IN;
	if (rV_41_EN) rV_41 <= `BSV_ASSIGNMENT_DELAY rV_41_D_IN;
	if (rV_42_EN) rV_42 <= `BSV_ASSIGNMENT_DELAY rV_42_D_IN;
	if (rV_43_EN) rV_43 <= `BSV_ASSIGNMENT_DELAY rV_43_D_IN;
	if (rV_44_EN) rV_44 <= `BSV_ASSIGNMENT_DELAY rV_44_D_IN;
	if (rV_45_EN) rV_45 <= `BSV_ASSIGNMENT_DELAY rV_45_D_IN;
	if (rV_46_EN) rV_46 <= `BSV_ASSIGNMENT_DELAY rV_46_D_IN;
	if (rV_47_EN) rV_47 <= `BSV_ASSIGNMENT_DELAY rV_47_D_IN;
	if (rV_48_EN) rV_48 <= `BSV_ASSIGNMENT_DELAY rV_48_D_IN;
	if (rV_49_EN) rV_49 <= `BSV_ASSIGNMENT_DELAY rV_49_D_IN;
	if (rV_5_EN) rV_5 <= `BSV_ASSIGNMENT_DELAY rV_5_D_IN;
	if (rV_50_EN) rV_50 <= `BSV_ASSIGNMENT_DELAY rV_50_D_IN;
	if (rV_51_EN) rV_51 <= `BSV_ASSIGNMENT_DELAY rV_51_D_IN;
	if (rV_52_EN) rV_52 <= `BSV_ASSIGNMENT_DELAY rV_52_D_IN;
	if (rV_53_EN) rV_53 <= `BSV_ASSIGNMENT_DELAY rV_53_D_IN;
	if (rV_54_EN) rV_54 <= `BSV_ASSIGNMENT_DELAY rV_54_D_IN;
	if (rV_55_EN) rV_55 <= `BSV_ASSIGNMENT_DELAY rV_55_D_IN;
	if (rV_56_EN) rV_56 <= `BSV_ASSIGNMENT_DELAY rV_56_D_IN;
	if (rV_57_EN) rV_57 <= `BSV_ASSIGNMENT_DELAY rV_57_D_IN;
	if (rV_58_EN) rV_58 <= `BSV_ASSIGNMENT_DELAY rV_58_D_IN;
	if (rV_59_EN) rV_59 <= `BSV_ASSIGNMENT_DELAY rV_59_D_IN;
	if (rV_6_EN) rV_6 <= `BSV_ASSIGNMENT_DELAY rV_6_D_IN;
	if (rV_60_EN) rV_60 <= `BSV_ASSIGNMENT_DELAY rV_60_D_IN;
	if (rV_61_EN) rV_61 <= `BSV_ASSIGNMENT_DELAY rV_61_D_IN;
	if (rV_62_EN) rV_62 <= `BSV_ASSIGNMENT_DELAY rV_62_D_IN;
	if (rV_63_EN) rV_63 <= `BSV_ASSIGNMENT_DELAY rV_63_D_IN;
	if (rV_7_EN) rV_7 <= `BSV_ASSIGNMENT_DELAY rV_7_D_IN;
	if (rV_8_EN) rV_8 <= `BSV_ASSIGNMENT_DELAY rV_8_D_IN;
	if (rV_9_EN) rV_9 <= `BSV_ASSIGNMENT_DELAY rV_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdResp_fifof_cntr_r = 2'h2;
    a4l_a4rdResp_fifof_q_0 = 34'h2AAAAAAAA;
    a4l_a4rdResp_fifof_q_1 = 34'h2AAAAAAAA;
    a4l_a4wrResp_fifof_cntr_r = 2'h2;
    a4l_a4wrResp_fifof_q_0 = 2'h2;
    a4l_a4wrResp_fifof_q_1 = 2'h2;
    b18 = 8'hAA;
    b19 = 8'hAA;
    b1A = 8'hAA;
    b1B = 8'hAA;
    lastReadAddr = 32'hAAAAAAAA;
    lastWriteAddr = 32'hAAAAAAAA;
    r0 = 32'hAAAAAAAA;
    r4 = 32'hAAAAAAAA;
    rV_0 = 32'hAAAAAAAA;
    rV_1 = 32'hAAAAAAAA;
    rV_10 = 32'hAAAAAAAA;
    rV_11 = 32'hAAAAAAAA;
    rV_12 = 32'hAAAAAAAA;
    rV_13 = 32'hAAAAAAAA;
    rV_14 = 32'hAAAAAAAA;
    rV_15 = 32'hAAAAAAAA;
    rV_16 = 32'hAAAAAAAA;
    rV_17 = 32'hAAAAAAAA;
    rV_18 = 32'hAAAAAAAA;
    rV_19 = 32'hAAAAAAAA;
    rV_2 = 32'hAAAAAAAA;
    rV_20 = 32'hAAAAAAAA;
    rV_21 = 32'hAAAAAAAA;
    rV_22 = 32'hAAAAAAAA;
    rV_23 = 32'hAAAAAAAA;
    rV_24 = 32'hAAAAAAAA;
    rV_25 = 32'hAAAAAAAA;
    rV_26 = 32'hAAAAAAAA;
    rV_27 = 32'hAAAAAAAA;
    rV_28 = 32'hAAAAAAAA;
    rV_29 = 32'hAAAAAAAA;
    rV_3 = 32'hAAAAAAAA;
    rV_30 = 32'hAAAAAAAA;
    rV_31 = 32'hAAAAAAAA;
    rV_32 = 32'hAAAAAAAA;
    rV_33 = 32'hAAAAAAAA;
    rV_34 = 32'hAAAAAAAA;
    rV_35 = 32'hAAAAAAAA;
    rV_36 = 32'hAAAAAAAA;
    rV_37 = 32'hAAAAAAAA;
    rV_38 = 32'hAAAAAAAA;
    rV_39 = 32'hAAAAAAAA;
    rV_4 = 32'hAAAAAAAA;
    rV_40 = 32'hAAAAAAAA;
    rV_41 = 32'hAAAAAAAA;
    rV_42 = 32'hAAAAAAAA;
    rV_43 = 32'hAAAAAAAA;
    rV_44 = 32'hAAAAAAAA;
    rV_45 = 32'hAAAAAAAA;
    rV_46 = 32'hAAAAAAAA;
    rV_47 = 32'hAAAAAAAA;
    rV_48 = 32'hAAAAAAAA;
    rV_49 = 32'hAAAAAAAA;
    rV_5 = 32'hAAAAAAAA;
    rV_50 = 32'hAAAAAAAA;
    rV_51 = 32'hAAAAAAAA;
    rV_52 = 32'hAAAAAAAA;
    rV_53 = 32'hAAAAAAAA;
    rV_54 = 32'hAAAAAAAA;
    rV_55 = 32'hAAAAAAAA;
    rV_56 = 32'hAAAAAAAA;
    rV_57 = 32'hAAAAAAAA;
    rV_58 = 32'hAAAAAAAA;
    rV_59 = 32'hAAAAAAAA;
    rV_6 = 32'hAAAAAAAA;
    rV_60 = 32'hAAAAAAAA;
    rV_61 = 32'hAAAAAAAA;
    rV_62 = 32'hAAAAAAAA;
    rV_63 = 32'hAAAAAAAA;
    rV_7 = 32'hAAAAAAAA;
    rV_8 = 32'hAAAAAAAA;
    rV_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h12112 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ Addr:%0x",
		 v__h12112,
		 a4l_a4rdAddr_fifof_D_OUT[31:0]);
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h12144 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ RESPOSNE Data:%0x",
		 v__h12144,
		 _theResult____h11720);
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	begin
	  v__h11624 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	$display("[%0d]: %m: AXI4-LITE CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h11624,
		 a4l_a4wrAddr_fifof_D_OUT[31:0],
		 a4l_a4wrData_fifof_D_OUT[35:32],
		 a4l_a4wrData_fifof_D_OUT[31:0]);
  end
  // synopsys translate_on
endmodule  // mkA4LSA

