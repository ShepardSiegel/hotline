//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Feb 17 14:27:24 EST 2013
//
// Method conflict info:
// Method: mAWVALID
// Conflict-free: sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mAWVALID
//
// Method: sAWREADY
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mAWADDR
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mAWADDR
//
// Method: mAWPROT
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mAWPROT
//
// Method: mWVALID
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mWVALID
//
// Method: sWREADY
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mWDATA
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mWDATA
//
// Method: mWSTRB
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mWSTRB
//
// Method: sBVALID
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mBREADY
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mBREADY
//
// Method: sBRESP
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mARVALID
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mARVALID
//
// Method: sARREADY
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mARADDR
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mARADDR
//
// Method: mARPROT
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mARPROT
//
// Method: sRVALID
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: mRREADY
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       sRDATA,
// 	       sRRESP
// Conflicts: mRREADY
//
// Method: sRDATA
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
// Method: sRRESP
// Conflict-free: mAWVALID,
// 	       sAWREADY,
// 	       mAWADDR,
// 	       mAWPROT,
// 	       mWVALID,
// 	       sWREADY,
// 	       mWDATA,
// 	       mWSTRB,
// 	       sBVALID,
// 	       mBREADY,
// 	       sBRESP,
// 	       mARVALID,
// 	       sARREADY,
// 	       mARADDR,
// 	       mARPROT,
// 	       sRVALID,
// 	       mRREADY,
// 	       sRDATA,
// 	       sRRESP
//
//
// Ports:
// Name                         I/O  size props
// AWREADY                        O     1 reg
// WREADY                         O     1 reg
// BVALID                         O     1
// BRESP                          O     2 reg
// ARREADY                        O     1 reg
// RVALID                         O     1
// RDATA                          O    32 reg
// RRESP                          O     2 reg
// ACLK                           I     1 clock
// ARESETN                        I     1 reset
// AWADDR                         I    32 reg
// AWPROT                         I     3 reg
// WDATA                          I    32 reg
// WSTRB                          I     4 reg
// ARADDR                         I    32 reg
// ARPROT                         I     3 reg
// AWVALID                        I     1
// WVALID                         I     1
// BREADY                         I     1
// ARVALID                        I     1
// RREADY                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkA4LS(ACLK,
	      ARESETN,

	      AWVALID,

	      AWREADY,

	      AWADDR,

	      AWPROT,

	      WVALID,

	      WREADY,

	      WDATA,

	      WSTRB,

	      BVALID,

	      BREADY,

	      BRESP,

	      ARVALID,

	      ARREADY,

	      ARADDR,

	      ARPROT,

	      RVALID,

	      RREADY,

	      RDATA,

	      RRESP);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  ACLK;
  input  ARESETN;

  // action method mAWVALID
  input  AWVALID;

  // value method sAWREADY
  output AWREADY;

  // action method mAWADDR
  input  [31 : 0] AWADDR;

  // action method mAWPROT
  input  [2 : 0] AWPROT;

  // action method mWVALID
  input  WVALID;

  // value method sWREADY
  output WREADY;

  // action method mWDATA
  input  [31 : 0] WDATA;

  // action method mWSTRB
  input  [3 : 0] WSTRB;

  // value method sBVALID
  output BVALID;

  // action method mBREADY
  input  BREADY;

  // value method sBRESP
  output [1 : 0] BRESP;

  // action method mARVALID
  input  ARVALID;

  // value method sARREADY
  output ARREADY;

  // action method mARADDR
  input  [31 : 0] ARADDR;

  // action method mARPROT
  input  [2 : 0] ARPROT;

  // value method sRVALID
  output RVALID;

  // action method mRREADY
  input  RREADY;

  // value method sRDATA
  output [31 : 0] RDATA;

  // value method sRRESP
  output [1 : 0] RRESP;

  // signals for module outputs
  wire [31 : 0] RDATA;
  wire [1 : 0] BRESP, RRESP;
  wire ARREADY, AWREADY, BVALID, RVALID, WREADY;

  // inlined wires
  wire [35 : 0] a4l_a4wrData_data_wire_wget;
  wire [34 : 0] a4l_a4rdAddr_data_wire_wget, a4l_a4wrAddr_data_wire_wget;

  // register a4l_a4rdResp_fifof_cntr_r
  reg [1 : 0] a4l_a4rdResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_D_IN;
  wire a4l_a4rdResp_fifof_cntr_r_EN;

  // register a4l_a4rdResp_fifof_q_0
  reg [33 : 0] a4l_a4rdResp_fifof_q_0;
  reg [33 : 0] a4l_a4rdResp_fifof_q_0_D_IN;
  wire a4l_a4rdResp_fifof_q_0_EN;

  // register a4l_a4rdResp_fifof_q_1
  reg [33 : 0] a4l_a4rdResp_fifof_q_1;
  reg [33 : 0] a4l_a4rdResp_fifof_q_1_D_IN;
  wire a4l_a4rdResp_fifof_q_1_EN;

  // register a4l_a4wrResp_fifof_cntr_r
  reg [1 : 0] a4l_a4wrResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrResp_fifof_cntr_r_D_IN;
  wire a4l_a4wrResp_fifof_cntr_r_EN;

  // register a4l_a4wrResp_fifof_q_0
  reg [1 : 0] a4l_a4wrResp_fifof_q_0;
  reg [1 : 0] a4l_a4wrResp_fifof_q_0_D_IN;
  wire a4l_a4wrResp_fifof_q_0_EN;

  // register a4l_a4wrResp_fifof_q_1
  reg [1 : 0] a4l_a4wrResp_fifof_q_1;
  wire [1 : 0] a4l_a4wrResp_fifof_q_1_D_IN;
  wire a4l_a4wrResp_fifof_q_1_EN;

  // register b18
  reg [7 : 0] b18;
  wire [7 : 0] b18_D_IN;
  wire b18_EN;

  // register b19
  reg [7 : 0] b19;
  wire [7 : 0] b19_D_IN;
  wire b19_EN;

  // register b1A
  reg [7 : 0] b1A;
  wire [7 : 0] b1A_D_IN;
  wire b1A_EN;

  // register b1B
  reg [7 : 0] b1B;
  wire [7 : 0] b1B_D_IN;
  wire b1B_EN;

  // register lastReadAddr
  reg [31 : 0] lastReadAddr;
  wire [31 : 0] lastReadAddr_D_IN;
  wire lastReadAddr_EN;

  // register lastWriteAddr
  reg [31 : 0] lastWriteAddr;
  wire [31 : 0] lastWriteAddr_D_IN;
  wire lastWriteAddr_EN;

  // register r0
  reg [31 : 0] r0;
  wire [31 : 0] r0_D_IN;
  wire r0_EN;

  // register r4
  reg [31 : 0] r4;
  wire [31 : 0] r4_D_IN;
  wire r4_EN;

  // ports of submodule a4l_a4rdAddr_fifof
  wire [34 : 0] a4l_a4rdAddr_fifof_D_IN, a4l_a4rdAddr_fifof_D_OUT;
  wire a4l_a4rdAddr_fifof_CLR,
       a4l_a4rdAddr_fifof_DEQ,
       a4l_a4rdAddr_fifof_EMPTY_N,
       a4l_a4rdAddr_fifof_ENQ,
       a4l_a4rdAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrAddr_fifof
  wire [34 : 0] a4l_a4wrAddr_fifof_D_IN, a4l_a4wrAddr_fifof_D_OUT;
  wire a4l_a4wrAddr_fifof_CLR,
       a4l_a4wrAddr_fifof_DEQ,
       a4l_a4wrAddr_fifof_EMPTY_N,
       a4l_a4wrAddr_fifof_ENQ,
       a4l_a4wrAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrData_fifof
  wire [35 : 0] a4l_a4wrData_fifof_D_IN, a4l_a4wrData_fifof_D_OUT;
  wire a4l_a4wrData_fifof_CLR,
       a4l_a4wrData_fifof_DEQ,
       a4l_a4wrData_fifof_EMPTY_N,
       a4l_a4wrData_fifof_ENQ,
       a4l_a4wrData_fifof_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_enq,
       CAN_FIRE_RL_a4l_a4rdResp_do_deq,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_both,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_do_enq,
       CAN_FIRE_RL_a4l_a4wrData_do_enq,
       CAN_FIRE_RL_a4l_a4wrResp_do_deq,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_both,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_cfrd,
       CAN_FIRE_RL_a4l_cfwr,
       CAN_FIRE_RL_a4ls_doAlways,
       CAN_FIRE_mARADDR,
       CAN_FIRE_mARPROT,
       CAN_FIRE_mARVALID,
       CAN_FIRE_mAWADDR,
       CAN_FIRE_mAWPROT,
       CAN_FIRE_mAWVALID,
       CAN_FIRE_mBREADY,
       CAN_FIRE_mRREADY,
       CAN_FIRE_mWDATA,
       CAN_FIRE_mWSTRB,
       CAN_FIRE_mWVALID,
       WILL_FIRE_RL_a4l_a4rdAddr_do_enq,
       WILL_FIRE_RL_a4l_a4rdResp_do_deq,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_both,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_do_enq,
       WILL_FIRE_RL_a4l_a4wrData_do_enq,
       WILL_FIRE_RL_a4l_a4wrResp_do_deq,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_both,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_cfrd,
       WILL_FIRE_RL_a4l_cfwr,
       WILL_FIRE_RL_a4ls_doAlways,
       WILL_FIRE_mARADDR,
       WILL_FIRE_mARPROT,
       WILL_FIRE_mARVALID,
       WILL_FIRE_mAWADDR,
       WILL_FIRE_mAWPROT,
       WILL_FIRE_mAWVALID,
       WILL_FIRE_mBREADY,
       WILL_FIRE_mRREADY,
       WILL_FIRE_mWDATA,
       WILL_FIRE_mWSTRB,
       WILL_FIRE_mWVALID;

  // inputs to muxes for submodule ports
  wire [33 : 0] MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
  wire MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h4318, v__h4584, v__h4616;
  reg [31 : 0] _theResult____h4414;
  wire [31 : 0] rdat__h4534;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60,
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27;
  wire _dfoo1, _dfoo3, _dfoo5, _dfoo7;

  // action method mAWVALID
  assign CAN_FIRE_mAWVALID = 1'd1 ;
  assign WILL_FIRE_mAWVALID = AWVALID ;

  // value method sAWREADY
  assign AWREADY = a4l_a4wrAddr_fifof_FULL_N ;

  // action method mAWADDR
  assign CAN_FIRE_mAWADDR = 1'd1 ;
  assign WILL_FIRE_mAWADDR = 1'd1 ;

  // action method mAWPROT
  assign CAN_FIRE_mAWPROT = 1'd1 ;
  assign WILL_FIRE_mAWPROT = 1'd1 ;

  // action method mWVALID
  assign CAN_FIRE_mWVALID = 1'd1 ;
  assign WILL_FIRE_mWVALID = WVALID ;

  // value method sWREADY
  assign WREADY = a4l_a4wrData_fifof_FULL_N ;

  // action method mWDATA
  assign CAN_FIRE_mWDATA = 1'd1 ;
  assign WILL_FIRE_mWDATA = 1'd1 ;

  // action method mWSTRB
  assign CAN_FIRE_mWSTRB = 1'd1 ;
  assign WILL_FIRE_mWSTRB = 1'd1 ;

  // value method sBVALID
  assign BVALID = a4l_a4wrResp_fifof_cntr_r != 2'd0 ;

  // action method mBREADY
  assign CAN_FIRE_mBREADY = 1'd1 ;
  assign WILL_FIRE_mBREADY = BREADY ;

  // value method sBRESP
  assign BRESP = a4l_a4wrResp_fifof_q_0 ;

  // action method mARVALID
  assign CAN_FIRE_mARVALID = 1'd1 ;
  assign WILL_FIRE_mARVALID = ARVALID ;

  // value method sARREADY
  assign ARREADY = a4l_a4rdAddr_fifof_FULL_N ;

  // action method mARADDR
  assign CAN_FIRE_mARADDR = 1'd1 ;
  assign WILL_FIRE_mARADDR = 1'd1 ;

  // action method mARPROT
  assign CAN_FIRE_mARPROT = 1'd1 ;
  assign WILL_FIRE_mARPROT = 1'd1 ;

  // value method sRVALID
  assign RVALID = a4l_a4rdResp_fifof_cntr_r != 2'd0 ;

  // action method mRREADY
  assign CAN_FIRE_mRREADY = 1'd1 ;
  assign WILL_FIRE_mRREADY = RREADY ;

  // value method sRDATA
  assign RDATA = a4l_a4rdResp_fifof_q_0[31:0] ;

  // value method sRRESP
  assign RRESP = a4l_a4rdResp_fifof_q_0[33:32] ;

  // submodule a4l_a4rdAddr_fifof
  FIFO2 #(.width(32'd35), .guarded(32'd1)) a4l_a4rdAddr_fifof(.RST(ARESETN),
							      .CLK(ACLK),
							      .D_IN(a4l_a4rdAddr_fifof_D_IN),
							      .ENQ(a4l_a4rdAddr_fifof_ENQ),
							      .DEQ(a4l_a4rdAddr_fifof_DEQ),
							      .CLR(a4l_a4rdAddr_fifof_CLR),
							      .D_OUT(a4l_a4rdAddr_fifof_D_OUT),
							      .FULL_N(a4l_a4rdAddr_fifof_FULL_N),
							      .EMPTY_N(a4l_a4rdAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrAddr_fifof
  FIFO2 #(.width(32'd35), .guarded(32'd1)) a4l_a4wrAddr_fifof(.RST(ARESETN),
							      .CLK(ACLK),
							      .D_IN(a4l_a4wrAddr_fifof_D_IN),
							      .ENQ(a4l_a4wrAddr_fifof_ENQ),
							      .DEQ(a4l_a4wrAddr_fifof_DEQ),
							      .CLR(a4l_a4wrAddr_fifof_CLR),
							      .D_OUT(a4l_a4wrAddr_fifof_D_OUT),
							      .FULL_N(a4l_a4wrAddr_fifof_FULL_N),
							      .EMPTY_N(a4l_a4wrAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrData_fifof
  FIFO2 #(.width(32'd36), .guarded(32'd1)) a4l_a4wrData_fifof(.RST(ARESETN),
							      .CLK(ACLK),
							      .D_IN(a4l_a4wrData_fifof_D_IN),
							      .ENQ(a4l_a4wrData_fifof_ENQ),
							      .DEQ(a4l_a4wrData_fifof_DEQ),
							      .CLR(a4l_a4wrData_fifof_CLR),
							      .D_OUT(a4l_a4wrData_fifof_D_OUT),
							      .FULL_N(a4l_a4wrData_fifof_FULL_N),
							      .EMPTY_N(a4l_a4wrData_fifof_EMPTY_N));

  // rule RL_a4l_cfrd
  assign CAN_FIRE_RL_a4l_cfrd =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 && a4l_a4rdAddr_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfrd = CAN_FIRE_RL_a4l_cfrd ;

  // rule RL_a4l_cfwr
  assign CAN_FIRE_RL_a4l_cfwr =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 &&
	     a4l_a4wrAddr_fifof_EMPTY_N &&
	     a4l_a4wrData_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfwr = CAN_FIRE_RL_a4l_cfwr ;

  // rule RL_a4ls_doAlways
  assign CAN_FIRE_RL_a4ls_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_a4ls_doAlways = 1'd1 ;

  // rule RL_a4l_a4wrAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_enq =
	     a4l_a4wrAddr_fifof_FULL_N && AWVALID ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_enq = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;

  // rule RL_a4l_a4wrData_do_enq
  assign CAN_FIRE_RL_a4l_a4wrData_do_enq =
	     a4l_a4wrData_fifof_FULL_N && WVALID ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_enq = CAN_FIRE_RL_a4l_a4wrData_do_enq ;

  // rule RL_a4l_a4wrResp_do_deq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_deq =
	     a4l_a4wrResp_fifof_cntr_r != 2'd0 && BREADY ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_deq = CAN_FIRE_RL_a4l_a4wrResp_do_deq ;

  // rule RL_a4l_a4wrResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_cfwr &&
	     !CAN_FIRE_RL_a4l_a4wrResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // rule RL_a4l_a4wrResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_do_deq && !CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // rule RL_a4l_a4wrResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_a4wrResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_both ;

  // rule RL_a4l_a4rdAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_enq =
	     a4l_a4rdAddr_fifof_FULL_N && ARVALID ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_enq = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;

  // rule RL_a4l_a4rdResp_do_deq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_deq =
	     a4l_a4rdResp_fifof_cntr_r != 2'd0 && RREADY ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_deq = CAN_FIRE_RL_a4l_a4rdResp_do_deq ;

  // rule RL_a4l_a4rdResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_cfrd &&
	     !CAN_FIRE_RL_a4l_a4rdResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // rule RL_a4l_a4rdResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_do_deq && !CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // rule RL_a4l_a4rdResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_a4rdResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ;
  assign MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4rdResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 =
	     { 2'd0, _theResult____h4414 } ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       a4l_a4rdResp_fifof_q_1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4wrResp_fifof_cntr_r == 2'd1) ?
	       2'd0 :
	       a4l_a4wrResp_fifof_q_1 ;

  // inlined wires
  assign a4l_a4wrAddr_data_wire_wget = { AWPROT, AWADDR } ;
  assign a4l_a4wrData_data_wire_wget = { WSTRB, WDATA } ;
  assign a4l_a4rdAddr_data_wire_wget = { ARPROT, ARADDR } ;

  // register a4l_a4rdResp_fifof_cntr_r
  assign a4l_a4rdResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ?
	       a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 :
	       MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4rdResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // register a4l_a4rdResp_fifof_q_0
  always@(MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr or a4l_a4rdResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_0_D_IN = a4l_a4rdResp_fifof_q_1;
      default: a4l_a4rdResp_fifof_q_0_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4rdResp_fifof_q_1
  always@(MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_1_D_IN = 34'd0;
      default: a4l_a4rdResp_fifof_q_1_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_cntr_r
  assign a4l_a4wrResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ?
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 :
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // register a4l_a4wrResp_fifof_q_0
  always@(MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr or a4l_a4wrResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrResp_fifof_q_0_D_IN = 2'd0;
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrResp_fifof_q_0_D_IN =
	      MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr:
	  a4l_a4wrResp_fifof_q_0_D_IN = a4l_a4wrResp_fifof_q_1;
      default: a4l_a4wrResp_fifof_q_0_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_q_1
  assign a4l_a4wrResp_fifof_q_1_D_IN = 2'd0 ;
  assign a4l_a4wrResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register b18
  assign b18_D_IN = a4l_a4wrData_fifof_D_OUT[7:0] ;
  assign b18_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[32] ;

  // register b19
  assign b19_D_IN = a4l_a4wrData_fifof_D_OUT[15:8] ;
  assign b19_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[33] ;

  // register b1A
  assign b1A_D_IN = a4l_a4wrData_fifof_D_OUT[23:16] ;
  assign b1A_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[34] ;

  // register b1B
  assign b1B_D_IN = a4l_a4wrData_fifof_D_OUT[31:24] ;
  assign b1B_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[35] ;

  // register lastReadAddr
  assign lastReadAddr_D_IN = a4l_a4rdAddr_fifof_D_OUT[31:0] ;
  assign lastReadAddr_EN = CAN_FIRE_RL_a4l_cfrd ;

  // register lastWriteAddr
  assign lastWriteAddr_D_IN = a4l_a4wrAddr_fifof_D_OUT[31:0] ;
  assign lastWriteAddr_EN = CAN_FIRE_RL_a4l_cfwr ;

  // register r0
  assign r0_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r0_EN =
	     WILL_FIRE_RL_a4l_cfwr && a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h0 ;

  // register r4
  assign r4_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r4_EN =
	     WILL_FIRE_RL_a4l_cfwr && a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h04 ;

  // submodule a4l_a4rdAddr_fifof
  assign a4l_a4rdAddr_fifof_D_IN = a4l_a4rdAddr_data_wire_wget ;
  assign a4l_a4rdAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;
  assign a4l_a4rdAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfrd ;
  assign a4l_a4rdAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrAddr_fifof
  assign a4l_a4wrAddr_fifof_D_IN = a4l_a4wrAddr_data_wire_wget ;
  assign a4l_a4wrAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;
  assign a4l_a4wrAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrData_fifof
  assign a4l_a4wrData_fifof_D_IN = a4l_a4wrData_data_wire_wget ;
  assign a4l_a4wrData_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrData_do_enq ;
  assign a4l_a4wrData_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrData_fifof_CLR = 1'b0 ;

  // remaining internal signals
  assign _dfoo1 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd1 ;
  assign _dfoo3 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd0 ;
  assign _dfoo5 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd1 ;
  assign _dfoo7 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd0 ;
  assign a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 =
	     a4l_a4rdResp_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 =
	     a4l_a4wrResp_fifof_cntr_r - 2'd1 ;
  assign rdat__h4534 = { b1B, b1A, b19, b18 } ;
  always@(a4l_a4rdAddr_fifof_D_OUT or
	  lastReadAddr or r0 or r4 or rdat__h4534 or lastWriteAddr)
  begin
    case (a4l_a4rdAddr_fifof_D_OUT[7:0])
      8'h0: _theResult____h4414 = r0;
      8'h04: _theResult____h4414 = r4;
      8'h10: _theResult____h4414 = 32'hF00DFACE;
      8'h18: _theResult____h4414 = rdat__h4534;
      8'h20: _theResult____h4414 = lastWriteAddr;
      default: _theResult____h4414 = lastReadAddr;
    endcase
  end

  // handling of inlined registers

  always@(posedge ACLK)
  begin
    if (ARESETN == `BSV_RESET_VALUE)
      begin
        a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	b18 <= `BSV_ASSIGNMENT_DELAY 8'h18;
	b19 <= `BSV_ASSIGNMENT_DELAY 8'h19;
	b1A <= `BSV_ASSIGNMENT_DELAY 8'h1A;
	b1B <= `BSV_ASSIGNMENT_DELAY 8'h1B;
	lastReadAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lastWriteAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a4l_a4rdResp_fifof_cntr_r_EN)
	  a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_cntr_r_D_IN;
	if (a4l_a4rdResp_fifof_q_0_EN)
	  a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_0_D_IN;
	if (a4l_a4rdResp_fifof_q_1_EN)
	  a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_1_D_IN;
	if (a4l_a4wrResp_fifof_cntr_r_EN)
	  a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_cntr_r_D_IN;
	if (a4l_a4wrResp_fifof_q_0_EN)
	  a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_0_D_IN;
	if (a4l_a4wrResp_fifof_q_1_EN)
	  a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_1_D_IN;
	if (b18_EN) b18 <= `BSV_ASSIGNMENT_DELAY b18_D_IN;
	if (b19_EN) b19 <= `BSV_ASSIGNMENT_DELAY b19_D_IN;
	if (b1A_EN) b1A <= `BSV_ASSIGNMENT_DELAY b1A_D_IN;
	if (b1B_EN) b1B <= `BSV_ASSIGNMENT_DELAY b1B_D_IN;
	if (lastReadAddr_EN)
	  lastReadAddr <= `BSV_ASSIGNMENT_DELAY lastReadAddr_D_IN;
	if (lastWriteAddr_EN)
	  lastWriteAddr <= `BSV_ASSIGNMENT_DELAY lastWriteAddr_D_IN;
	if (r0_EN) r0 <= `BSV_ASSIGNMENT_DELAY r0_D_IN;
	if (r4_EN) r4 <= `BSV_ASSIGNMENT_DELAY r4_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdResp_fifof_cntr_r = 2'h2;
    a4l_a4rdResp_fifof_q_0 = 34'h2AAAAAAAA;
    a4l_a4rdResp_fifof_q_1 = 34'h2AAAAAAAA;
    a4l_a4wrResp_fifof_cntr_r = 2'h2;
    a4l_a4wrResp_fifof_q_0 = 2'h2;
    a4l_a4wrResp_fifof_q_1 = 2'h2;
    b18 = 8'hAA;
    b19 = 8'hAA;
    b1A = 8'hAA;
    b1B = 8'hAA;
    lastReadAddr = 32'hAAAAAAAA;
    lastWriteAddr = 32'hAAAAAAAA;
    r0 = 32'hAAAAAAAA;
    r4 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge ACLK)
  begin
    #0;
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h4584 = $time;
	  #0;
	end
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ Addr:%0x",
		 v__h4584,
		 a4l_a4rdAddr_fifof_D_OUT[31:0]);
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h4616 = $time;
	  #0;
	end
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ RESPOSNE Data:%0x",
		 v__h4616,
		 _theResult____h4414);
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	begin
	  v__h4318 = $time;
	  #0;
	end
    if (ARESETN != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	$display("[%0d]: %m: AXI4-LITE CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h4318,
		 a4l_a4wrAddr_fifof_D_OUT[31:0],
		 a4l_a4wrData_fifof_D_OUT[35:32],
		 a4l_a4wrData_fifof_D_OUT[31:0]);
  end
  // synopsys translate_on
endmodule  // mkA4LS

