//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Tue Nov 12 16:29:18 EST 2013
//
// Method conflict info:
// Method: s_axi_mAWVALID
// Conflict-free: s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mAWVALID
//
// Method: s_axi_sAWREADY
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mAWADDR
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mAWADDR
//
// Method: s_axi_mAWPROT
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mAWPROT
//
// Method: s_axi_mWVALID
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mWVALID
//
// Method: s_axi_sWREADY
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mWDATA
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mWDATA
//
// Method: s_axi_mWSTRB
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mWSTRB
//
// Method: s_axi_sBVALID
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mBREADY
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mBREADY
//
// Method: s_axi_sBRESP
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mARVALID
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mARVALID
//
// Method: s_axi_sARREADY
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mARADDR
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mARADDR
//
// Method: s_axi_mARPROT
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mARPROT
//
// Method: s_axi_sRVALID
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_mRREADY
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
// Conflicts: s_axi_mRREADY
//
// Method: s_axi_sRDATA
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
// Method: s_axi_sRRESP
// Conflict-free: s_axi_mAWVALID,
// 	       s_axi_sAWREADY,
// 	       s_axi_mAWADDR,
// 	       s_axi_mAWPROT,
// 	       s_axi_mWVALID,
// 	       s_axi_sWREADY,
// 	       s_axi_mWDATA,
// 	       s_axi_mWSTRB,
// 	       s_axi_sBVALID,
// 	       s_axi_mBREADY,
// 	       s_axi_sBRESP,
// 	       s_axi_mARVALID,
// 	       s_axi_sARREADY,
// 	       s_axi_mARADDR,
// 	       s_axi_mARPROT,
// 	       s_axi_sRVALID,
// 	       s_axi_mRREADY,
// 	       s_axi_sRDATA,
// 	       s_axi_sRRESP
//
//
// Ports:
// Name                         I/O  size props
// s_axi_awready                  O     1 reg
// s_axi_wready                   O     1 reg
// s_axi_bvalid                   O     1
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1 reg
// s_axi_rvalid                   O     1
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// s_axi_awaddr                   I    32 reg
// s_axi_awprot                   I     3 reg
// s_axi_wdata                    I    32 reg
// s_axi_wstrb                    I     4 reg
// s_axi_araddr                   I    32 reg
// s_axi_arprot                   I     3 reg
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkA4LS(s_axi_aclk,
	      s_axi_aresetn,

	      s_axi_awvalid,

	      s_axi_awready,

	      s_axi_awaddr,

	      s_axi_awprot,

	      s_axi_wvalid,

	      s_axi_wready,

	      s_axi_wdata,

	      s_axi_wstrb,

	      s_axi_bvalid,

	      s_axi_bready,

	      s_axi_bresp,

	      s_axi_arvalid,

	      s_axi_arready,

	      s_axi_araddr,

	      s_axi_arprot,

	      s_axi_rvalid,

	      s_axi_rready,

	      s_axi_rdata,

	      s_axi_rresp);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [31 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [31 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // signals for module outputs
  wire [31 : 0] s_axi_rdata;
  wire [1 : 0] s_axi_bresp, s_axi_rresp;
  wire s_axi_arready, s_axi_awready, s_axi_bvalid, s_axi_rvalid, s_axi_wready;

  // inlined wires
  wire [35 : 0] a4l_a4wrData_data_wire_wget;
  wire [34 : 0] a4l_a4rdAddr_data_wire_wget, a4l_a4wrAddr_data_wire_wget;

  // register a4l_a4rdResp_fifof_cntr_r
  reg [1 : 0] a4l_a4rdResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_D_IN;
  wire a4l_a4rdResp_fifof_cntr_r_EN;

  // register a4l_a4rdResp_fifof_q_0
  reg [33 : 0] a4l_a4rdResp_fifof_q_0;
  reg [33 : 0] a4l_a4rdResp_fifof_q_0_D_IN;
  wire a4l_a4rdResp_fifof_q_0_EN;

  // register a4l_a4rdResp_fifof_q_1
  reg [33 : 0] a4l_a4rdResp_fifof_q_1;
  reg [33 : 0] a4l_a4rdResp_fifof_q_1_D_IN;
  wire a4l_a4rdResp_fifof_q_1_EN;

  // register a4l_a4wrResp_fifof_cntr_r
  reg [1 : 0] a4l_a4wrResp_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrResp_fifof_cntr_r_D_IN;
  wire a4l_a4wrResp_fifof_cntr_r_EN;

  // register a4l_a4wrResp_fifof_q_0
  reg [1 : 0] a4l_a4wrResp_fifof_q_0;
  reg [1 : 0] a4l_a4wrResp_fifof_q_0_D_IN;
  wire a4l_a4wrResp_fifof_q_0_EN;

  // register a4l_a4wrResp_fifof_q_1
  reg [1 : 0] a4l_a4wrResp_fifof_q_1;
  wire [1 : 0] a4l_a4wrResp_fifof_q_1_D_IN;
  wire a4l_a4wrResp_fifof_q_1_EN;

  // register b18
  reg [7 : 0] b18;
  wire [7 : 0] b18_D_IN;
  wire b18_EN;

  // register b19
  reg [7 : 0] b19;
  wire [7 : 0] b19_D_IN;
  wire b19_EN;

  // register b1A
  reg [7 : 0] b1A;
  wire [7 : 0] b1A_D_IN;
  wire b1A_EN;

  // register b1B
  reg [7 : 0] b1B;
  wire [7 : 0] b1B_D_IN;
  wire b1B_EN;

  // register lastReadAddr
  reg [31 : 0] lastReadAddr;
  wire [31 : 0] lastReadAddr_D_IN;
  wire lastReadAddr_EN;

  // register lastWriteAddr
  reg [31 : 0] lastWriteAddr;
  wire [31 : 0] lastWriteAddr_D_IN;
  wire lastWriteAddr_EN;

  // register r0
  reg [31 : 0] r0;
  wire [31 : 0] r0_D_IN;
  wire r0_EN;

  // register r4
  reg [31 : 0] r4;
  wire [31 : 0] r4_D_IN;
  wire r4_EN;

  // register r8
  reg [31 : 0] r8;
  wire [31 : 0] r8_D_IN;
  wire r8_EN;

  // ports of submodule a4l_a4rdAddr_fifof
  wire [34 : 0] a4l_a4rdAddr_fifof_D_IN, a4l_a4rdAddr_fifof_D_OUT;
  wire a4l_a4rdAddr_fifof_CLR,
       a4l_a4rdAddr_fifof_DEQ,
       a4l_a4rdAddr_fifof_EMPTY_N,
       a4l_a4rdAddr_fifof_ENQ,
       a4l_a4rdAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrAddr_fifof
  wire [34 : 0] a4l_a4wrAddr_fifof_D_IN, a4l_a4wrAddr_fifof_D_OUT;
  wire a4l_a4wrAddr_fifof_CLR,
       a4l_a4wrAddr_fifof_DEQ,
       a4l_a4wrAddr_fifof_EMPTY_N,
       a4l_a4wrAddr_fifof_ENQ,
       a4l_a4wrAddr_fifof_FULL_N;

  // ports of submodule a4l_a4wrData_fifof
  wire [35 : 0] a4l_a4wrData_fifof_D_IN, a4l_a4wrData_fifof_D_OUT;
  wire a4l_a4wrData_fifof_CLR,
       a4l_a4wrData_fifof_DEQ,
       a4l_a4wrData_fifof_EMPTY_N,
       a4l_a4wrData_fifof_ENQ,
       a4l_a4wrData_fifof_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_enq,
       CAN_FIRE_RL_a4l_a4rdResp_do_deq,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_both,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_do_enq,
       CAN_FIRE_RL_a4l_a4wrData_do_enq,
       CAN_FIRE_RL_a4l_a4wrResp_do_deq,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_both,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       CAN_FIRE_RL_a4l_cfrd,
       CAN_FIRE_RL_a4l_cfwr,
       CAN_FIRE_RL_a4ls_doAlways,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       WILL_FIRE_RL_a4l_a4rdAddr_do_enq,
       WILL_FIRE_RL_a4l_a4rdResp_do_deq,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_both,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_do_enq,
       WILL_FIRE_RL_a4l_a4wrData_do_enq,
       WILL_FIRE_RL_a4l_a4wrResp_do_deq,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_both,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr,
       WILL_FIRE_RL_a4l_cfrd,
       WILL_FIRE_RL_a4l_cfwr,
       WILL_FIRE_RL_a4ls_doAlways,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID;

  // inputs to muxes for submodule ports
  wire [33 : 0] MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
  wire MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h4411, v__h4689, v__h4721;
  reg [31 : 0] _theResult____h4507;
  wire [31 : 0] rdat__h4637;
  wire [1 : 0] a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60,
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27;
  wire _dfoo1, _dfoo3, _dfoo5, _dfoo7;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = a4l_a4wrAddr_fifof_FULL_N ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = a4l_a4wrData_fifof_FULL_N ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = a4l_a4wrResp_fifof_cntr_r != 2'd0 ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = a4l_a4wrResp_fifof_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = a4l_a4rdAddr_fifof_FULL_N ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = a4l_a4rdResp_fifof_cntr_r != 2'd0 ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = a4l_a4rdResp_fifof_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = a4l_a4rdResp_fifof_q_0[33:32] ;

  // submodule a4l_a4rdAddr_fifof
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) a4l_a4rdAddr_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4rdAddr_fifof_D_IN),
					      .ENQ(a4l_a4rdAddr_fifof_ENQ),
					      .DEQ(a4l_a4rdAddr_fifof_DEQ),
					      .CLR(a4l_a4rdAddr_fifof_CLR),
					      .D_OUT(a4l_a4rdAddr_fifof_D_OUT),
					      .FULL_N(a4l_a4rdAddr_fifof_FULL_N),
					      .EMPTY_N(a4l_a4rdAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrAddr_fifof
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) a4l_a4wrAddr_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4wrAddr_fifof_D_IN),
					      .ENQ(a4l_a4wrAddr_fifof_ENQ),
					      .DEQ(a4l_a4wrAddr_fifof_DEQ),
					      .CLR(a4l_a4wrAddr_fifof_CLR),
					      .D_OUT(a4l_a4wrAddr_fifof_D_OUT),
					      .FULL_N(a4l_a4wrAddr_fifof_FULL_N),
					      .EMPTY_N(a4l_a4wrAddr_fifof_EMPTY_N));

  // submodule a4l_a4wrData_fifof
  FIFO2 #(.width(32'd36),
	  .guarded(32'd1)) a4l_a4wrData_fifof(.RST(s_axi_aresetn),
					      .CLK(s_axi_aclk),
					      .D_IN(a4l_a4wrData_fifof_D_IN),
					      .ENQ(a4l_a4wrData_fifof_ENQ),
					      .DEQ(a4l_a4wrData_fifof_DEQ),
					      .CLR(a4l_a4wrData_fifof_CLR),
					      .D_OUT(a4l_a4wrData_fifof_D_OUT),
					      .FULL_N(a4l_a4wrData_fifof_FULL_N),
					      .EMPTY_N(a4l_a4wrData_fifof_EMPTY_N));

  // rule RL_a4l_cfrd
  assign CAN_FIRE_RL_a4l_cfrd =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 && a4l_a4rdAddr_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfrd = CAN_FIRE_RL_a4l_cfrd ;

  // rule RL_a4l_cfwr
  assign CAN_FIRE_RL_a4l_cfwr =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 &&
	     a4l_a4wrAddr_fifof_EMPTY_N &&
	     a4l_a4wrData_fifof_EMPTY_N ;
  assign WILL_FIRE_RL_a4l_cfwr = CAN_FIRE_RL_a4l_cfwr ;

  // rule RL_a4ls_doAlways
  assign CAN_FIRE_RL_a4ls_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_a4ls_doAlways = 1'd1 ;

  // rule RL_a4l_a4wrAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_enq =
	     a4l_a4wrAddr_fifof_FULL_N && s_axi_awvalid ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_enq = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;

  // rule RL_a4l_a4wrData_do_enq
  assign CAN_FIRE_RL_a4l_a4wrData_do_enq =
	     a4l_a4wrData_fifof_FULL_N && s_axi_wvalid ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_enq = CAN_FIRE_RL_a4l_a4wrData_do_enq ;

  // rule RL_a4l_a4wrResp_do_deq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_deq =
	     a4l_a4wrResp_fifof_cntr_r != 2'd0 && s_axi_bready ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_deq = CAN_FIRE_RL_a4l_a4wrResp_do_deq ;

  // rule RL_a4l_a4wrResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_cfwr &&
	     !CAN_FIRE_RL_a4l_a4wrResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // rule RL_a4l_a4wrResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_do_deq && !CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // rule RL_a4l_a4wrResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfwr && CAN_FIRE_RL_a4l_a4wrResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrResp_fifof_both ;

  // rule RL_a4l_a4rdAddr_do_enq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_enq =
	     a4l_a4rdAddr_fifof_FULL_N && s_axi_arvalid ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_enq = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;

  // rule RL_a4l_a4rdResp_do_deq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_deq =
	     a4l_a4rdResp_fifof_cntr_r != 2'd0 && s_axi_rready ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_deq = CAN_FIRE_RL_a4l_a4rdResp_do_deq ;

  // rule RL_a4l_a4rdResp_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_cfrd &&
	     !CAN_FIRE_RL_a4l_a4rdResp_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // rule RL_a4l_a4rdResp_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_do_deq && !CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // rule RL_a4l_a4rdResp_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_cfrd && CAN_FIRE_RL_a4l_a4rdResp_do_deq &&
	     CAN_FIRE_RL_a4l_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdResp_fifof_both =
	     CAN_FIRE_RL_a4l_a4rdResp_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ;
  assign MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4rdResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 =
	     { 2'd0, _theResult____h4507 } ;
  assign MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       a4l_a4rdResp_fifof_q_1 ;
  assign MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4rdResp_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrResp_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4wrResp_fifof_cntr_r == 2'd1) ?
	       2'd0 :
	       a4l_a4wrResp_fifof_q_1 ;

  // inlined wires
  assign a4l_a4wrAddr_data_wire_wget = { s_axi_awprot, s_axi_awaddr } ;
  assign a4l_a4wrData_data_wire_wget = { s_axi_wstrb, s_axi_wdata } ;
  assign a4l_a4rdAddr_data_wire_wget = { s_axi_arprot, s_axi_araddr } ;

  // register a4l_a4rdResp_fifof_cntr_r
  assign a4l_a4rdResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ?
	       a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 :
	       MUX_a4l_a4rdResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4rdResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr ;

  // register a4l_a4rdResp_fifof_q_0
  always@(MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr or a4l_a4rdResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_0_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_0_D_IN = a4l_a4rdResp_fifof_q_1;
      default: a4l_a4rdResp_fifof_q_0_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo7 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4rdResp_fifof_q_1
  always@(MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_1:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdResp_fifof_q_1_write_1__SEL_2:
	  a4l_a4rdResp_fifof_q_1_D_IN =
	      MUX_a4l_a4rdResp_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr:
	  a4l_a4rdResp_fifof_q_1_D_IN = 34'd0;
      default: a4l_a4rdResp_fifof_q_1_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_incCtr &&
	     a4l_a4rdResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_both && _dfoo5 ||
	     WILL_FIRE_RL_a4l_a4rdResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_cntr_r
  assign a4l_a4wrResp_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ?
	       a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 :
	       MUX_a4l_a4wrResp_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrResp_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr ;

  // register a4l_a4wrResp_fifof_q_0
  always@(MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr or a4l_a4wrResp_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrResp_fifof_q_0_D_IN = 2'd0;
      MUX_a4l_a4wrResp_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrResp_fifof_q_0_D_IN =
	      MUX_a4l_a4wrResp_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr:
	  a4l_a4wrResp_fifof_q_0_D_IN = a4l_a4wrResp_fifof_q_1;
      default: a4l_a4wrResp_fifof_q_0_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrResp_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register a4l_a4wrResp_fifof_q_1
  assign a4l_a4wrResp_fifof_q_1_D_IN = 2'd0 ;
  assign a4l_a4wrResp_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_incCtr &&
	     a4l_a4wrResp_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_a4l_a4wrResp_fifof_decCtr ;

  // register b18
  assign b18_D_IN = a4l_a4wrData_fifof_D_OUT[7:0] ;
  assign b18_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[32] ;

  // register b19
  assign b19_D_IN = a4l_a4wrData_fifof_D_OUT[15:8] ;
  assign b19_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[33] ;

  // register b1A
  assign b1A_D_IN = a4l_a4wrData_fifof_D_OUT[23:16] ;
  assign b1A_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[34] ;

  // register b1B
  assign b1B_D_IN = a4l_a4wrData_fifof_D_OUT[31:24] ;
  assign b1B_EN =
	     WILL_FIRE_RL_a4l_cfwr &&
	     a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h18 &&
	     a4l_a4wrData_fifof_D_OUT[35] ;

  // register lastReadAddr
  assign lastReadAddr_D_IN = a4l_a4rdAddr_fifof_D_OUT[31:0] ;
  assign lastReadAddr_EN = CAN_FIRE_RL_a4l_cfrd ;

  // register lastWriteAddr
  assign lastWriteAddr_D_IN = a4l_a4wrAddr_fifof_D_OUT[31:0] ;
  assign lastWriteAddr_EN = CAN_FIRE_RL_a4l_cfwr ;

  // register r0
  assign r0_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r0_EN =
	     WILL_FIRE_RL_a4l_cfwr && a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h0 ;

  // register r4
  assign r4_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r4_EN =
	     WILL_FIRE_RL_a4l_cfwr && a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h04 ;

  // register r8
  assign r8_D_IN = a4l_a4wrData_fifof_D_OUT[31:0] ;
  assign r8_EN =
	     WILL_FIRE_RL_a4l_cfwr && a4l_a4wrAddr_fifof_D_OUT[7:0] == 8'h08 ;

  // submodule a4l_a4rdAddr_fifof
  assign a4l_a4rdAddr_fifof_D_IN = a4l_a4rdAddr_data_wire_wget ;
  assign a4l_a4rdAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4rdAddr_do_enq ;
  assign a4l_a4rdAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfrd ;
  assign a4l_a4rdAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrAddr_fifof
  assign a4l_a4wrAddr_fifof_D_IN = a4l_a4wrAddr_data_wire_wget ;
  assign a4l_a4wrAddr_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrAddr_do_enq ;
  assign a4l_a4wrAddr_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrAddr_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrData_fifof
  assign a4l_a4wrData_fifof_D_IN = a4l_a4wrData_data_wire_wget ;
  assign a4l_a4wrData_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrData_do_enq ;
  assign a4l_a4wrData_fifof_DEQ = CAN_FIRE_RL_a4l_cfwr ;
  assign a4l_a4wrData_fifof_CLR = 1'b0 ;

  // remaining internal signals
  assign _dfoo1 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd1 ;
  assign _dfoo3 =
	     a4l_a4wrResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 == 2'd0 ;
  assign _dfoo5 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd2 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd1 ;
  assign _dfoo7 =
	     a4l_a4rdResp_fifof_cntr_r != 2'd1 ||
	     a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 == 2'd0 ;
  assign a4l_a4rdResp_fifof_cntr_r_2_MINUS_1___d60 =
	     a4l_a4rdResp_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrResp_fifof_cntr_r_9_MINUS_1___d27 =
	     a4l_a4wrResp_fifof_cntr_r - 2'd1 ;
  assign rdat__h4637 = { b1B, b1A, b19, b18 } ;
  always@(a4l_a4rdAddr_fifof_D_OUT or
	  lastReadAddr or r0 or r4 or r8 or rdat__h4637 or lastWriteAddr)
  begin
    case (a4l_a4rdAddr_fifof_D_OUT[7:0])
      8'h0: _theResult____h4507 = r0;
      8'h04: _theResult____h4507 = r4;
      8'h08: _theResult____h4507 = r8;
      8'h10: _theResult____h4507 = 32'hF00DFACE;
      8'h14: _theResult____h4507 = 32'hFEEDC0DE;
      8'h18: _theResult____h4507 = rdat__h4637;
      8'h20: _theResult____h4507 = lastWriteAddr;
      default: _theResult____h4507 = lastReadAddr;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn == `BSV_RESET_VALUE)
      begin
        a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	b18 <= `BSV_ASSIGNMENT_DELAY 8'h18;
	b19 <= `BSV_ASSIGNMENT_DELAY 8'h19;
	b1A <= `BSV_ASSIGNMENT_DELAY 8'h1A;
	b1B <= `BSV_ASSIGNMENT_DELAY 8'h1B;
	lastReadAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lastWriteAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a4l_a4rdResp_fifof_cntr_r_EN)
	  a4l_a4rdResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_cntr_r_D_IN;
	if (a4l_a4rdResp_fifof_q_0_EN)
	  a4l_a4rdResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_0_D_IN;
	if (a4l_a4rdResp_fifof_q_1_EN)
	  a4l_a4rdResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdResp_fifof_q_1_D_IN;
	if (a4l_a4wrResp_fifof_cntr_r_EN)
	  a4l_a4wrResp_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_cntr_r_D_IN;
	if (a4l_a4wrResp_fifof_q_0_EN)
	  a4l_a4wrResp_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_0_D_IN;
	if (a4l_a4wrResp_fifof_q_1_EN)
	  a4l_a4wrResp_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrResp_fifof_q_1_D_IN;
	if (b18_EN) b18 <= `BSV_ASSIGNMENT_DELAY b18_D_IN;
	if (b19_EN) b19 <= `BSV_ASSIGNMENT_DELAY b19_D_IN;
	if (b1A_EN) b1A <= `BSV_ASSIGNMENT_DELAY b1A_D_IN;
	if (b1B_EN) b1B <= `BSV_ASSIGNMENT_DELAY b1B_D_IN;
	if (lastReadAddr_EN)
	  lastReadAddr <= `BSV_ASSIGNMENT_DELAY lastReadAddr_D_IN;
	if (lastWriteAddr_EN)
	  lastWriteAddr <= `BSV_ASSIGNMENT_DELAY lastWriteAddr_D_IN;
	if (r0_EN) r0 <= `BSV_ASSIGNMENT_DELAY r0_D_IN;
	if (r4_EN) r4 <= `BSV_ASSIGNMENT_DELAY r4_D_IN;
	if (r8_EN) r8 <= `BSV_ASSIGNMENT_DELAY r8_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdResp_fifof_cntr_r = 2'h2;
    a4l_a4rdResp_fifof_q_0 = 34'h2AAAAAAAA;
    a4l_a4rdResp_fifof_q_1 = 34'h2AAAAAAAA;
    a4l_a4wrResp_fifof_cntr_r = 2'h2;
    a4l_a4wrResp_fifof_q_0 = 2'h2;
    a4l_a4wrResp_fifof_q_1 = 2'h2;
    b18 = 8'hAA;
    b19 = 8'hAA;
    b1A = 8'hAA;
    b1B = 8'hAA;
    lastReadAddr = 32'hAAAAAAAA;
    lastWriteAddr = 32'hAAAAAAAA;
    r0 = 32'hAAAAAAAA;
    r4 = 32'hAAAAAAAA;
    r8 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h4689 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ Addr:%0x",
		 v__h4689,
		 a4l_a4rdAddr_fifof_D_OUT[31:0]);
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	begin
	  v__h4721 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfrd)
	$display("[%0d]: %m: AXI4-LITE CONFIG READ RESPOSNE Data:%0x",
		 v__h4721,
		 _theResult____h4507);
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	begin
	  v__h4411 = $time;
	  #0;
	end
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_a4l_cfwr)
	$display("[%0d]: %m: AXI4-LITE CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h4411,
		 a4l_a4wrAddr_fifof_D_OUT[31:0],
		 a4l_a4wrData_fifof_D_OUT[35:32],
		 a4l_a4wrData_fifof_D_OUT[31:0]);
  end
  // synopsys translate_on
endmodule  // mkA4LS

