//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Mar  3 14:29:49 EST 2013
//
// Method conflict info:
// Method: led
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_db
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_e
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_rs
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_rw
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_rx_rxd
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_en
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_er
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_col
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
//
// Ports:
// Name                         I/O  size props
// led                            O     8 reg
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// gmii_led                       O     1 reg
// rxclk_ModBnd                   O     1 clock
// CLK_GATE_rxclk_ModBnd          O     1 const
// gmii_gtx_clk                   O     1 clock
// CLK_GATE_gmii_gtx_clk          O     1 const
// gmii_rstn                      O     1 reset
// sys0_clk                       I     1 clock
// sys0_rstn                      I     1 reset
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// gmii_rxd                       I     8 reg
// gmii_rx_dv                     I     1 reg
// gmii_rx_er                     I     1 reg
// gmii_col                       I     1
// gmii_crs                       I     1
// gmii_int                       I     1
// i2cpad_sda                    IO     1 inout
// i2cpad_scl                    IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFTop_kc705(sys0_clk,
		    sys0_rstn,
		    sys1_clkp,
		    sys1_clkn,
		    gmii_rx_clk,

		    .i2cpad_sda(i2cC_tSDA_IO),
		    .i2cpad_scl(i2cC_tSCL_IO),

		    led,

		    lcd_db,

		    lcd_e,

		    lcd_rs,

		    lcd_rw,

		    gmii_rxd,

		    gmii_rx_dv,

		    gmii_rx_er,

		    gmii_txd,

		    gmii_tx_en,

		    gmii_tx_er,

		    gmii_col,

		    gmii_crs,

		    gmii_int,

		    gmii_led,

		    rxclk_ModBnd,
		    CLK_GATE_rxclk_ModBnd,

		    gmii_gtx_clk,
		    CLK_GATE_gmii_gtx_clk,

		    gmii_rstn);
  input  sys0_clk;
  input  sys0_rstn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;

  inout  i2cC_tSDA_IO;
  inout  i2cC_tSCL_IO;

  // value method led
  output [7 : 0] led;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rxd;

  // action method gmii_rx_rx_dv
  input  gmii_rx_dv;

  // action method gmii_rx_rx_er
  input  gmii_rx_er;

  // value method gmii_tx_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_er;

  // action method gmii_col
  input  gmii_col;

  // action method gmii_crs
  input  gmii_crs;

  // action method gmii_intr
  input  gmii_int;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock rxclk_ModBnd
  output rxclk_ModBnd;
  output CLK_GATE_rxclk_ModBnd;

  // oscillator and gates for output clock gmii_gtx_clk
  output gmii_gtx_clk;
  output CLK_GATE_gmii_gtx_clk;

  // output resets
  output gmii_rstn;

  // signals for module outputs
  wire [7 : 0] gmii_txd, led;
  wire [3 : 0] lcd_db;
  wire CLK_GATE_gmii_gtx_clk,
       CLK_GATE_rxclk_ModBnd,
       gmii_gtx_clk,
       gmii_led,
       gmii_rstn,
       gmii_tx_en,
       gmii_tx_er,
       lcd_e,
       lcd_rs,
       lcd_rw,
       rxclk_ModBnd;

  // inlined wires
  wire iicrom_serverAdapter_outData_enqData_whas,
       iicrom_serverAdapter_outData_outData_whas;

  // register cycleCount
  reg [31 : 0] cycleCount;
  wire [31 : 0] cycleCount_D_IN;
  wire cycleCount_EN;

  // register i2cC_rAddress
  reg [7 : 0] i2cC_rAddress;
  wire [7 : 0] i2cC_rAddress_D_IN;
  wire i2cC_rAddress_EN;

  // register i2cC_rOutEn
  reg i2cC_rOutEn;
  wire i2cC_rOutEn_D_IN, i2cC_rOutEn_EN;

  // register i2cC_rSCL
  reg i2cC_rSCL;
  wire i2cC_rSCL_D_IN, i2cC_rSCL_EN;

  // register i2cC_rSDA
  reg i2cC_rSDA;
  wire i2cC_rSDA_D_IN, i2cC_rSDA_EN;

  // register i2cC_rSlaveAddr
  reg [6 : 0] i2cC_rSlaveAddr;
  wire [6 : 0] i2cC_rSlaveAddr_D_IN;
  wire i2cC_rSlaveAddr_EN;

  // register i2cC_rState
  reg i2cC_rState;
  wire i2cC_rState_D_IN, i2cC_rState_EN;

  // register i2cC_rWrite
  reg i2cC_rWrite;
  wire i2cC_rWrite_D_IN, i2cC_rWrite_EN;

  // register i2cC_rWriteData
  reg [7 : 0] i2cC_rWriteData;
  wire [7 : 0] i2cC_rWriteData_D_IN;
  wire i2cC_rWriteData_EN;

  // register i2cC_vrReadData_0
  reg i2cC_vrReadData_0;
  wire i2cC_vrReadData_0_D_IN, i2cC_vrReadData_0_EN;

  // register i2cC_vrReadData_1
  reg i2cC_vrReadData_1;
  wire i2cC_vrReadData_1_D_IN, i2cC_vrReadData_1_EN;

  // register i2cC_vrReadData_2
  reg i2cC_vrReadData_2;
  wire i2cC_vrReadData_2_D_IN, i2cC_vrReadData_2_EN;

  // register i2cC_vrReadData_3
  reg i2cC_vrReadData_3;
  wire i2cC_vrReadData_3_D_IN, i2cC_vrReadData_3_EN;

  // register i2cC_vrReadData_4
  reg i2cC_vrReadData_4;
  wire i2cC_vrReadData_4_D_IN, i2cC_vrReadData_4_EN;

  // register i2cC_vrReadData_5
  reg i2cC_vrReadData_5;
  wire i2cC_vrReadData_5_D_IN, i2cC_vrReadData_5_EN;

  // register i2cC_vrReadData_6
  reg i2cC_vrReadData_6;
  wire i2cC_vrReadData_6_D_IN, i2cC_vrReadData_6_EN;

  // register i2cC_vrReadData_7
  reg i2cC_vrReadData_7;
  wire i2cC_vrReadData_7_D_IN, i2cC_vrReadData_7_EN;

  // register idc_doResetCount
  reg [3 : 0] idc_doResetCount;
  wire [3 : 0] idc_doResetCount_D_IN;
  wire idc_doResetCount_EN;

  // register idc_preResetCount
  reg [3 : 0] idc_preResetCount;
  wire [3 : 0] idc_preResetCount_D_IN;
  wire idc_preResetCount_EN;

  // register iicDone
  reg iicDone;
  wire iicDone_D_IN, iicDone_EN;

  // register iicGo
  reg iicGo;
  wire iicGo_D_IN, iicGo_EN;

  // register iicPtr
  reg [9 : 0] iicPtr;
  wire [9 : 0] iicPtr_D_IN;
  wire iicPtr_EN;

  // register iicTG
  reg iicTG;
  wire iicTG_D_IN, iicTG_EN;

  // register iicrom_serverAdapter_cnt
  reg [2 : 0] iicrom_serverAdapter_cnt;
  wire [2 : 0] iicrom_serverAdapter_cnt_D_IN;
  wire iicrom_serverAdapter_cnt_EN;

  // register iicrom_serverAdapter_s1
  reg [1 : 0] iicrom_serverAdapter_s1;
  wire [1 : 0] iicrom_serverAdapter_s1_D_IN;
  wire iicrom_serverAdapter_s1_EN;

  // register lcdNeedsInit
  reg lcdNeedsInit;
  wire lcdNeedsInit_D_IN, lcdNeedsInit_EN;

  // register macAddrCnt
  reg [10 : 0] macAddrCnt;
  wire [10 : 0] macAddrCnt_D_IN;
  wire macAddrCnt_EN;

  // register macAddrRead
  reg macAddrRead;
  wire macAddrRead_D_IN, macAddrRead_EN;

  // register macAddrRespCnt
  reg [10 : 0] macAddrRespCnt;
  wire [10 : 0] macAddrRespCnt_D_IN;
  wire macAddrRespCnt_EN;

  // register macV
  reg [47 : 0] macV;
  wire [47 : 0] macV_D_IN;
  wire macV_EN;

  // register notFF
  reg notFF;
  wire notFF_D_IN, notFF_EN;

  // register selEepromOK
  reg selEepromOK;
  wire selEepromOK_D_IN, selEepromOK_EN;

  // ports of submodule a4ls
  wire [31 : 0] a4ls_s_axi_araddr,
		a4ls_s_axi_awaddr,
		a4ls_s_axi_rdata,
		a4ls_s_axi_wdata;
  wire [3 : 0] a4ls_s_axi_wstrb;
  wire [2 : 0] a4ls_s_axi_arprot, a4ls_s_axi_awprot;
  wire [1 : 0] a4ls_s_axi_bresp, a4ls_s_axi_rresp;
  wire a4ls_s_axi_arready,
       a4ls_s_axi_arvalid,
       a4ls_s_axi_awready,
       a4ls_s_axi_awvalid,
       a4ls_s_axi_bready,
       a4ls_s_axi_bvalid,
       a4ls_s_axi_rready,
       a4ls_s_axi_rvalid,
       a4ls_s_axi_wready,
       a4ls_s_axi_wvalid;

  // ports of submodule i2cC_fRequest
  wire [23 : 0] i2cC_fRequest_D_IN, i2cC_fRequest_D_OUT;
  wire i2cC_fRequest_CLR,
       i2cC_fRequest_DEQ,
       i2cC_fRequest_EMPTY_N,
       i2cC_fRequest_ENQ,
       i2cC_fRequest_FULL_N;

  // ports of submodule i2cC_fResponse
  wire [7 : 0] i2cC_fResponse_D_IN;
  wire i2cC_fResponse_CLR,
       i2cC_fResponse_DEQ,
       i2cC_fResponse_ENQ,
       i2cC_fResponse_FULL_N;

  // ports of submodule i2cC_rPlayIndex
  wire [9 : 0] i2cC_rPlayIndex_DATA_A,
	       i2cC_rPlayIndex_DATA_B,
	       i2cC_rPlayIndex_DATA_C,
	       i2cC_rPlayIndex_DATA_F,
	       i2cC_rPlayIndex_Q_OUT;
  wire i2cC_rPlayIndex_ADDA,
       i2cC_rPlayIndex_ADDB,
       i2cC_rPlayIndex_SETC,
       i2cC_rPlayIndex_SETF;

  // ports of submodule i2cC_rPrescaler
  wire [31 : 0] i2cC_rPrescaler_DATA_A,
		i2cC_rPrescaler_DATA_B,
		i2cC_rPrescaler_DATA_C,
		i2cC_rPrescaler_DATA_F,
		i2cC_rPrescaler_Q_OUT;
  wire i2cC_rPrescaler_ADDA,
       i2cC_rPrescaler_ADDB,
       i2cC_rPrescaler_SETC,
       i2cC_rPrescaler_SETF;

  // ports of submodule i2cC_tSCL
  wire i2cC_tSCL_IO;

  // ports of submodule i2cC_tSDA
  wire i2cC_tSDA_IO, i2cC_tSDA_O;

  // ports of submodule idc_idcRst
  wire idc_idcRst_ASSERT_IN, idc_idcRst_OUT_RST;

  // ports of submodule idc_resetP
  wire idc_resetP_RESET_OUT;

  // ports of submodule iicrom_memory
  wire [31 : 0] iicrom_memory_DI, iicrom_memory_DO;
  wire [9 : 0] iicrom_memory_ADDR;
  wire iicrom_memory_EN, iicrom_memory_WE;

  // ports of submodule iicrom_serverAdapter_outDataCore
  wire [31 : 0] iicrom_serverAdapter_outDataCore_D_IN,
		iicrom_serverAdapter_outDataCore_D_OUT;
  wire iicrom_serverAdapter_outDataCore_CLR,
       iicrom_serverAdapter_outDataCore_DEQ,
       iicrom_serverAdapter_outDataCore_EMPTY_N,
       iicrom_serverAdapter_outDataCore_ENQ,
       iicrom_serverAdapter_outDataCore_FULL_N;

  // ports of submodule l2hcrt
  wire [31 : 0] l2hcrt_m_axi_araddr,
		l2hcrt_m_axi_awaddr,
		l2hcrt_m_axi_rdata,
		l2hcrt_m_axi_wdata;
  wire [7 : 0] l2hcrt_gmii_rxd, l2hcrt_gmii_txd;
  wire [3 : 0] l2hcrt_m_axi_wstrb;
  wire [2 : 0] l2hcrt_m_axi_arprot, l2hcrt_m_axi_awprot;
  wire [1 : 0] l2hcrt_m_axi_bresp, l2hcrt_m_axi_rresp;
  wire l2hcrt_gmii_col,
       l2hcrt_gmii_crs,
       l2hcrt_gmii_gtx_clk,
       l2hcrt_gmii_int,
       l2hcrt_gmii_led,
       l2hcrt_gmii_rstn,
       l2hcrt_gmii_rx_dv,
       l2hcrt_gmii_rx_er,
       l2hcrt_gmii_tx_en,
       l2hcrt_gmii_tx_er,
       l2hcrt_m_axi_aclk,
       l2hcrt_m_axi_arready,
       l2hcrt_m_axi_arvalid,
       l2hcrt_m_axi_awready,
       l2hcrt_m_axi_awvalid,
       l2hcrt_m_axi_bready,
       l2hcrt_m_axi_bvalid,
       l2hcrt_m_axi_rready,
       l2hcrt_m_axi_rvalid,
       l2hcrt_m_axi_wready,
       l2hcrt_m_axi_wvalid,
       l2hcrt_rxclk_ModBnd;

  // ports of submodule lcd_ctrl
  wire [127 : 0] lcd_ctrl_setLine1_text, lcd_ctrl_setLine2_text;
  wire [3 : 0] lcd_ctrl_db;
  wire lcd_ctrl_EN_setLine1,
       lcd_ctrl_EN_setLine2,
       lcd_ctrl_e,
       lcd_ctrl_rs,
       lcd_ctrl_rw;

  // ports of submodule sys0_rst
  wire sys0_rst_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_cycleCountAdvance,
       CAN_FIRE_RL_doAlways,
       CAN_FIRE_RL_i2cC_done_read,
       CAN_FIRE_RL_i2cC_done_write,
       CAN_FIRE_RL_i2cC_reset_prescaler,
       CAN_FIRE_RL_i2cC_running_read,
       CAN_FIRE_RL_i2cC_running_write,
       CAN_FIRE_RL_i2cC_start,
       CAN_FIRE_RL_i2cC_update_prescaler,
       CAN_FIRE_RL_idc_do_reset,
       CAN_FIRE_RL_idc_my_reset_condition,
       CAN_FIRE_RL_idc_pre_reset,
       CAN_FIRE_RL_iicTG__dreg_update,
       CAN_FIRE_RL_iic_go_set,
       CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd,
       CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq,
       CAN_FIRE_RL_iicrom_serverAdapter_overRun,
       CAN_FIRE_RL_iicrom_serverAdapter_s1__dreg_update,
       CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
       CAN_FIRE_RL_init_lcd,
       CAN_FIRE_RL_notFF__dreg_update,
       CAN_FIRE_RL_request_iicrom,
       CAN_FIRE_RL_response_iicrom,
       CAN_FIRE_RL_simulationTermination,
       CAN_FIRE_RL_uAddr_clock_domain_crossing,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_cycleCountAdvance,
       WILL_FIRE_RL_doAlways,
       WILL_FIRE_RL_i2cC_done_read,
       WILL_FIRE_RL_i2cC_done_write,
       WILL_FIRE_RL_i2cC_reset_prescaler,
       WILL_FIRE_RL_i2cC_running_read,
       WILL_FIRE_RL_i2cC_running_write,
       WILL_FIRE_RL_i2cC_start,
       WILL_FIRE_RL_i2cC_update_prescaler,
       WILL_FIRE_RL_idc_do_reset,
       WILL_FIRE_RL_idc_my_reset_condition,
       WILL_FIRE_RL_idc_pre_reset,
       WILL_FIRE_RL_iicTG__dreg_update,
       WILL_FIRE_RL_iic_go_set,
       WILL_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd,
       WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq,
       WILL_FIRE_RL_iicrom_serverAdapter_overRun,
       WILL_FIRE_RL_iicrom_serverAdapter_s1__dreg_update,
       WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
       WILL_FIRE_RL_init_lcd,
       WILL_FIRE_RL_notFF__dreg_update,
       WILL_FIRE_RL_request_iicrom,
       WILL_FIRE_RL_response_iicrom,
       WILL_FIRE_RL_simulationTermination,
       WILL_FIRE_RL_uAddr_clock_domain_crossing,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // inputs to muxes for submodule ports
  wire MUX_i2cC_rOutEn_write_1__SEL_1,
       MUX_i2cC_rOutEn_write_1__SEL_2,
       MUX_i2cC_rOutEn_write_1__VAL_1,
       MUX_i2cC_rOutEn_write_1__VAL_2,
       MUX_i2cC_rSCL_write_1__VAL_1,
       MUX_i2cC_rSCL_write_1__VAL_2,
       MUX_i2cC_rSDA_write_1__VAL_1,
       MUX_i2cC_rSDA_write_1__VAL_2,
       MUX_i2cC_rState_write_1__SEL_1,
       MUX_iicGo_write_1__SEL_1;

  // remaining internal signals
  wire [116 : 0] _130549178157447095380771276656813203__q5,
		 _166153498389916941667817601160445959__q3,
		 _306783360__q1,
		 wRdData__h1611;
  wire [86 : 0] _121583396715528419856163987__q4,
		_154742503901866210315206599__q2,
		wWrData__h1615;
  wire [31 : 0] v__h22499;
  wire [2 : 0] a0__h1600,
	       a1__h1599,
	       a2__h1598,
	       a3__h1597,
	       a4__h1596,
	       a5__h1595,
	       a6__h1594,
	       a7__h1593,
	       d0__h1609,
	       d1__h1608,
	       d2__h1607,
	       d3__h1606,
	       d4__h1605,
	       d5__h1604,
	       d6__h1603,
	       d7__h1602,
	       iicrom_serverAdapter_cnt_87_PLUS_IF_iicrom_ser_ETC___d193,
	       s0__h1591,
	       s1__h1590,
	       s2__h1589,
	       s3__h1588,
	       s4__h1587,
	       s5__h1586,
	       s6__h1585;
  wire _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108;

  // oscillator and gates for output clock rxclk_ModBnd
  assign rxclk_ModBnd = l2hcrt_rxclk_ModBnd ;
  assign CLK_GATE_rxclk_ModBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_gtx_clk
  assign gmii_gtx_clk = l2hcrt_gmii_gtx_clk ;
  assign CLK_GATE_gmii_gtx_clk = 1'b1 ;

  // output resets
  assign gmii_rstn = l2hcrt_gmii_rstn ;

  // value method led
  assign led = { cycleCount[31:28], notFF, iicTG, iicDone, iicGo } ;

  // value method lcd_db
  assign lcd_db = lcd_ctrl_db ;

  // value method lcd_e
  assign lcd_e = lcd_ctrl_e ;

  // value method lcd_rs
  assign lcd_rs = lcd_ctrl_rs ;

  // value method lcd_rw
  assign lcd_rw = lcd_ctrl_rw ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_txd = l2hcrt_gmii_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_en = l2hcrt_gmii_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_er = l2hcrt_gmii_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = l2hcrt_gmii_led ;

  // submodule a4ls
  mkA4LS #(.hasDebugLogic(1'd1)) a4ls(.s_axi_aclk(l2hcrt_m_axi_aclk),
				      .s_axi_aresetn(l2hcrt_gmii_rstn),
				      .s_axi_araddr(a4ls_s_axi_araddr),
				      .s_axi_arprot(a4ls_s_axi_arprot),
				      .s_axi_awaddr(a4ls_s_axi_awaddr),
				      .s_axi_awprot(a4ls_s_axi_awprot),
				      .s_axi_wdata(a4ls_s_axi_wdata),
				      .s_axi_wstrb(a4ls_s_axi_wstrb),
				      .s_axi_awvalid(a4ls_s_axi_awvalid),
				      .s_axi_wvalid(a4ls_s_axi_wvalid),
				      .s_axi_bready(a4ls_s_axi_bready),
				      .s_axi_arvalid(a4ls_s_axi_arvalid),
				      .s_axi_rready(a4ls_s_axi_rready),
				      .s_axi_awready(a4ls_s_axi_awready),
				      .s_axi_wready(a4ls_s_axi_wready),
				      .s_axi_bvalid(a4ls_s_axi_bvalid),
				      .s_axi_bresp(a4ls_s_axi_bresp),
				      .s_axi_arready(a4ls_s_axi_arready),
				      .s_axi_rvalid(a4ls_s_axi_rvalid),
				      .s_axi_rdata(a4ls_s_axi_rdata),
				      .s_axi_rresp(a4ls_s_axi_rresp));

  // submodule i2cC_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fRequest(.RST(sys0_rst_OUT_RST),
					     .CLK(sys0_clk),
					     .D_IN(i2cC_fRequest_D_IN),
					     .ENQ(i2cC_fRequest_ENQ),
					     .DEQ(i2cC_fRequest_DEQ),
					     .CLR(i2cC_fRequest_CLR),
					     .D_OUT(i2cC_fRequest_D_OUT),
					     .FULL_N(i2cC_fRequest_FULL_N),
					     .EMPTY_N(i2cC_fRequest_EMPTY_N));

  // submodule i2cC_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fResponse(.RST(sys0_rst_OUT_RST),
					      .CLK(sys0_clk),
					      .D_IN(i2cC_fResponse_D_IN),
					      .ENQ(i2cC_fResponse_ENQ),
					      .DEQ(i2cC_fResponse_DEQ),
					      .CLR(i2cC_fResponse_CLR),
					      .D_OUT(),
					      .FULL_N(i2cC_fResponse_FULL_N),
					      .EMPTY_N());

  // submodule i2cC_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) i2cC_rPlayIndex(.CLK(sys0_clk),
							  .RST(sys0_rst_OUT_RST),
							  .DATA_A(i2cC_rPlayIndex_DATA_A),
							  .DATA_B(i2cC_rPlayIndex_DATA_B),
							  .DATA_C(i2cC_rPlayIndex_DATA_C),
							  .DATA_F(i2cC_rPlayIndex_DATA_F),
							  .ADDA(i2cC_rPlayIndex_ADDA),
							  .ADDB(i2cC_rPlayIndex_ADDB),
							  .SETC(i2cC_rPlayIndex_SETC),
							  .SETF(i2cC_rPlayIndex_SETF),
							  .Q_OUT(i2cC_rPlayIndex_Q_OUT));

  // submodule i2cC_rPrescaler
  Counter #(.width(32'd32), .init(32'd666)) i2cC_rPrescaler(.CLK(sys0_clk),
							    .RST(sys0_rst_OUT_RST),
							    .DATA_A(i2cC_rPrescaler_DATA_A),
							    .DATA_B(i2cC_rPrescaler_DATA_B),
							    .DATA_C(i2cC_rPrescaler_DATA_C),
							    .DATA_F(i2cC_rPrescaler_DATA_F),
							    .ADDA(i2cC_rPrescaler_ADDA),
							    .ADDB(i2cC_rPrescaler_ADDB),
							    .SETC(i2cC_rPrescaler_SETC),
							    .SETF(i2cC_rPrescaler_SETF),
							    .Q_OUT(i2cC_rPrescaler_Q_OUT));

  // submodule i2cC_tSCL
  TriState #(.width(32'd1)) i2cC_tSCL(.I(i2cC_rSCL),
				      .OE(1'd1),
				      .O(),
				      .IO(i2cC_tSCL_IO));

  // submodule i2cC_tSDA
  TriState #(.width(32'd1)) i2cC_tSDA(.I(i2cC_rSDA),
				      .OE(i2cC_rOutEn),
				      .O(i2cC_tSDA_O),
				      .IO(i2cC_tSDA_IO));

  // submodule idc
  IDELAYCTRL idc(.REFCLK(sys0_clk), .RST(idc_resetP_RESET_OUT), .RDY());

  // submodule idc_idcRst
  MakeResetA #(.RSTDELAY(32'd1), .init(1'd0)) idc_idcRst(.CLK(sys0_clk),
							 .RST(sys0_rst_OUT_RST),
							 .DST_CLK(sys0_clk),
							 .ASSERT_IN(idc_idcRst_ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST(idc_idcRst_OUT_RST));

  // submodule idc_resetP
  ResetInverter idc_resetP(.RESET_IN(idc_idcRst_OUT_RST),
			   .RESET_OUT(idc_resetP_RESET_OUT));

  // submodule iicrom_memory
  BRAM1Load #(.FILENAME("../../../../data/hdmi_iic.hex"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd0)) iicrom_memory(.CLK(sys0_clk),
					   .ADDR(iicrom_memory_ADDR),
					   .DI(iicrom_memory_DI),
					   .WE(iicrom_memory_WE),
					   .EN(iicrom_memory_EN),
					   .DO(iicrom_memory_DO));

  // submodule iicrom_serverAdapter_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) iicrom_serverAdapter_outDataCore(.RST(sys0_rst_OUT_RST),
								.CLK(sys0_clk),
								.D_IN(iicrom_serverAdapter_outDataCore_D_IN),
								.ENQ(iicrom_serverAdapter_outDataCore_ENQ),
								.DEQ(iicrom_serverAdapter_outDataCore_DEQ),
								.CLR(iicrom_serverAdapter_outDataCore_CLR),
								.D_OUT(iicrom_serverAdapter_outDataCore_D_OUT),
								.FULL_N(iicrom_serverAdapter_outDataCore_FULL_N),
								.EMPTY_N(iicrom_serverAdapter_outDataCore_EMPTY_N));

  // submodule l2hcrt
  mkL2HCrt l2hcrt(.sys0_clk(sys0_clk),
		  .sys0_rst(sys0_rst_OUT_RST),
		  .sys1_clkp(sys1_clkp),
		  .sys1_clkn(sys1_clkn),
		  .gmii_rx_clk(gmii_rx_clk),
		  .gmii_col(l2hcrt_gmii_col),
		  .gmii_crs(l2hcrt_gmii_crs),
		  .gmii_int(l2hcrt_gmii_int),
		  .gmii_rx_dv(l2hcrt_gmii_rx_dv),
		  .gmii_rx_er(l2hcrt_gmii_rx_er),
		  .gmii_rxd(l2hcrt_gmii_rxd),
		  .m_axi_bresp(l2hcrt_m_axi_bresp),
		  .m_axi_rdata(l2hcrt_m_axi_rdata),
		  .m_axi_rresp(l2hcrt_m_axi_rresp),
		  .m_axi_awready(l2hcrt_m_axi_awready),
		  .m_axi_wready(l2hcrt_m_axi_wready),
		  .m_axi_bvalid(l2hcrt_m_axi_bvalid),
		  .m_axi_arready(l2hcrt_m_axi_arready),
		  .m_axi_rvalid(l2hcrt_m_axi_rvalid),
		  .m_axi_awvalid(l2hcrt_m_axi_awvalid),
		  .m_axi_awaddr(l2hcrt_m_axi_awaddr),
		  .m_axi_awprot(l2hcrt_m_axi_awprot),
		  .m_axi_wvalid(l2hcrt_m_axi_wvalid),
		  .m_axi_wdata(l2hcrt_m_axi_wdata),
		  .m_axi_wstrb(l2hcrt_m_axi_wstrb),
		  .m_axi_bready(l2hcrt_m_axi_bready),
		  .m_axi_arvalid(l2hcrt_m_axi_arvalid),
		  .m_axi_araddr(l2hcrt_m_axi_araddr),
		  .m_axi_arprot(l2hcrt_m_axi_arprot),
		  .m_axi_rready(l2hcrt_m_axi_rready),
		  .gmii_txd(l2hcrt_gmii_txd),
		  .gmii_tx_en(l2hcrt_gmii_tx_en),
		  .gmii_tx_er(l2hcrt_gmii_tx_er),
		  .gmii_led(l2hcrt_gmii_led),
		  .m_axi_aclk(l2hcrt_m_axi_aclk),
		  .CLK_GATE_m_axi_aclk(),
		  .rxclk_ModBnd(l2hcrt_rxclk_ModBnd),
		  .CLK_GATE_rxclk_ModBnd(),
		  .gmii_gtx_clk(l2hcrt_gmii_gtx_clk),
		  .CLK_GATE_gmii_gtx_clk(),
		  .m_axi_aresetn(),
		  .gmii_rstn(l2hcrt_gmii_rstn));

  // submodule lcd_ctrl
  mkLCDController lcd_ctrl(.CLK(sys0_clk),
			   .RST_N(sys0_rst_OUT_RST),
			   .setLine1_text(lcd_ctrl_setLine1_text),
			   .setLine2_text(lcd_ctrl_setLine2_text),
			   .EN_setLine1(lcd_ctrl_EN_setLine1),
			   .EN_setLine2(lcd_ctrl_EN_setLine2),
			   .db(lcd_ctrl_db),
			   .e(lcd_ctrl_e),
			   .rs(lcd_ctrl_rs),
			   .rw(lcd_ctrl_rw));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd15)) sys0_rst(.CLK(sys0_clk),
					   .IN_RST(sys0_rstn),
					   .OUT_RST(sys0_rst_OUT_RST));

  // rule RL_doAlways
  assign CAN_FIRE_RL_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_doAlways = 1'd1 ;

  // rule RL_simulationTermination
  assign CAN_FIRE_RL_simulationTermination = cycleCount == 32'd42000 ;
  assign WILL_FIRE_RL_simulationTermination =
	     CAN_FIRE_RL_simulationTermination ;

  // rule RL_iic_go_set
  assign CAN_FIRE_RL_iic_go_set = cycleCount[28] && !iicGo && !iicDone ;
  assign WILL_FIRE_RL_iic_go_set = CAN_FIRE_RL_iic_go_set ;

  // rule RL_init_lcd
  assign CAN_FIRE_RL_init_lcd = lcdNeedsInit && iicDone ;
  assign WILL_FIRE_RL_init_lcd = CAN_FIRE_RL_init_lcd ;

  // rule RL_request_iicrom
  assign CAN_FIRE_RL_request_iicrom =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;
  assign WILL_FIRE_RL_request_iicrom =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // rule RL_cycleCountAdvance
  assign CAN_FIRE_RL_cycleCountAdvance = 1'd1 ;
  assign WILL_FIRE_RL_cycleCountAdvance = 1'd1 ;

  // rule RL_i2cC_update_prescaler
  assign CAN_FIRE_RL_i2cC_update_prescaler = i2cC_rPrescaler_Q_OUT != 32'd0 ;
  assign WILL_FIRE_RL_i2cC_update_prescaler =
	     CAN_FIRE_RL_i2cC_update_prescaler ;

  // rule RL_i2cC_reset_prescaler
  assign CAN_FIRE_RL_i2cC_reset_prescaler = i2cC_rPrescaler_Q_OUT == 32'd0 ;
  assign WILL_FIRE_RL_i2cC_reset_prescaler =
	     CAN_FIRE_RL_i2cC_reset_prescaler ;

  // rule RL_i2cC_start
  assign CAN_FIRE_RL_i2cC_start = i2cC_fRequest_EMPTY_N && !i2cC_rState ;
  assign WILL_FIRE_RL_i2cC_start = CAN_FIRE_RL_i2cC_start ;

  // rule RL_i2cC_running_write
  assign CAN_FIRE_RL_i2cC_running_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT != 10'd0 ;
  assign WILL_FIRE_RL_i2cC_running_write = CAN_FIRE_RL_i2cC_running_write ;

  // rule RL_i2cC_running_read
  assign CAN_FIRE_RL_i2cC_running_read =
	     i2cC_rState && !i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT != 10'd0 ;
  assign WILL_FIRE_RL_i2cC_running_read = CAN_FIRE_RL_i2cC_running_read ;

  // rule RL_i2cC_done_write
  assign CAN_FIRE_RL_i2cC_done_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT == 10'd0 ;
  assign WILL_FIRE_RL_i2cC_done_write = CAN_FIRE_RL_i2cC_done_write ;

  // rule RL_i2cC_done_read
  assign CAN_FIRE_RL_i2cC_done_read =
	     i2cC_fResponse_FULL_N && i2cC_rState && !i2cC_rWrite &&
	     i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT == 10'd0 ;
  assign WILL_FIRE_RL_i2cC_done_read = CAN_FIRE_RL_i2cC_done_read ;

  // rule RL_uAddr_clock_domain_crossing
  assign CAN_FIRE_RL_uAddr_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_uAddr_clock_domain_crossing = 1'd1 ;

  // rule RL_iicTG__dreg_update
  assign CAN_FIRE_RL_iicTG__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_iicTG__dreg_update = 1'd1 ;

  // rule RL_notFF__dreg_update
  assign CAN_FIRE_RL_notFF__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_notFF__dreg_update = 1'd1 ;

  // rule RL_idc_my_reset_condition
  assign CAN_FIRE_RL_idc_my_reset_condition =
	     idc_preResetCount == 4'hF && idc_doResetCount != 4'hF ;
  assign WILL_FIRE_RL_idc_my_reset_condition =
	     CAN_FIRE_RL_idc_my_reset_condition ;

  // rule RL_idc_do_reset
  assign CAN_FIRE_RL_idc_do_reset = idc_preResetCount == 4'hF ;
  assign WILL_FIRE_RL_idc_do_reset = CAN_FIRE_RL_idc_do_reset ;

  // rule RL_idc_pre_reset
  assign CAN_FIRE_RL_idc_pre_reset = 1'd1 ;
  assign WILL_FIRE_RL_idc_pre_reset = 1'd1 ;

  // rule RL_iicrom_serverAdapter_stageReadResponseAlways
  assign CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways =
	     (iicrom_serverAdapter_cnt ^ 3'h4) < 3'd7 && iicGo &&
	     cycleCount[17:0] == 18'd0 ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // rule RL_iicrom_serverAdapter_moveToOutFIFO
  assign CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO =
	     (!iicrom_serverAdapter_s1[0] ||
	      iicrom_serverAdapter_outDataCore_FULL_N) &&
	     iicrom_serverAdapter_s1[1] ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO =
	     CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO ;

  // rule RL_iicrom_serverAdapter_overRun
  assign CAN_FIRE_RL_iicrom_serverAdapter_overRun =
	     iicrom_serverAdapter_s1[1] &&
	     !iicrom_serverAdapter_outDataCore_FULL_N ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_overRun =
	     CAN_FIRE_RL_iicrom_serverAdapter_overRun ;

  // rule RL_iicrom_serverAdapter_outData_setFirstCore
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ;

  // rule RL_iicrom_serverAdapter_outData_setFirstEnq
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq =
	     !iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq ;

  // rule RL_response_iicrom
  assign CAN_FIRE_RL_response_iicrom =
	     (iicrom_serverAdapter_outDataCore_EMPTY_N ||
	      iicrom_serverAdapter_outData_enqData_whas) &&
	     iicrom_serverAdapter_outData_outData_whas &&
	     i2cC_fRequest_FULL_N ;
  assign WILL_FIRE_RL_response_iicrom = CAN_FIRE_RL_response_iicrom ;

  // rule RL_iicrom_serverAdapter_outData_enqOnly
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly =
	     iicrom_serverAdapter_outDataCore_FULL_N &&
	     !CAN_FIRE_RL_response_iicrom &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly ;

  // rule RL_iicrom_serverAdapter_outData_deqOnly
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly =
	     iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     CAN_FIRE_RL_response_iicrom &&
	     !iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly ;

  // rule RL_iicrom_serverAdapter_outData_enqAndDeq
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq =
	     iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     iicrom_serverAdapter_outDataCore_FULL_N &&
	     CAN_FIRE_RL_response_iicrom &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ;

  // rule RL_iicrom_serverAdapter_cnt_finalAdd
  assign CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd =
	     WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ||
	     CAN_FIRE_RL_response_iicrom ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd =
	     CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd ;

  // rule RL_iicrom_serverAdapter_s1__dreg_update
  assign CAN_FIRE_RL_iicrom_serverAdapter_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_s1__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_i2cC_rOutEn_write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_write ;
  assign MUX_i2cC_rOutEn_write_1__SEL_2 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ;
  assign MUX_i2cC_rState_write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ;
  assign MUX_iicGo_write_1__SEL_1 =
	     WILL_FIRE_RL_request_iicrom && iicPtr == 10'd70 ;
  assign MUX_i2cC_rOutEn_write_1__VAL_1 =
	     _154742503901866210315206599__q2[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rOutEn_write_1__VAL_2 =
	     _166153498389916941667817601160445959__q3[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL_write_1__VAL_1 =
	     _121583396715528419856163987__q4[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL_write_1__VAL_2 =
	     _130549178157447095380771276656813203__q5[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA_write_1__VAL_1 =
	     wRdData__h1611[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA_write_1__VAL_2 =
	     wWrData__h1615[i2cC_rPlayIndex_Q_OUT[6:0]] ;

  // inlined wires
  assign iicrom_serverAdapter_outData_enqData_whas =
	     WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO &&
	     iicrom_serverAdapter_s1[0] ;
  assign iicrom_serverAdapter_outData_outData_whas =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq ;

  // register cycleCount
  assign cycleCount_D_IN = cycleCount + 32'd1 ;
  assign cycleCount_EN = 1'd1 ;

  // register i2cC_rAddress
  assign i2cC_rAddress_D_IN = i2cC_fRequest_D_OUT[15:8] ;
  assign i2cC_rAddress_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rOutEn
  assign i2cC_rOutEn_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_1 ?
	       MUX_i2cC_rOutEn_write_1__VAL_1 :
	       MUX_i2cC_rOutEn_write_1__VAL_2 ;
  assign i2cC_rOutEn_EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSCL
  assign i2cC_rSCL_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_1 ?
	       MUX_i2cC_rSCL_write_1__VAL_1 :
	       MUX_i2cC_rSCL_write_1__VAL_2 ;
  assign i2cC_rSCL_EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSDA
  assign i2cC_rSDA_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_2 ?
	       MUX_i2cC_rSDA_write_1__VAL_1 :
	       MUX_i2cC_rSDA_write_1__VAL_2 ;
  assign i2cC_rSDA_EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ;

  // register i2cC_rSlaveAddr
  assign i2cC_rSlaveAddr_D_IN = i2cC_fRequest_D_OUT[22:16] ;
  assign i2cC_rSlaveAddr_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rState
  assign i2cC_rState_D_IN = !MUX_i2cC_rState_write_1__SEL_1 ;
  assign i2cC_rState_EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_start ;

  // register i2cC_rWrite
  assign i2cC_rWrite_D_IN = i2cC_fRequest_D_OUT[23] ;
  assign i2cC_rWrite_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rWriteData
  assign i2cC_rWriteData_D_IN = i2cC_fRequest_D_OUT[7:0] ;
  assign i2cC_rWriteData_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_vrReadData_0
  assign i2cC_vrReadData_0_D_IN = i2cC_tSDA_O ;
  assign i2cC_vrReadData_0_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_1
  assign i2cC_vrReadData_1_D_IN = i2cC_vrReadData_0 ;
  assign i2cC_vrReadData_1_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_2
  assign i2cC_vrReadData_2_D_IN = i2cC_vrReadData_1 ;
  assign i2cC_vrReadData_2_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_3
  assign i2cC_vrReadData_3_D_IN = i2cC_vrReadData_2 ;
  assign i2cC_vrReadData_3_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_4
  assign i2cC_vrReadData_4_D_IN = i2cC_vrReadData_3 ;
  assign i2cC_vrReadData_4_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_5
  assign i2cC_vrReadData_5_D_IN = i2cC_vrReadData_4 ;
  assign i2cC_vrReadData_5_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_6
  assign i2cC_vrReadData_6_D_IN = i2cC_vrReadData_5 ;
  assign i2cC_vrReadData_6_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_7
  assign i2cC_vrReadData_7_D_IN = i2cC_vrReadData_6 ;
  assign i2cC_vrReadData_7_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register idc_doResetCount
  assign idc_doResetCount_D_IN =
	     (idc_doResetCount == 4'hF) ?
	       idc_doResetCount :
	       idc_doResetCount + 4'd1 ;
  assign idc_doResetCount_EN = CAN_FIRE_RL_idc_do_reset ;

  // register idc_preResetCount
  assign idc_preResetCount_D_IN =
	     (idc_preResetCount == 4'hF) ?
	       idc_preResetCount :
	       idc_preResetCount + 4'd1 ;
  assign idc_preResetCount_EN = 1'd1 ;

  // register iicDone
  assign iicDone_D_IN = 1'd1 ;
  assign iicDone_EN = MUX_iicGo_write_1__SEL_1 ;

  // register iicGo
  assign iicGo_D_IN = !MUX_iicGo_write_1__SEL_1 ;
  assign iicGo_EN =
	     WILL_FIRE_RL_request_iicrom && iicPtr == 10'd70 ||
	     WILL_FIRE_RL_iic_go_set ;

  // register iicPtr
  assign iicPtr_D_IN = iicPtr + 10'd1 ;
  assign iicPtr_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // register iicTG
  assign iicTG_D_IN = 1'b0 ;
  assign iicTG_EN = 1'd1 ;

  // register iicrom_serverAdapter_cnt
  assign iicrom_serverAdapter_cnt_D_IN =
	     iicrom_serverAdapter_cnt_87_PLUS_IF_iicrom_ser_ETC___d193 ;
  assign iicrom_serverAdapter_cnt_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd ;

  // register iicrom_serverAdapter_s1
  assign iicrom_serverAdapter_s1_D_IN =
	     { CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
	       1'b1 } ;
  assign iicrom_serverAdapter_s1_EN = 1'd1 ;

  // register lcdNeedsInit
  assign lcdNeedsInit_D_IN = 1'd0 ;
  assign lcdNeedsInit_EN = CAN_FIRE_RL_init_lcd ;

  // register macAddrCnt
  assign macAddrCnt_D_IN = 11'h0 ;
  assign macAddrCnt_EN = 1'b0 ;

  // register macAddrRead
  assign macAddrRead_D_IN = 1'b0 ;
  assign macAddrRead_EN = 1'b0 ;

  // register macAddrRespCnt
  assign macAddrRespCnt_D_IN = 11'h0 ;
  assign macAddrRespCnt_EN = 1'b0 ;

  // register macV
  assign macV_D_IN = 48'h0 ;
  assign macV_EN = 1'b0 ;

  // register notFF
  assign notFF_D_IN = 1'b0 ;
  assign notFF_EN = 1'd1 ;

  // register selEepromOK
  assign selEepromOK_D_IN = 1'b0 ;
  assign selEepromOK_EN = 1'b0 ;

  // submodule a4ls
  assign a4ls_s_axi_araddr = l2hcrt_m_axi_araddr ;
  assign a4ls_s_axi_arprot = l2hcrt_m_axi_arprot ;
  assign a4ls_s_axi_awaddr = l2hcrt_m_axi_awaddr ;
  assign a4ls_s_axi_awprot = l2hcrt_m_axi_awprot ;
  assign a4ls_s_axi_wdata = l2hcrt_m_axi_wdata ;
  assign a4ls_s_axi_wstrb = l2hcrt_m_axi_wstrb ;
  assign a4ls_s_axi_awvalid = l2hcrt_m_axi_awvalid ;
  assign a4ls_s_axi_wvalid = l2hcrt_m_axi_wvalid ;
  assign a4ls_s_axi_bready = l2hcrt_m_axi_bready ;
  assign a4ls_s_axi_arvalid = l2hcrt_m_axi_arvalid ;
  assign a4ls_s_axi_rready = l2hcrt_m_axi_rready ;

  // submodule i2cC_fRequest
  assign i2cC_fRequest_D_IN = { 1'd1, v__h22499[23:17], v__h22499[15:0] } ;
  assign i2cC_fRequest_ENQ = CAN_FIRE_RL_response_iicrom ;
  assign i2cC_fRequest_DEQ = CAN_FIRE_RL_i2cC_start ;
  assign i2cC_fRequest_CLR = 1'b0 ;

  // submodule i2cC_fResponse
  assign i2cC_fResponse_D_IN =
	     { i2cC_vrReadData_7,
	       i2cC_vrReadData_6,
	       i2cC_vrReadData_5,
	       i2cC_vrReadData_4,
	       i2cC_vrReadData_3,
	       i2cC_vrReadData_2,
	       i2cC_vrReadData_1,
	       i2cC_vrReadData_0 } ;
  assign i2cC_fResponse_ENQ = CAN_FIRE_RL_i2cC_done_read ;
  assign i2cC_fResponse_DEQ = 1'b0 ;
  assign i2cC_fResponse_CLR = 1'b0 ;

  // submodule i2cC_rPlayIndex
  assign i2cC_rPlayIndex_DATA_A = 10'h0 ;
  assign i2cC_rPlayIndex_DATA_B = 10'd1023 ;
  assign i2cC_rPlayIndex_DATA_C = 10'h0 ;
  assign i2cC_rPlayIndex_DATA_F = i2cC_fRequest_D_OUT[23] ? 10'd86 : 10'd116 ;
  assign i2cC_rPlayIndex_ADDA = 1'b0 ;
  assign i2cC_rPlayIndex_ADDB =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_running_write ;
  assign i2cC_rPlayIndex_SETC = 1'b0 ;
  assign i2cC_rPlayIndex_SETF = CAN_FIRE_RL_i2cC_start ;

  // submodule i2cC_rPrescaler
  assign i2cC_rPrescaler_DATA_A = 32'h0 ;
  assign i2cC_rPrescaler_DATA_B = 32'hFFFFFFFF ;
  assign i2cC_rPrescaler_DATA_C = 32'h0 ;
  assign i2cC_rPrescaler_DATA_F = 32'd666 ;
  assign i2cC_rPrescaler_ADDA = 1'b0 ;
  assign i2cC_rPrescaler_ADDB = CAN_FIRE_RL_i2cC_update_prescaler ;
  assign i2cC_rPrescaler_SETC = 1'b0 ;
  assign i2cC_rPrescaler_SETF = CAN_FIRE_RL_i2cC_reset_prescaler ;

  // submodule idc_idcRst
  assign idc_idcRst_ASSERT_IN = CAN_FIRE_RL_idc_my_reset_condition ;

  // submodule iicrom_memory
  assign iicrom_memory_ADDR = iicPtr ;
  assign iicrom_memory_DI = 32'd0 ;
  assign iicrom_memory_WE = 1'd0 ;
  assign iicrom_memory_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // submodule iicrom_serverAdapter_outDataCore
  assign iicrom_serverAdapter_outDataCore_D_IN = iicrom_memory_DO ;
  assign iicrom_serverAdapter_outDataCore_ENQ =
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly ;
  assign iicrom_serverAdapter_outDataCore_DEQ =
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly ;
  assign iicrom_serverAdapter_outDataCore_CLR = 1'b0 ;

  // submodule l2hcrt
  assign l2hcrt_gmii_col = gmii_col ;
  assign l2hcrt_gmii_crs = gmii_crs ;
  assign l2hcrt_gmii_int = gmii_int ;
  assign l2hcrt_gmii_rx_dv = gmii_rx_dv ;
  assign l2hcrt_gmii_rx_er = gmii_rx_er ;
  assign l2hcrt_gmii_rxd = gmii_rxd ;
  assign l2hcrt_m_axi_bresp = a4ls_s_axi_bresp ;
  assign l2hcrt_m_axi_rdata = a4ls_s_axi_rdata ;
  assign l2hcrt_m_axi_rresp = a4ls_s_axi_rresp ;
  assign l2hcrt_m_axi_awready = a4ls_s_axi_awready ;
  assign l2hcrt_m_axi_wready = a4ls_s_axi_wready ;
  assign l2hcrt_m_axi_bvalid = a4ls_s_axi_bvalid ;
  assign l2hcrt_m_axi_arready = a4ls_s_axi_arready ;
  assign l2hcrt_m_axi_rvalid = a4ls_s_axi_rvalid ;

  // submodule lcd_ctrl
  assign lcd_ctrl_setLine1_text = 128'h434C4C2073656C75522063696D6F7441 ;
  assign lcd_ctrl_setLine2_text = 128'h6132302E33302E333130322074724348 ;
  assign lcd_ctrl_EN_setLine1 = CAN_FIRE_RL_init_lcd ;
  assign lcd_ctrl_EN_setLine2 = CAN_FIRE_RL_init_lcd ;

  // remaining internal signals
  assign _121583396715528419856163987__q4 = 87'h6492492492492492492493 ;
  assign _130549178157447095380771276656813203__q5 =
	     117'h192492492492492E92492492492493 ;
  assign _154742503901866210315206599__q2 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _166153498389916941667817601160445959__q3 =
	     117'h1FFFFFFC7FFFFF8FFFFFFE00000007 ;
  assign _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 =
	     _306783360__q1[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign _306783360__q1 = 117'd306783360 ;
  assign a0__h1600 = {3{i2cC_rAddress[0]}} ;
  assign a1__h1599 = {3{i2cC_rAddress[1]}} ;
  assign a2__h1598 = {3{i2cC_rAddress[2]}} ;
  assign a3__h1597 = {3{i2cC_rAddress[3]}} ;
  assign a4__h1596 = {3{i2cC_rAddress[4]}} ;
  assign a5__h1595 = {3{i2cC_rAddress[5]}} ;
  assign a6__h1594 = {3{i2cC_rAddress[6]}} ;
  assign a7__h1593 = {3{i2cC_rAddress[7]}} ;
  assign d0__h1609 = {3{i2cC_rWriteData[0]}} ;
  assign d1__h1608 = {3{i2cC_rWriteData[1]}} ;
  assign d2__h1607 = {3{i2cC_rWriteData[2]}} ;
  assign d3__h1606 = {3{i2cC_rWriteData[3]}} ;
  assign d4__h1605 = {3{i2cC_rWriteData[4]}} ;
  assign d5__h1604 = {3{i2cC_rWriteData[5]}} ;
  assign d6__h1603 = {3{i2cC_rWriteData[6]}} ;
  assign d7__h1602 = {3{i2cC_rWriteData[7]}} ;
  assign iicrom_serverAdapter_cnt_87_PLUS_IF_iicrom_ser_ETC___d193 =
	     iicrom_serverAdapter_cnt +
	     (WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_response_iicrom ? 3'd7 : 3'd0) ;
  assign s0__h1591 = {3{i2cC_rSlaveAddr[0]}} ;
  assign s1__h1590 = {3{i2cC_rSlaveAddr[1]}} ;
  assign s2__h1589 = {3{i2cC_rSlaveAddr[2]}} ;
  assign s3__h1588 = {3{i2cC_rSlaveAddr[3]}} ;
  assign s4__h1587 = {3{i2cC_rSlaveAddr[4]}} ;
  assign s5__h1586 = {3{i2cC_rSlaveAddr[5]}} ;
  assign s6__h1585 = {3{i2cC_rSlaveAddr[6]}} ;
  assign v__h22499 =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ?
	       iicrom_serverAdapter_outDataCore_D_OUT :
	       iicrom_memory_DO ;
  assign wRdData__h1611 =
	     { 3'b100,
	       s6__h1585,
	       s5__h1586,
	       s4__h1587,
	       s3__h1588,
	       s2__h1589,
	       s1__h1590,
	       s0__h1591,
	       6'd0,
	       a7__h1593,
	       a6__h1594,
	       a5__h1595,
	       a4__h1596,
	       a3__h1597,
	       a2__h1598,
	       a1__h1599,
	       a0__h1600,
	       6'd6,
	       s6__h1585,
	       s5__h1586,
	       s4__h1587,
	       s3__h1588,
	       s2__h1589,
	       s1__h1590,
	       s0__h1591,
	       36'hE00000001 } ;
  assign wWrData__h1615 =
	     { 3'b100,
	       s6__h1585,
	       s5__h1586,
	       s4__h1587,
	       s3__h1588,
	       s2__h1589,
	       s1__h1590,
	       s0__h1591,
	       6'd0,
	       a7__h1593,
	       a6__h1594,
	       a5__h1595,
	       a4__h1596,
	       a3__h1597,
	       a2__h1598,
	       a1__h1599,
	       a0__h1600,
	       3'b0,
	       d7__h1602,
	       d6__h1603,
	       d5__h1604,
	       d4__h1605,
	       d3__h1606,
	       d2__h1607,
	       d1__h1608,
	       d0__h1609,
	       6'd1 } ;

  // handling of inlined registers

  always@(posedge sys0_clk)
  begin
    if (sys0_rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        cycleCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	idc_doResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	idc_preResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	iicDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicGo <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	iicTG <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicrom_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iicrom_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lcdNeedsInit <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macAddrCnt <= `BSV_ASSIGNMENT_DELAY 11'd0;
	macAddrRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macAddrRespCnt <= `BSV_ASSIGNMENT_DELAY 11'd0;
	notFF <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selEepromOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cycleCount_EN)
	  cycleCount <= `BSV_ASSIGNMENT_DELAY cycleCount_D_IN;
	if (i2cC_rOutEn_EN)
	  i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY i2cC_rOutEn_D_IN;
	if (i2cC_rSCL_EN) i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY i2cC_rSCL_D_IN;
	if (i2cC_rSDA_EN) i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY i2cC_rSDA_D_IN;
	if (i2cC_rState_EN)
	  i2cC_rState <= `BSV_ASSIGNMENT_DELAY i2cC_rState_D_IN;
	if (idc_doResetCount_EN)
	  idc_doResetCount <= `BSV_ASSIGNMENT_DELAY idc_doResetCount_D_IN;
	if (idc_preResetCount_EN)
	  idc_preResetCount <= `BSV_ASSIGNMENT_DELAY idc_preResetCount_D_IN;
	if (iicDone_EN) iicDone <= `BSV_ASSIGNMENT_DELAY iicDone_D_IN;
	if (iicGo_EN) iicGo <= `BSV_ASSIGNMENT_DELAY iicGo_D_IN;
	if (iicPtr_EN) iicPtr <= `BSV_ASSIGNMENT_DELAY iicPtr_D_IN;
	if (iicTG_EN) iicTG <= `BSV_ASSIGNMENT_DELAY iicTG_D_IN;
	if (iicrom_serverAdapter_cnt_EN)
	  iicrom_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      iicrom_serverAdapter_cnt_D_IN;
	if (iicrom_serverAdapter_s1_EN)
	  iicrom_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      iicrom_serverAdapter_s1_D_IN;
	if (lcdNeedsInit_EN)
	  lcdNeedsInit <= `BSV_ASSIGNMENT_DELAY lcdNeedsInit_D_IN;
	if (macAddrCnt_EN)
	  macAddrCnt <= `BSV_ASSIGNMENT_DELAY macAddrCnt_D_IN;
	if (macAddrRead_EN)
	  macAddrRead <= `BSV_ASSIGNMENT_DELAY macAddrRead_D_IN;
	if (macAddrRespCnt_EN)
	  macAddrRespCnt <= `BSV_ASSIGNMENT_DELAY macAddrRespCnt_D_IN;
	if (notFF_EN) notFF <= `BSV_ASSIGNMENT_DELAY notFF_D_IN;
	if (selEepromOK_EN)
	  selEepromOK <= `BSV_ASSIGNMENT_DELAY selEepromOK_D_IN;
      end
    if (i2cC_rAddress_EN)
      i2cC_rAddress <= `BSV_ASSIGNMENT_DELAY i2cC_rAddress_D_IN;
    if (i2cC_rSlaveAddr_EN)
      i2cC_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY i2cC_rSlaveAddr_D_IN;
    if (i2cC_rWrite_EN) i2cC_rWrite <= `BSV_ASSIGNMENT_DELAY i2cC_rWrite_D_IN;
    if (i2cC_rWriteData_EN)
      i2cC_rWriteData <= `BSV_ASSIGNMENT_DELAY i2cC_rWriteData_D_IN;
    if (i2cC_vrReadData_0_EN)
      i2cC_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_0_D_IN;
    if (i2cC_vrReadData_1_EN)
      i2cC_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_1_D_IN;
    if (i2cC_vrReadData_2_EN)
      i2cC_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_2_D_IN;
    if (i2cC_vrReadData_3_EN)
      i2cC_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_3_D_IN;
    if (i2cC_vrReadData_4_EN)
      i2cC_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_4_D_IN;
    if (i2cC_vrReadData_5_EN)
      i2cC_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_5_D_IN;
    if (i2cC_vrReadData_6_EN)
      i2cC_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_6_D_IN;
    if (i2cC_vrReadData_7_EN)
      i2cC_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_7_D_IN;
    if (macV_EN) macV <= `BSV_ASSIGNMENT_DELAY macV_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycleCount = 32'hAAAAAAAA;
    i2cC_rAddress = 8'hAA;
    i2cC_rOutEn = 1'h0;
    i2cC_rSCL = 1'h0;
    i2cC_rSDA = 1'h0;
    i2cC_rSlaveAddr = 7'h2A;
    i2cC_rState = 1'h0;
    i2cC_rWrite = 1'h0;
    i2cC_rWriteData = 8'hAA;
    i2cC_vrReadData_0 = 1'h0;
    i2cC_vrReadData_1 = 1'h0;
    i2cC_vrReadData_2 = 1'h0;
    i2cC_vrReadData_3 = 1'h0;
    i2cC_vrReadData_4 = 1'h0;
    i2cC_vrReadData_5 = 1'h0;
    i2cC_vrReadData_6 = 1'h0;
    i2cC_vrReadData_7 = 1'h0;
    idc_doResetCount = 4'hA;
    idc_preResetCount = 4'hA;
    iicDone = 1'h0;
    iicGo = 1'h0;
    iicPtr = 10'h2AA;
    iicTG = 1'h0;
    iicrom_serverAdapter_cnt = 3'h2;
    iicrom_serverAdapter_s1 = 2'h2;
    lcdNeedsInit = 1'h0;
    macAddrCnt = 11'h2AA;
    macAddrRead = 1'h0;
    macAddrRespCnt = 11'h2AA;
    macV = 48'hAAAAAAAAAAAA;
    notFF = 1'h0;
    selEepromOK = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge sys0_clk)
  begin
    #0;
    if (sys0_rst_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_simulationTermination) $finish(32'd1);
    if (sys0_rst_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_iicrom_serverAdapter_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkFTop_kc705

