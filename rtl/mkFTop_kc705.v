//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Wed Feb 20 20:27:05 EST 2013
//
// Method conflict info:
// Method: led
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_db
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_e
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_rs
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: lcd_rw
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_rx_rxd
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_en
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_er
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_col
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
//
// Ports:
// Name                         I/O  size props
// led                            O     8 reg
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// rxclkBnd                       O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// gmii_tx_tx_clk                 O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// gmii_rstn                      O     1 reset
// sys0_clk                       I     1 clock
// sys0_rstn                      I     1 reset
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// i2cpad_sda                    IO     1 inout
// i2cpad_scl                    IO     1 inout
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFTop_kc705(sys0_clk,
		    sys0_rstn,
		    sys1_clkp,
		    sys1_clkn,
		    gmii_rx_clk,

		    .i2cpad_sda(i2cC_tSDA_IO),
		    .i2cpad_scl(i2cC_tSCL_IO),
		    .mdio_mdd(mdi_tMDD_IO),
		    .mdio_mdc(mdi_tMDC_IO),

		    led,

		    lcd_db,

		    lcd_e,

		    lcd_rs,

		    lcd_rw,

		    gmii_rx_rxd_i,

		    gmii_rx_rx_dv_i,

		    gmii_rx_rx_er_i,

		    gmii_tx_txd,

		    gmii_tx_tx_en,

		    gmii_tx_tx_er,

		    gmii_col_i,

		    gmii_crs_i,

		    gmii_intr_i,

		    gmii_led,

		    rxclkBnd,
		    CLK_GATE_rxclkBnd,

		    gmii_tx_tx_clk,
		    CLK_GATE_gmii_tx_tx_clk,

		    gmii_rstn);
  input  sys0_clk;
  input  sys0_rstn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;

  inout  i2cC_tSDA_IO;
  inout  i2cC_tSCL_IO;
  inout  mdi_tMDD_IO;
  inout  mdi_tMDC_IO;

  // value method led
  output [7 : 0] led;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock rxclkBnd
  output rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock gmii_tx_tx_clk
  output gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // output resets
  output gmii_rstn;

  // signals for module outputs
  wire [7 : 0] gmii_tx_txd, led;
  wire [3 : 0] lcd_db;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       gmii_led,
       gmii_rstn,
       gmii_tx_tx_clk,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       lcd_e,
       lcd_rs,
       lcd_rw,
       rxclkBnd;

  // inlined wires
  wire iicrom_serverAdapter_outData_enqData_whas,
       iicrom_serverAdapter_outData_outData_whas;

  // register cycleCount
  reg [31 : 0] cycleCount;
  wire [31 : 0] cycleCount_D_IN;
  wire cycleCount_EN;

  // register i2cC_rAddress
  reg [7 : 0] i2cC_rAddress;
  wire [7 : 0] i2cC_rAddress_D_IN;
  wire i2cC_rAddress_EN;

  // register i2cC_rOutEn
  reg i2cC_rOutEn;
  wire i2cC_rOutEn_D_IN, i2cC_rOutEn_EN;

  // register i2cC_rSCL
  reg i2cC_rSCL;
  wire i2cC_rSCL_D_IN, i2cC_rSCL_EN;

  // register i2cC_rSDA
  reg i2cC_rSDA;
  wire i2cC_rSDA_D_IN, i2cC_rSDA_EN;

  // register i2cC_rSlaveAddr
  reg [6 : 0] i2cC_rSlaveAddr;
  wire [6 : 0] i2cC_rSlaveAddr_D_IN;
  wire i2cC_rSlaveAddr_EN;

  // register i2cC_rState
  reg i2cC_rState;
  wire i2cC_rState_D_IN, i2cC_rState_EN;

  // register i2cC_rWrite
  reg i2cC_rWrite;
  wire i2cC_rWrite_D_IN, i2cC_rWrite_EN;

  // register i2cC_rWriteData
  reg [7 : 0] i2cC_rWriteData;
  wire [7 : 0] i2cC_rWriteData_D_IN;
  wire i2cC_rWriteData_EN;

  // register i2cC_vrReadData_0
  reg i2cC_vrReadData_0;
  wire i2cC_vrReadData_0_D_IN, i2cC_vrReadData_0_EN;

  // register i2cC_vrReadData_1
  reg i2cC_vrReadData_1;
  wire i2cC_vrReadData_1_D_IN, i2cC_vrReadData_1_EN;

  // register i2cC_vrReadData_2
  reg i2cC_vrReadData_2;
  wire i2cC_vrReadData_2_D_IN, i2cC_vrReadData_2_EN;

  // register i2cC_vrReadData_3
  reg i2cC_vrReadData_3;
  wire i2cC_vrReadData_3_D_IN, i2cC_vrReadData_3_EN;

  // register i2cC_vrReadData_4
  reg i2cC_vrReadData_4;
  wire i2cC_vrReadData_4_D_IN, i2cC_vrReadData_4_EN;

  // register i2cC_vrReadData_5
  reg i2cC_vrReadData_5;
  wire i2cC_vrReadData_5_D_IN, i2cC_vrReadData_5_EN;

  // register i2cC_vrReadData_6
  reg i2cC_vrReadData_6;
  wire i2cC_vrReadData_6_D_IN, i2cC_vrReadData_6_EN;

  // register i2cC_vrReadData_7
  reg i2cC_vrReadData_7;
  wire i2cC_vrReadData_7_D_IN, i2cC_vrReadData_7_EN;

  // register idc_doResetCount
  reg [3 : 0] idc_doResetCount;
  wire [3 : 0] idc_doResetCount_D_IN;
  wire idc_doResetCount_EN;

  // register idc_preResetCount
  reg [3 : 0] idc_preResetCount;
  wire [3 : 0] idc_preResetCount_D_IN;
  wire idc_preResetCount_EN;

  // register iicDone
  reg iicDone;
  wire iicDone_D_IN, iicDone_EN;

  // register iicGo
  reg iicGo;
  wire iicGo_D_IN, iicGo_EN;

  // register iicPtr
  reg [9 : 0] iicPtr;
  wire [9 : 0] iicPtr_D_IN;
  wire iicPtr_EN;

  // register iicTG
  reg iicTG;
  wire iicTG_D_IN, iicTG_EN;

  // register iicrom_serverAdapter_cnt
  reg [2 : 0] iicrom_serverAdapter_cnt;
  wire [2 : 0] iicrom_serverAdapter_cnt_D_IN;
  wire iicrom_serverAdapter_cnt_EN;

  // register iicrom_serverAdapter_s1
  reg [1 : 0] iicrom_serverAdapter_s1;
  wire [1 : 0] iicrom_serverAdapter_s1_D_IN;
  wire iicrom_serverAdapter_s1_EN;

  // register l2qc_ptr
  reg [1 : 0] l2qc_ptr;
  wire [1 : 0] l2qc_ptr_D_IN;
  wire l2qc_ptr_EN;

  // register l2qc_sr
  reg [29 : 0] l2qc_sr;
  wire [29 : 0] l2qc_sr_D_IN;
  wire l2qc_sr_EN;

  // register lcdNeedsInit
  reg lcdNeedsInit;
  wire lcdNeedsInit_D_IN, lcdNeedsInit_EN;

  // register macAddrCnt
  reg [10 : 0] macAddrCnt;
  wire [10 : 0] macAddrCnt_D_IN;
  wire macAddrCnt_EN;

  // register macAddrRead
  reg macAddrRead;
  wire macAddrRead_D_IN, macAddrRead_EN;

  // register macAddrRespCnt
  reg [10 : 0] macAddrRespCnt;
  wire [10 : 0] macAddrRespCnt_D_IN;
  wire macAddrRespCnt_EN;

  // register macV
  reg [47 : 0] macV;
  wire [47 : 0] macV_D_IN;
  wire macV_EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC_D_IN, mdi_rMDC_EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD_D_IN, mdi_rMDD_EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn_D_IN, mdi_rOutEn_EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr_D_IN;
  wire mdi_rPhyAddr_EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr_D_IN;
  wire mdi_rRegAddr_EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState_D_IN, mdi_rState_EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite_D_IN, mdi_rWrite_EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData_D_IN;
  wire mdi_rWriteData_EN;

  // register mdi_vrReadData_0
  reg mdi_vrReadData_0;
  wire mdi_vrReadData_0_D_IN, mdi_vrReadData_0_EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1_D_IN, mdi_vrReadData_1_EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10_D_IN, mdi_vrReadData_10_EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11_D_IN, mdi_vrReadData_11_EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12_D_IN, mdi_vrReadData_12_EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13_D_IN, mdi_vrReadData_13_EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14_D_IN, mdi_vrReadData_14_EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15_D_IN, mdi_vrReadData_15_EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2_D_IN, mdi_vrReadData_2_EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3_D_IN, mdi_vrReadData_3_EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4_D_IN, mdi_vrReadData_4_EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5_D_IN, mdi_vrReadData_5_EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6_D_IN, mdi_vrReadData_6_EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7_D_IN, mdi_vrReadData_7_EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8_D_IN, mdi_vrReadData_8_EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9_D_IN, mdi_vrReadData_9_EN;

  // register notFF
  reg notFF;
  wire notFF_D_IN, notFF_EN;

  // register qcl2_ptr
  reg [1 : 0] qcl2_ptr;
  wire [1 : 0] qcl2_ptr_D_IN;
  wire qcl2_ptr_EN;

  // register selEepromOK
  reg selEepromOK;
  wire selEepromOK_D_IN, selEepromOK_EN;

  // ports of submodule a4ls
  wire [31 : 0] a4ls_ARADDR, a4ls_AWADDR, a4ls_RDATA, a4ls_WDATA;
  wire [3 : 0] a4ls_WSTRB;
  wire [2 : 0] a4ls_ARPROT, a4ls_AWPROT;
  wire [1 : 0] a4ls_BRESP, a4ls_RRESP;
  wire a4ls_ARREADY,
       a4ls_ARVALID,
       a4ls_AWREADY,
       a4ls_AWVALID,
       a4ls_BREADY,
       a4ls_BVALID,
       a4ls_RREADY,
       a4ls_RVALID,
       a4ls_WREADY,
       a4ls_WVALID;

  // ports of submodule crt2axi
  wire [39 : 0] crt2axi_crtS0_response_get;
  wire [35 : 0] crt2axi_axiM0_wrData_data;
  wire [34 : 0] crt2axi_axiM0_rdAddr_data, crt2axi_axiM0_wrAddr_data;
  wire [33 : 0] crt2axi_axiM0_rdResp_data_value;
  wire [31 : 0] crt2axi_crtS0_request_put;
  wire [1 : 0] crt2axi_axiM0_wrResp_data_value;
  wire crt2axi_EN_crtS0_request_put,
       crt2axi_EN_crtS0_response_get,
       crt2axi_RDY_crtS0_request_put,
       crt2axi_RDY_crtS0_response_get,
       crt2axi_axiM0_rdAddr_ready_value,
       crt2axi_axiM0_rdAddr_valid,
       crt2axi_axiM0_rdResp_ready,
       crt2axi_axiM0_rdResp_valid_value,
       crt2axi_axiM0_wrAddr_ready_value,
       crt2axi_axiM0_wrAddr_valid,
       crt2axi_axiM0_wrData_ready_value,
       crt2axi_axiM0_wrData_valid,
       crt2axi_axiM0_wrResp_ready,
       crt2axi_axiM0_wrResp_valid_value;

  // ports of submodule gmac
  wire [9 : 0] gmac_rx_get, gmac_tx_put;
  wire [7 : 0] gmac_gmii_rx_rxd_i, gmac_gmii_tx_txd;
  wire gmac_CLK_gmii_tx_tx_clk,
       gmac_CLK_rxclkBnd,
       gmac_EN_rxOperate,
       gmac_EN_rx_get,
       gmac_EN_txOperate,
       gmac_EN_tx_put,
       gmac_RDY_rx_get,
       gmac_RDY_tx_put,
       gmac_gmii_col_i,
       gmac_gmii_crs_i,
       gmac_gmii_intr_i,
       gmac_gmii_led,
       gmac_gmii_rx_rx_dv_i,
       gmac_gmii_rx_rx_er_i,
       gmac_gmii_tx_tx_en,
       gmac_gmii_tx_tx_er;

  // ports of submodule i2cC_fRequest
  wire [23 : 0] i2cC_fRequest_D_IN, i2cC_fRequest_D_OUT;
  wire i2cC_fRequest_CLR,
       i2cC_fRequest_DEQ,
       i2cC_fRequest_EMPTY_N,
       i2cC_fRequest_ENQ,
       i2cC_fRequest_FULL_N;

  // ports of submodule i2cC_fResponse
  wire [7 : 0] i2cC_fResponse_D_IN;
  wire i2cC_fResponse_CLR,
       i2cC_fResponse_DEQ,
       i2cC_fResponse_ENQ,
       i2cC_fResponse_FULL_N;

  // ports of submodule i2cC_rPlayIndex
  wire [9 : 0] i2cC_rPlayIndex_DATA_A,
	       i2cC_rPlayIndex_DATA_B,
	       i2cC_rPlayIndex_DATA_C,
	       i2cC_rPlayIndex_DATA_F,
	       i2cC_rPlayIndex_Q_OUT;
  wire i2cC_rPlayIndex_ADDA,
       i2cC_rPlayIndex_ADDB,
       i2cC_rPlayIndex_SETC,
       i2cC_rPlayIndex_SETF;

  // ports of submodule i2cC_rPrescaler
  wire [31 : 0] i2cC_rPrescaler_DATA_A,
		i2cC_rPrescaler_DATA_B,
		i2cC_rPrescaler_DATA_C,
		i2cC_rPrescaler_DATA_F,
		i2cC_rPrescaler_Q_OUT;
  wire i2cC_rPrescaler_ADDA,
       i2cC_rPrescaler_ADDB,
       i2cC_rPrescaler_SETC,
       i2cC_rPrescaler_SETF;

  // ports of submodule i2cC_tSCL
  wire i2cC_tSCL_IO;

  // ports of submodule i2cC_tSDA
  wire i2cC_tSDA_IO, i2cC_tSDA_O;

  // ports of submodule idc_idcRst
  wire idc_idcRst_ASSERT_IN, idc_idcRst_OUT_RST;

  // ports of submodule idc_resetP
  wire idc_resetP_RESET_OUT;

  // ports of submodule iicrom_memory
  wire [31 : 0] iicrom_memory_DI, iicrom_memory_DO;
  wire [9 : 0] iicrom_memory_ADDR;
  wire iicrom_memory_EN, iicrom_memory_WE;

  // ports of submodule iicrom_serverAdapter_outDataCore
  wire [31 : 0] iicrom_serverAdapter_outDataCore_D_IN,
		iicrom_serverAdapter_outDataCore_D_OUT;
  wire iicrom_serverAdapter_outDataCore_CLR,
       iicrom_serverAdapter_outDataCore_DEQ,
       iicrom_serverAdapter_outDataCore_EMPTY_N,
       iicrom_serverAdapter_outDataCore_ENQ,
       iicrom_serverAdapter_outDataCore_FULL_N;

  // ports of submodule l2P
  wire [47 : 0] l2P_macAddr_u;
  wire [9 : 0] l2P_client_request_get,
	       l2P_client_response_put,
	       l2P_server_request_put,
	       l2P_server_response_get;
  wire l2P_EN_client_request_get,
       l2P_EN_client_response_put,
       l2P_EN_macAddr,
       l2P_EN_server_request_put,
       l2P_EN_server_response_get,
       l2P_RDY_client_request_get,
       l2P_RDY_client_response_put,
       l2P_RDY_server_request_put,
       l2P_RDY_server_response_get;

  // ports of submodule l2qc_inF
  wire [9 : 0] l2qc_inF_D_IN, l2qc_inF_D_OUT;
  wire l2qc_inF_CLR,
       l2qc_inF_DEQ,
       l2qc_inF_EMPTY_N,
       l2qc_inF_ENQ,
       l2qc_inF_FULL_N;

  // ports of submodule l2qc_outF
  wire [39 : 0] l2qc_outF_D_IN, l2qc_outF_D_OUT;
  wire l2qc_outF_CLR,
       l2qc_outF_DEQ,
       l2qc_outF_EMPTY_N,
       l2qc_outF_ENQ,
       l2qc_outF_FULL_N;

  // ports of submodule lcd_ctrl
  wire [127 : 0] lcd_ctrl_setLine1_text, lcd_ctrl_setLine2_text;
  wire [3 : 0] lcd_ctrl_db;
  wire lcd_ctrl_EN_setLine1,
       lcd_ctrl_EN_setLine2,
       lcd_ctrl_e,
       lcd_ctrl_rs,
       lcd_ctrl_rw;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest_D_IN, mdi_fRequest_D_OUT;
  wire mdi_fRequest_CLR,
       mdi_fRequest_DEQ,
       mdi_fRequest_EMPTY_N,
       mdi_fRequest_ENQ;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse_D_IN;
  wire mdi_fResponse_CLR,
       mdi_fResponse_DEQ,
       mdi_fResponse_ENQ,
       mdi_fResponse_FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex_DATA_A,
	       mdi_rPlayIndex_DATA_B,
	       mdi_rPlayIndex_DATA_C,
	       mdi_rPlayIndex_DATA_F,
	       mdi_rPlayIndex_Q_OUT;
  wire mdi_rPlayIndex_ADDA,
       mdi_rPlayIndex_ADDB,
       mdi_rPlayIndex_SETC,
       mdi_rPlayIndex_SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler_DATA_A,
	       mdi_rPrescaler_DATA_B,
	       mdi_rPrescaler_DATA_C,
	       mdi_rPrescaler_DATA_F,
	       mdi_rPrescaler_Q_OUT;
  wire mdi_rPrescaler_ADDA,
       mdi_rPrescaler_ADDB,
       mdi_rPrescaler_SETC,
       mdi_rPrescaler_SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC_IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD_IO, mdi_tMDD_O;

  // ports of submodule qcl2_inF
  wire [39 : 0] qcl2_inF_D_IN, qcl2_inF_D_OUT;
  wire qcl2_inF_CLR,
       qcl2_inF_DEQ,
       qcl2_inF_EMPTY_N,
       qcl2_inF_ENQ,
       qcl2_inF_FULL_N;

  // ports of submodule qcl2_outF
  wire [9 : 0] qcl2_outF_D_IN, qcl2_outF_D_OUT;
  wire qcl2_outF_CLR,
       qcl2_outF_DEQ,
       qcl2_outF_EMPTY_N,
       qcl2_outF_ENQ,
       qcl2_outF_FULL_N;

  // ports of submodule sys0_rst
  wire sys0_rst_OUT_RST;

  // ports of submodule sys1_clk
  wire sys1_clk_O;

  // ports of submodule sys1_clki
  wire sys1_clki_O;

  // ports of submodule sys1_rst
  wire sys1_rst_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4lm_doAlways,
       CAN_FIRE_RL_cycleCountAdvance,
       CAN_FIRE_RL_doAlways,
       CAN_FIRE_RL_gmacOperate,
       CAN_FIRE_RL_i2cC_done_read,
       CAN_FIRE_RL_i2cC_done_write,
       CAN_FIRE_RL_i2cC_reset_prescaler,
       CAN_FIRE_RL_i2cC_running_read,
       CAN_FIRE_RL_i2cC_running_write,
       CAN_FIRE_RL_i2cC_start,
       CAN_FIRE_RL_i2cC_update_prescaler,
       CAN_FIRE_RL_idc_do_reset,
       CAN_FIRE_RL_idc_my_reset_condition,
       CAN_FIRE_RL_idc_pre_reset,
       CAN_FIRE_RL_iicTG__dreg_update,
       CAN_FIRE_RL_iic_go_set,
       CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd,
       CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore,
       CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq,
       CAN_FIRE_RL_iicrom_serverAdapter_overRun,
       CAN_FIRE_RL_iicrom_serverAdapter_s1__dreg_update,
       CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
       CAN_FIRE_RL_init_lcd,
       CAN_FIRE_RL_l2qc_unfunnel,
       CAN_FIRE_RL_mdi_reset_prescaler,
       CAN_FIRE_RL_mdi_run_frame,
       CAN_FIRE_RL_mdi_start,
       CAN_FIRE_RL_mdi_update_prescaler,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_notFF__dreg_update,
       CAN_FIRE_RL_qcl2_funnel,
       CAN_FIRE_RL_request_iicrom,
       CAN_FIRE_RL_response_iicrom,
       CAN_FIRE_RL_simulationTermination,
       CAN_FIRE_RL_uAddr_clock_domain_crossing,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_a4lm_doAlways,
       WILL_FIRE_RL_cycleCountAdvance,
       WILL_FIRE_RL_doAlways,
       WILL_FIRE_RL_gmacOperate,
       WILL_FIRE_RL_i2cC_done_read,
       WILL_FIRE_RL_i2cC_done_write,
       WILL_FIRE_RL_i2cC_reset_prescaler,
       WILL_FIRE_RL_i2cC_running_read,
       WILL_FIRE_RL_i2cC_running_write,
       WILL_FIRE_RL_i2cC_start,
       WILL_FIRE_RL_i2cC_update_prescaler,
       WILL_FIRE_RL_idc_do_reset,
       WILL_FIRE_RL_idc_my_reset_condition,
       WILL_FIRE_RL_idc_pre_reset,
       WILL_FIRE_RL_iicTG__dreg_update,
       WILL_FIRE_RL_iic_go_set,
       WILL_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd,
       WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore,
       WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq,
       WILL_FIRE_RL_iicrom_serverAdapter_overRun,
       WILL_FIRE_RL_iicrom_serverAdapter_s1__dreg_update,
       WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
       WILL_FIRE_RL_init_lcd,
       WILL_FIRE_RL_l2qc_unfunnel,
       WILL_FIRE_RL_mdi_reset_prescaler,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_mdi_start,
       WILL_FIRE_RL_mdi_update_prescaler,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_notFF__dreg_update,
       WILL_FIRE_RL_qcl2_funnel,
       WILL_FIRE_RL_request_iicrom,
       WILL_FIRE_RL_response_iicrom,
       WILL_FIRE_RL_simulationTermination,
       WILL_FIRE_RL_uAddr_clock_domain_crossing,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // inputs to muxes for submodule ports
  wire MUX_i2cC_rOutEn_write_1__SEL_1,
       MUX_i2cC_rOutEn_write_1__SEL_2,
       MUX_i2cC_rOutEn_write_1__VAL_1,
       MUX_i2cC_rOutEn_write_1__VAL_2,
       MUX_i2cC_rSCL_write_1__VAL_1,
       MUX_i2cC_rSCL_write_1__VAL_2,
       MUX_i2cC_rSDA_write_1__VAL_1,
       MUX_i2cC_rSDA_write_1__VAL_2,
       MUX_i2cC_rState_write_1__SEL_1,
       MUX_iicGo_write_1__SEL_1,
       MUX_mdi_rState_write_1__SEL_1;

  // remaining internal signals
  reg [7 : 0] SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377;
  reg [1 : 0] CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q6,
	      CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q5,
	      CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q4,
	      CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q7,
	      CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q1,
	      CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q3,
	      CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q19,
	      CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q8,
	      CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q10,
	      CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q11,
	      CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q9,
	      CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q2;
  reg CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13,
      CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14,
      SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369;
  wire [194 : 0] _1434766110945527031733894725304609466537681244_ETC__q20,
		 _643371375338640__q21,
		 bs__h21756,
		 bs__h34515;
  wire [116 : 0] _130549178157447095380771276656813203__q18,
		 _166153498389916941667817601160445959__q16,
		 _306783360__q12,
		 wRdData__h1748;
  wire [86 : 0] _121583396715528419856163987__q17,
		_154742503901866210315206599__q15,
		wWrData__h1752;
  wire [31 : 0] v__h51390;
  wire [15 : 0] x_data__h37792;
  wire [9 : 0] IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d393,
	       IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d394,
	       IF_l2qc_inF_first__99_BITS_9_TO_8_00_EQ_0_01_O_ETC___d337,
	       IF_l2qc_sr_06_BITS_19_TO_18_07_EQ_0_08_OR_l2qc_ETC___d317,
	       IF_l2qc_sr_06_BITS_9_TO_8_18_EQ_0_19_OR_l2qc_s_ETC___d328;
  wire [2 : 0] a0__h1737,
	       a1__h1736,
	       a2__h1735,
	       a3__h1734,
	       a4__h1733,
	       a5__h1732,
	       a6__h1731,
	       a7__h1730,
	       d0__h1746,
	       d0__h21382,
	       d10__h21372,
	       d11__h21371,
	       d12__h21370,
	       d13__h21369,
	       d14__h21368,
	       d15__h21367,
	       d1__h1745,
	       d1__h21381,
	       d2__h1744,
	       d2__h21380,
	       d3__h1743,
	       d3__h21379,
	       d4__h1742,
	       d4__h21378,
	       d5__h1741,
	       d5__h21377,
	       d6__h1740,
	       d6__h21376,
	       d7__h1739,
	       d7__h21375,
	       d8__h21374,
	       d9__h21373,
	       iicrom_serverAdapter_cnt_83_PLUS_IF_iicrom_ser_ETC___d589,
	       pa0__h21359,
	       pa1__h21358,
	       pa2__h21357,
	       pa3__h21356,
	       pa4__h21355,
	       ra0__h21365,
	       ra1__h21364,
	       ra2__h21363,
	       ra3__h21362,
	       ra4__h21361,
	       s0__h1728,
	       s1__h1727,
	       s2__h1726,
	       s3__h1725,
	       s4__h1724,
	       s5__h1723,
	       s6__h1722;
  wire _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108;

  // oscillator and gates for output clock rxclkBnd
  assign rxclkBnd = gmac_CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_tx_clk
  assign gmii_tx_tx_clk = gmac_CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // output resets
  assign gmii_rstn = sys1_rst_OUT_RST ;

  // value method led
  assign led = { cycleCount[31:28], notFF, iicTG, iicDone, iicGo } ;

  // value method lcd_db
  assign lcd_db = lcd_ctrl_db ;

  // value method lcd_e
  assign lcd_e = lcd_ctrl_e ;

  // value method lcd_rs
  assign lcd_rs = lcd_ctrl_rs ;

  // value method lcd_rw
  assign lcd_rw = lcd_ctrl_rw ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac_gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac_gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac_gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gmac_gmii_led ;

  // submodule a4ls
  mkA4LS #(.hasDebugLogic(1'd1)) a4ls(.ACLK(sys1_clk_O),
				      .ARESETN(sys1_rst_OUT_RST),
				      .ARADDR(a4ls_ARADDR),
				      .ARPROT(a4ls_ARPROT),
				      .AWADDR(a4ls_AWADDR),
				      .AWPROT(a4ls_AWPROT),
				      .WDATA(a4ls_WDATA),
				      .WSTRB(a4ls_WSTRB),
				      .AWVALID(a4ls_AWVALID),
				      .WVALID(a4ls_WVALID),
				      .BREADY(a4ls_BREADY),
				      .ARVALID(a4ls_ARVALID),
				      .RREADY(a4ls_RREADY),
				      .AWREADY(a4ls_AWREADY),
				      .WREADY(a4ls_WREADY),
				      .BVALID(a4ls_BVALID),
				      .BRESP(a4ls_BRESP),
				      .ARREADY(a4ls_ARREADY),
				      .RVALID(a4ls_RVALID),
				      .RDATA(a4ls_RDATA),
				      .RRESP(a4ls_RRESP));

  // submodule crt2axi
  mkHCrtCompleter2Axi crt2axi(.CLK(sys1_clk_O),
			      .RST_N(sys1_rst_OUT_RST),
			      .axiM0_rdAddr_ready_value(crt2axi_axiM0_rdAddr_ready_value),
			      .axiM0_rdResp_data_value(crt2axi_axiM0_rdResp_data_value),
			      .axiM0_rdResp_valid_value(crt2axi_axiM0_rdResp_valid_value),
			      .axiM0_wrAddr_ready_value(crt2axi_axiM0_wrAddr_ready_value),
			      .axiM0_wrData_ready_value(crt2axi_axiM0_wrData_ready_value),
			      .axiM0_wrResp_data_value(crt2axi_axiM0_wrResp_data_value),
			      .axiM0_wrResp_valid_value(crt2axi_axiM0_wrResp_valid_value),
			      .crtS0_request_put(crt2axi_crtS0_request_put),
			      .EN_crtS0_request_put(crt2axi_EN_crtS0_request_put),
			      .EN_crtS0_response_get(crt2axi_EN_crtS0_response_get),
			      .RDY_crtS0_request_put(crt2axi_RDY_crtS0_request_put),
			      .crtS0_response_get(crt2axi_crtS0_response_get),
			      .RDY_crtS0_response_get(crt2axi_RDY_crtS0_response_get),
			      .axiM0_wrAddr_data(crt2axi_axiM0_wrAddr_data),
			      .axiM0_wrAddr_valid(crt2axi_axiM0_wrAddr_valid),
			      .axiM0_wrData_data(crt2axi_axiM0_wrData_data),
			      .axiM0_wrData_valid(crt2axi_axiM0_wrData_valid),
			      .axiM0_wrResp_ready(crt2axi_axiM0_wrResp_ready),
			      .axiM0_rdAddr_data(crt2axi_axiM0_rdAddr_data),
			      .axiM0_rdAddr_valid(crt2axi_axiM0_rdAddr_valid),
			      .axiM0_rdResp_ready(crt2axi_axiM0_rdResp_ready),
			      .isActive(),
			      .RDY_isActive(),
			      .isFaulted(),
			      .RDY_isFaulted());

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(gmii_rx_clk),
	      .CLK_txClk(sys1_clk_O),
	      .CLK(sys1_clk_O),
	      .RST_N(sys1_rst_OUT_RST),
	      .gmii_col_i(gmac_gmii_col_i),
	      .gmii_crs_i(gmac_gmii_crs_i),
	      .gmii_intr_i(gmac_gmii_intr_i),
	      .gmii_rx_rx_dv_i(gmac_gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac_gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac_gmii_rx_rxd_i),
	      .tx_put(gmac_tx_put),
	      .EN_rx_get(gmac_EN_rx_get),
	      .EN_tx_put(gmac_EN_tx_put),
	      .EN_rxOperate(gmac_EN_rxOperate),
	      .EN_txOperate(gmac_EN_txOperate),
	      .gmii_tx_txd(gmac_gmii_tx_txd),
	      .gmii_tx_tx_en(gmac_gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac_gmii_tx_tx_er),
	      .gmii_led(gmac_gmii_led),
	      .rx_get(gmac_rx_get),
	      .RDY_rx_get(gmac_RDY_rx_get),
	      .RDY_tx_put(gmac_RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_tx_tx_clk(gmac_CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac_CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule i2cC_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fRequest(.RST(sys0_rst_OUT_RST),
					     .CLK(sys0_clk),
					     .D_IN(i2cC_fRequest_D_IN),
					     .ENQ(i2cC_fRequest_ENQ),
					     .DEQ(i2cC_fRequest_DEQ),
					     .CLR(i2cC_fRequest_CLR),
					     .D_OUT(i2cC_fRequest_D_OUT),
					     .FULL_N(i2cC_fRequest_FULL_N),
					     .EMPTY_N(i2cC_fRequest_EMPTY_N));

  // submodule i2cC_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fResponse(.RST(sys0_rst_OUT_RST),
					      .CLK(sys0_clk),
					      .D_IN(i2cC_fResponse_D_IN),
					      .ENQ(i2cC_fResponse_ENQ),
					      .DEQ(i2cC_fResponse_DEQ),
					      .CLR(i2cC_fResponse_CLR),
					      .D_OUT(),
					      .FULL_N(i2cC_fResponse_FULL_N),
					      .EMPTY_N());

  // submodule i2cC_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) i2cC_rPlayIndex(.CLK(sys0_clk),
							  .RST(sys0_rst_OUT_RST),
							  .DATA_A(i2cC_rPlayIndex_DATA_A),
							  .DATA_B(i2cC_rPlayIndex_DATA_B),
							  .DATA_C(i2cC_rPlayIndex_DATA_C),
							  .DATA_F(i2cC_rPlayIndex_DATA_F),
							  .ADDA(i2cC_rPlayIndex_ADDA),
							  .ADDB(i2cC_rPlayIndex_ADDB),
							  .SETC(i2cC_rPlayIndex_SETC),
							  .SETF(i2cC_rPlayIndex_SETF),
							  .Q_OUT(i2cC_rPlayIndex_Q_OUT));

  // submodule i2cC_rPrescaler
  Counter #(.width(32'd32), .init(32'd666)) i2cC_rPrescaler(.CLK(sys0_clk),
							    .RST(sys0_rst_OUT_RST),
							    .DATA_A(i2cC_rPrescaler_DATA_A),
							    .DATA_B(i2cC_rPrescaler_DATA_B),
							    .DATA_C(i2cC_rPrescaler_DATA_C),
							    .DATA_F(i2cC_rPrescaler_DATA_F),
							    .ADDA(i2cC_rPrescaler_ADDA),
							    .ADDB(i2cC_rPrescaler_ADDB),
							    .SETC(i2cC_rPrescaler_SETC),
							    .SETF(i2cC_rPrescaler_SETF),
							    .Q_OUT(i2cC_rPrescaler_Q_OUT));

  // submodule i2cC_tSCL
  TriState #(.width(32'd1)) i2cC_tSCL(.I(i2cC_rSCL),
				      .OE(1'd1),
				      .O(),
				      .IO(i2cC_tSCL_IO));

  // submodule i2cC_tSDA
  TriState #(.width(32'd1)) i2cC_tSDA(.I(i2cC_rSDA),
				      .OE(i2cC_rOutEn),
				      .O(i2cC_tSDA_O),
				      .IO(i2cC_tSDA_IO));

  // submodule idc
  IDELAYCTRL idc(.REFCLK(sys0_clk), .RST(idc_resetP_RESET_OUT), .RDY());

  // submodule idc_idcRst
  MakeResetA #(.RSTDELAY(32'd1), .init(1'd0)) idc_idcRst(.CLK(sys0_clk),
							 .RST(sys0_rst_OUT_RST),
							 .DST_CLK(sys0_clk),
							 .ASSERT_IN(idc_idcRst_ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST(idc_idcRst_OUT_RST));

  // submodule idc_resetP
  ResetInverter idc_resetP(.RESET_IN(idc_idcRst_OUT_RST),
			   .RESET_OUT(idc_resetP_RESET_OUT));

  // submodule iicrom_memory
  BRAM1Load #(.FILENAME("../../../../data/hdmi_iic.hex"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd0)) iicrom_memory(.CLK(sys0_clk),
					   .ADDR(iicrom_memory_ADDR),
					   .DI(iicrom_memory_DI),
					   .WE(iicrom_memory_WE),
					   .EN(iicrom_memory_EN),
					   .DO(iicrom_memory_DO));

  // submodule iicrom_serverAdapter_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) iicrom_serverAdapter_outDataCore(.RST(sys0_rst_OUT_RST),
								.CLK(sys0_clk),
								.D_IN(iicrom_serverAdapter_outDataCore_D_IN),
								.ENQ(iicrom_serverAdapter_outDataCore_ENQ),
								.DEQ(iicrom_serverAdapter_outDataCore_DEQ),
								.CLR(iicrom_serverAdapter_outDataCore_CLR),
								.D_OUT(iicrom_serverAdapter_outDataCore_D_OUT),
								.FULL_N(iicrom_serverAdapter_outDataCore_FULL_N),
								.EMPTY_N(iicrom_serverAdapter_outDataCore_EMPTY_N));

  // submodule l2P
  mkL2Proc l2P(.CLK(sys1_clk_O),
	       .RST_N(sys1_rst_OUT_RST),
	       .client_response_put(l2P_client_response_put),
	       .macAddr_u(l2P_macAddr_u),
	       .server_request_put(l2P_server_request_put),
	       .EN_server_request_put(l2P_EN_server_request_put),
	       .EN_server_response_get(l2P_EN_server_response_get),
	       .EN_client_request_get(l2P_EN_client_request_get),
	       .EN_client_response_put(l2P_EN_client_response_put),
	       .EN_macAddr(l2P_EN_macAddr),
	       .RDY_server_request_put(l2P_RDY_server_request_put),
	       .server_response_get(l2P_server_response_get),
	       .RDY_server_response_get(l2P_RDY_server_response_get),
	       .client_request_get(l2P_client_request_get),
	       .RDY_client_request_get(l2P_RDY_client_request_get),
	       .RDY_client_response_put(l2P_RDY_client_response_put),
	       .RDY_macAddr(),
	       .l2Rx(),
	       .RDY_l2Rx(),
	       .l2Tx(),
	       .RDY_l2Tx());

  // submodule l2qc_inF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) l2qc_inF(.RST(sys1_rst_OUT_RST),
						    .CLK(sys1_clk_O),
						    .D_IN(l2qc_inF_D_IN),
						    .ENQ(l2qc_inF_ENQ),
						    .DEQ(l2qc_inF_DEQ),
						    .CLR(l2qc_inF_CLR),
						    .D_OUT(l2qc_inF_D_OUT),
						    .FULL_N(l2qc_inF_FULL_N),
						    .EMPTY_N(l2qc_inF_EMPTY_N));

  // submodule l2qc_outF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) l2qc_outF(.RST(sys1_rst_OUT_RST),
						     .CLK(sys1_clk_O),
						     .D_IN(l2qc_outF_D_IN),
						     .ENQ(l2qc_outF_ENQ),
						     .DEQ(l2qc_outF_DEQ),
						     .CLR(l2qc_outF_CLR),
						     .D_OUT(l2qc_outF_D_OUT),
						     .FULL_N(l2qc_outF_FULL_N),
						     .EMPTY_N(l2qc_outF_EMPTY_N));

  // submodule lcd_ctrl
  mkLCDController lcd_ctrl(.CLK(sys0_clk),
			   .RST_N(sys0_rst_OUT_RST),
			   .setLine1_text(lcd_ctrl_setLine1_text),
			   .setLine2_text(lcd_ctrl_setLine2_text),
			   .EN_setLine1(lcd_ctrl_EN_setLine1),
			   .EN_setLine2(lcd_ctrl_EN_setLine2),
			   .db(lcd_ctrl_db),
			   .e(lcd_ctrl_e),
			   .rs(lcd_ctrl_rs),
			   .rw(lcd_ctrl_rw));

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) mdi_fRequest(.RST(sys1_rst_OUT_RST),
					.CLK(sys1_clk_O),
					.D_IN(mdi_fRequest_D_IN),
					.ENQ(mdi_fRequest_ENQ),
					.DEQ(mdi_fRequest_DEQ),
					.CLR(mdi_fRequest_CLR),
					.D_OUT(mdi_fRequest_D_OUT),
					.FULL_N(),
					.EMPTY_N(mdi_fRequest_EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17),
	  .guarded(32'd1)) mdi_fResponse(.RST(sys1_rst_OUT_RST),
					 .CLK(sys1_clk_O),
					 .D_IN(mdi_fResponse_D_IN),
					 .ENQ(mdi_fResponse_ENQ),
					 .DEQ(mdi_fResponse_DEQ),
					 .CLR(mdi_fResponse_CLR),
					 .D_OUT(),
					 .FULL_N(mdi_fResponse_FULL_N),
					 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(sys1_clk_O),
						       .RST(sys1_rst_OUT_RST),
						       .DATA_A(mdi_rPlayIndex_DATA_A),
						       .DATA_B(mdi_rPlayIndex_DATA_B),
						       .DATA_C(mdi_rPlayIndex_DATA_C),
						       .DATA_F(mdi_rPlayIndex_DATA_F),
						       .ADDA(mdi_rPlayIndex_ADDA),
						       .ADDB(mdi_rPlayIndex_ADDB),
						       .SETC(mdi_rPlayIndex_SETC),
						       .SETF(mdi_rPlayIndex_SETF),
						       .Q_OUT(mdi_rPlayIndex_Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(sys1_clk_O),
						       .RST(sys1_rst_OUT_RST),
						       .DATA_A(mdi_rPrescaler_DATA_A),
						       .DATA_B(mdi_rPrescaler_DATA_B),
						       .DATA_C(mdi_rPrescaler_DATA_C),
						       .DATA_F(mdi_rPrescaler_DATA_F),
						       .ADDA(mdi_rPrescaler_ADDA),
						       .ADDB(mdi_rPrescaler_ADDB),
						       .SETC(mdi_rPrescaler_SETC),
						       .SETF(mdi_rPrescaler_SETF),
						       .Q_OUT(mdi_rPrescaler_Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdi_tMDC_IO));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD_O),
				     .IO(mdi_tMDD_IO));

  // submodule qcl2_inF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qcl2_inF(.RST(sys1_rst_OUT_RST),
						    .CLK(sys1_clk_O),
						    .D_IN(qcl2_inF_D_IN),
						    .ENQ(qcl2_inF_ENQ),
						    .DEQ(qcl2_inF_DEQ),
						    .CLR(qcl2_inF_CLR),
						    .D_OUT(qcl2_inF_D_OUT),
						    .FULL_N(qcl2_inF_FULL_N),
						    .EMPTY_N(qcl2_inF_EMPTY_N));

  // submodule qcl2_outF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) qcl2_outF(.RST(sys1_rst_OUT_RST),
						     .CLK(sys1_clk_O),
						     .D_IN(qcl2_outF_D_IN),
						     .ENQ(qcl2_outF_ENQ),
						     .DEQ(qcl2_outF_DEQ),
						     .CLR(qcl2_outF_CLR),
						     .D_OUT(qcl2_outF_D_OUT),
						     .FULL_N(qcl2_outF_FULL_N),
						     .EMPTY_N(qcl2_outF_EMPTY_N));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd15)) sys0_rst(.CLK(sys0_clk),
					   .IN_RST(sys0_rstn),
					   .OUT_RST(sys0_rst_OUT_RST));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki_O), .O(sys1_clk_O));

  // submodule sys1_clki
  IBUFDS_GTE2 sys1_clki(.I(sys1_clkp),
			.IB(sys1_clkn),
			.CEB(1'd0),
			.O(sys1_clki_O),
			.ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk_O),
					  .IN_RST(sys0_rst_OUT_RST),
					  .OUT_RST(sys1_rst_OUT_RST));

  // rule RL_gmacOperate
  assign CAN_FIRE_RL_gmacOperate = 1'd1 ;
  assign WILL_FIRE_RL_gmacOperate = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     l2P_RDY_server_request_put && gmac_RDY_rx_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     l2P_RDY_client_request_get && l2qc_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     crt2axi_RDY_crtS0_request_put && l2qc_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     crt2axi_RDY_crtS0_response_get && qcl2_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     l2P_RDY_client_response_put && qcl2_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     l2P_RDY_server_response_get && gmac_RDY_tx_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_doAlways
  assign CAN_FIRE_RL_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_doAlways = 1'd1 ;

  // rule RL_simulationTermination
  assign CAN_FIRE_RL_simulationTermination = cycleCount == 32'd42000 ;
  assign WILL_FIRE_RL_simulationTermination =
	     CAN_FIRE_RL_simulationTermination ;

  // rule RL_iic_go_set
  assign CAN_FIRE_RL_iic_go_set = cycleCount[28] && !iicGo && !iicDone ;
  assign WILL_FIRE_RL_iic_go_set = CAN_FIRE_RL_iic_go_set ;

  // rule RL_init_lcd
  assign CAN_FIRE_RL_init_lcd = lcdNeedsInit && iicDone ;
  assign WILL_FIRE_RL_init_lcd = CAN_FIRE_RL_init_lcd ;

  // rule RL_request_iicrom
  assign CAN_FIRE_RL_request_iicrom =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;
  assign WILL_FIRE_RL_request_iicrom =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // rule RL_cycleCountAdvance
  assign CAN_FIRE_RL_cycleCountAdvance = 1'd1 ;
  assign WILL_FIRE_RL_cycleCountAdvance = 1'd1 ;

  // rule RL_i2cC_update_prescaler
  assign CAN_FIRE_RL_i2cC_update_prescaler = i2cC_rPrescaler_Q_OUT != 32'd0 ;
  assign WILL_FIRE_RL_i2cC_update_prescaler =
	     CAN_FIRE_RL_i2cC_update_prescaler ;

  // rule RL_i2cC_reset_prescaler
  assign CAN_FIRE_RL_i2cC_reset_prescaler = i2cC_rPrescaler_Q_OUT == 32'd0 ;
  assign WILL_FIRE_RL_i2cC_reset_prescaler =
	     CAN_FIRE_RL_i2cC_reset_prescaler ;

  // rule RL_i2cC_start
  assign CAN_FIRE_RL_i2cC_start = i2cC_fRequest_EMPTY_N && !i2cC_rState ;
  assign WILL_FIRE_RL_i2cC_start = CAN_FIRE_RL_i2cC_start ;

  // rule RL_i2cC_running_write
  assign CAN_FIRE_RL_i2cC_running_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT != 10'd0 ;
  assign WILL_FIRE_RL_i2cC_running_write = CAN_FIRE_RL_i2cC_running_write ;

  // rule RL_i2cC_running_read
  assign CAN_FIRE_RL_i2cC_running_read =
	     i2cC_rState && !i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT != 10'd0 ;
  assign WILL_FIRE_RL_i2cC_running_read = CAN_FIRE_RL_i2cC_running_read ;

  // rule RL_i2cC_done_write
  assign CAN_FIRE_RL_i2cC_done_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT == 10'd0 ;
  assign WILL_FIRE_RL_i2cC_done_write = CAN_FIRE_RL_i2cC_done_write ;

  // rule RL_i2cC_done_read
  assign CAN_FIRE_RL_i2cC_done_read =
	     i2cC_fResponse_FULL_N && i2cC_rState && !i2cC_rWrite &&
	     i2cC_rPrescaler_Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex_Q_OUT == 10'd0 ;
  assign WILL_FIRE_RL_i2cC_done_read = CAN_FIRE_RL_i2cC_done_read ;

  // rule RL_uAddr_clock_domain_crossing
  assign CAN_FIRE_RL_uAddr_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_uAddr_clock_domain_crossing = 1'd1 ;

  // rule RL_iicTG__dreg_update
  assign CAN_FIRE_RL_iicTG__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_iicTG__dreg_update = 1'd1 ;

  // rule RL_notFF__dreg_update
  assign CAN_FIRE_RL_notFF__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_notFF__dreg_update = 1'd1 ;

  // rule RL_idc_my_reset_condition
  assign CAN_FIRE_RL_idc_my_reset_condition =
	     idc_preResetCount == 4'hF && idc_doResetCount != 4'hF ;
  assign WILL_FIRE_RL_idc_my_reset_condition =
	     CAN_FIRE_RL_idc_my_reset_condition ;

  // rule RL_idc_do_reset
  assign CAN_FIRE_RL_idc_do_reset = idc_preResetCount == 4'hF ;
  assign WILL_FIRE_RL_idc_do_reset = CAN_FIRE_RL_idc_do_reset ;

  // rule RL_idc_pre_reset
  assign CAN_FIRE_RL_idc_pre_reset = 1'd1 ;
  assign WILL_FIRE_RL_idc_pre_reset = 1'd1 ;

  // rule RL_mdi_update_prescaler
  assign CAN_FIRE_RL_mdi_update_prescaler = mdi_rPrescaler_Q_OUT != 4'd0 ;
  assign WILL_FIRE_RL_mdi_update_prescaler =
	     CAN_FIRE_RL_mdi_update_prescaler ;

  // rule RL_mdi_reset_prescaler
  assign CAN_FIRE_RL_mdi_reset_prescaler = mdi_rPrescaler_Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_reset_prescaler = CAN_FIRE_RL_mdi_reset_prescaler ;

  // rule RL_mdi_start
  assign CAN_FIRE_RL_mdi_start = mdi_fRequest_EMPTY_N && !mdi_rState ;
  assign WILL_FIRE_RL_mdi_start = CAN_FIRE_RL_mdi_start ;

  // rule RL_mdi_run_frame
  assign CAN_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex_Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse_FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler_Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_run_frame = CAN_FIRE_RL_mdi_run_frame ;

  // rule RL_a4lm_doAlways
  assign CAN_FIRE_RL_a4lm_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_a4lm_doAlways = 1'd1 ;

  // rule RL_l2qc_unfunnel
  assign CAN_FIRE_RL_l2qc_unfunnel =
	     l2qc_inF_EMPTY_N &&
	     (l2qc_ptr != 2'd3 && l2qc_inF_D_OUT[9:8] == 2'd0 ||
	      l2qc_outF_FULL_N) ;
  assign WILL_FIRE_RL_l2qc_unfunnel = CAN_FIRE_RL_l2qc_unfunnel ;

  // rule RL_qcl2_funnel
  assign CAN_FIRE_RL_qcl2_funnel = qcl2_inF_EMPTY_N && qcl2_outF_FULL_N ;
  assign WILL_FIRE_RL_qcl2_funnel = CAN_FIRE_RL_qcl2_funnel ;

  // rule RL_iicrom_serverAdapter_stageReadResponseAlways
  assign CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways =
	     (iicrom_serverAdapter_cnt ^ 3'h4) < 3'd7 && iicGo &&
	     cycleCount[17:0] == 18'd0 ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // rule RL_iicrom_serverAdapter_moveToOutFIFO
  assign CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO =
	     (!iicrom_serverAdapter_s1[0] ||
	      iicrom_serverAdapter_outDataCore_FULL_N) &&
	     iicrom_serverAdapter_s1[1] ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO =
	     CAN_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO ;

  // rule RL_iicrom_serverAdapter_overRun
  assign CAN_FIRE_RL_iicrom_serverAdapter_overRun =
	     iicrom_serverAdapter_s1[1] &&
	     !iicrom_serverAdapter_outDataCore_FULL_N ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_overRun =
	     CAN_FIRE_RL_iicrom_serverAdapter_overRun ;

  // rule RL_iicrom_serverAdapter_outData_setFirstCore
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstCore =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ;

  // rule RL_iicrom_serverAdapter_outData_setFirstEnq
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq =
	     !iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq ;

  // rule RL_response_iicrom
  assign CAN_FIRE_RL_response_iicrom =
	     (iicrom_serverAdapter_outDataCore_EMPTY_N ||
	      iicrom_serverAdapter_outData_enqData_whas) &&
	     iicrom_serverAdapter_outData_outData_whas &&
	     i2cC_fRequest_FULL_N ;
  assign WILL_FIRE_RL_response_iicrom = CAN_FIRE_RL_response_iicrom ;

  // rule RL_iicrom_serverAdapter_outData_enqOnly
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly =
	     iicrom_serverAdapter_outDataCore_FULL_N &&
	     !CAN_FIRE_RL_response_iicrom &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_enqOnly ;

  // rule RL_iicrom_serverAdapter_outData_deqOnly
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly =
	     iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     CAN_FIRE_RL_response_iicrom &&
	     !iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_deqOnly ;

  // rule RL_iicrom_serverAdapter_outData_enqAndDeq
  assign CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq =
	     iicrom_serverAdapter_outDataCore_EMPTY_N &&
	     iicrom_serverAdapter_outDataCore_FULL_N &&
	     CAN_FIRE_RL_response_iicrom &&
	     iicrom_serverAdapter_outData_enqData_whas ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq =
	     CAN_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ;

  // rule RL_iicrom_serverAdapter_cnt_finalAdd
  assign CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd =
	     WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ||
	     CAN_FIRE_RL_response_iicrom ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd =
	     CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd ;

  // rule RL_iicrom_serverAdapter_s1__dreg_update
  assign CAN_FIRE_RL_iicrom_serverAdapter_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_iicrom_serverAdapter_s1__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_i2cC_rOutEn_write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_write ;
  assign MUX_i2cC_rOutEn_write_1__SEL_2 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ;
  assign MUX_i2cC_rState_write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ;
  assign MUX_iicGo_write_1__SEL_1 =
	     WILL_FIRE_RL_request_iicrom && iicPtr == 10'd70 ;
  assign MUX_mdi_rState_write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 ;
  assign MUX_i2cC_rOutEn_write_1__VAL_1 =
	     _154742503901866210315206599__q15[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rOutEn_write_1__VAL_2 =
	     _166153498389916941667817601160445959__q16[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL_write_1__VAL_1 =
	     _121583396715528419856163987__q17[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL_write_1__VAL_2 =
	     _130549178157447095380771276656813203__q18[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA_write_1__VAL_1 =
	     wRdData__h1748[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA_write_1__VAL_2 =
	     wWrData__h1752[i2cC_rPlayIndex_Q_OUT[6:0]] ;

  // inlined wires
  assign iicrom_serverAdapter_outData_enqData_whas =
	     WILL_FIRE_RL_iicrom_serverAdapter_moveToOutFIFO &&
	     iicrom_serverAdapter_s1[0] ;
  assign iicrom_serverAdapter_outData_outData_whas =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_setFirstEnq ;

  // register cycleCount
  assign cycleCount_D_IN = cycleCount + 32'd1 ;
  assign cycleCount_EN = 1'd1 ;

  // register i2cC_rAddress
  assign i2cC_rAddress_D_IN = i2cC_fRequest_D_OUT[15:8] ;
  assign i2cC_rAddress_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rOutEn
  assign i2cC_rOutEn_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_1 ?
	       MUX_i2cC_rOutEn_write_1__VAL_1 :
	       MUX_i2cC_rOutEn_write_1__VAL_2 ;
  assign i2cC_rOutEn_EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSCL
  assign i2cC_rSCL_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_1 ?
	       MUX_i2cC_rSCL_write_1__VAL_1 :
	       MUX_i2cC_rSCL_write_1__VAL_2 ;
  assign i2cC_rSCL_EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSDA
  assign i2cC_rSDA_D_IN =
	     MUX_i2cC_rOutEn_write_1__SEL_2 ?
	       MUX_i2cC_rSDA_write_1__VAL_1 :
	       MUX_i2cC_rSDA_write_1__VAL_2 ;
  assign i2cC_rSDA_EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ;

  // register i2cC_rSlaveAddr
  assign i2cC_rSlaveAddr_D_IN = i2cC_fRequest_D_OUT[22:16] ;
  assign i2cC_rSlaveAddr_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rState
  assign i2cC_rState_D_IN = !MUX_i2cC_rState_write_1__SEL_1 ;
  assign i2cC_rState_EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_start ;

  // register i2cC_rWrite
  assign i2cC_rWrite_D_IN = i2cC_fRequest_D_OUT[23] ;
  assign i2cC_rWrite_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_rWriteData
  assign i2cC_rWriteData_D_IN = i2cC_fRequest_D_OUT[7:0] ;
  assign i2cC_rWriteData_EN = CAN_FIRE_RL_i2cC_start ;

  // register i2cC_vrReadData_0
  assign i2cC_vrReadData_0_D_IN = i2cC_tSDA_O ;
  assign i2cC_vrReadData_0_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_1
  assign i2cC_vrReadData_1_D_IN = i2cC_vrReadData_0 ;
  assign i2cC_vrReadData_1_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_2
  assign i2cC_vrReadData_2_D_IN = i2cC_vrReadData_1 ;
  assign i2cC_vrReadData_2_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_3
  assign i2cC_vrReadData_3_D_IN = i2cC_vrReadData_2 ;
  assign i2cC_vrReadData_3_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_4
  assign i2cC_vrReadData_4_D_IN = i2cC_vrReadData_3 ;
  assign i2cC_vrReadData_4_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_5
  assign i2cC_vrReadData_5_D_IN = i2cC_vrReadData_4 ;
  assign i2cC_vrReadData_5_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_6
  assign i2cC_vrReadData_6_D_IN = i2cC_vrReadData_5 ;
  assign i2cC_vrReadData_6_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register i2cC_vrReadData_7
  assign i2cC_vrReadData_7_D_IN = i2cC_vrReadData_6 ;
  assign i2cC_vrReadData_7_EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 ;

  // register idc_doResetCount
  assign idc_doResetCount_D_IN =
	     (idc_doResetCount == 4'hF) ?
	       idc_doResetCount :
	       idc_doResetCount + 4'd1 ;
  assign idc_doResetCount_EN = CAN_FIRE_RL_idc_do_reset ;

  // register idc_preResetCount
  assign idc_preResetCount_D_IN =
	     (idc_preResetCount == 4'hF) ?
	       idc_preResetCount :
	       idc_preResetCount + 4'd1 ;
  assign idc_preResetCount_EN = 1'd1 ;

  // register iicDone
  assign iicDone_D_IN = 1'd1 ;
  assign iicDone_EN = MUX_iicGo_write_1__SEL_1 ;

  // register iicGo
  assign iicGo_D_IN = !MUX_iicGo_write_1__SEL_1 ;
  assign iicGo_EN =
	     WILL_FIRE_RL_request_iicrom && iicPtr == 10'd70 ||
	     WILL_FIRE_RL_iic_go_set ;

  // register iicPtr
  assign iicPtr_D_IN = iicPtr + 10'd1 ;
  assign iicPtr_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // register iicTG
  assign iicTG_D_IN = 1'b0 ;
  assign iicTG_EN = 1'd1 ;

  // register iicrom_serverAdapter_cnt
  assign iicrom_serverAdapter_cnt_D_IN =
	     iicrom_serverAdapter_cnt_83_PLUS_IF_iicrom_ser_ETC___d589 ;
  assign iicrom_serverAdapter_cnt_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_cnt_finalAdd ;

  // register iicrom_serverAdapter_s1
  assign iicrom_serverAdapter_s1_D_IN =
	     { CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways,
	       1'b1 } ;
  assign iicrom_serverAdapter_s1_EN = 1'd1 ;

  // register l2qc_ptr
  assign l2qc_ptr_D_IN =
	     (l2qc_inF_D_OUT[9:8] == 2'd0) ? l2qc_ptr + 2'd1 : 2'd0 ;
  assign l2qc_ptr_EN = CAN_FIRE_RL_l2qc_unfunnel ;

  // register l2qc_sr
  assign l2qc_sr_D_IN =
	     { IF_l2qc_sr_06_BITS_19_TO_18_07_EQ_0_08_OR_l2qc_ETC___d317,
	       IF_l2qc_sr_06_BITS_9_TO_8_18_EQ_0_19_OR_l2qc_s_ETC___d328,
	       IF_l2qc_inF_first__99_BITS_9_TO_8_00_EQ_0_01_O_ETC___d337 } ;
  assign l2qc_sr_EN = CAN_FIRE_RL_l2qc_unfunnel ;

  // register lcdNeedsInit
  assign lcdNeedsInit_D_IN = 1'd0 ;
  assign lcdNeedsInit_EN = CAN_FIRE_RL_init_lcd ;

  // register macAddrCnt
  assign macAddrCnt_D_IN = 11'h0 ;
  assign macAddrCnt_EN = 1'b0 ;

  // register macAddrRead
  assign macAddrRead_D_IN = 1'b0 ;
  assign macAddrRead_EN = 1'b0 ;

  // register macAddrRespCnt
  assign macAddrRespCnt_D_IN = 11'h0 ;
  assign macAddrRespCnt_EN = 1'b0 ;

  // register macV
  assign macV_D_IN = 48'h0 ;
  assign macV_EN = 1'b0 ;

  // register mdi_rMDC
  assign mdi_rMDC_D_IN =
	     _1434766110945527031733894725304609466537681244_ETC__q20[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rMDC_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD_D_IN = bs__h21756[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rMDD_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn_D_IN = bs__h34515[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rOutEn_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr_D_IN = mdi_fRequest_D_OUT[25:21] ;
  assign mdi_rPhyAddr_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr_D_IN = mdi_fRequest_D_OUT[20:16] ;
  assign mdi_rRegAddr_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rState
  assign mdi_rState_D_IN = !MUX_mdi_rState_write_1__SEL_1 ;
  assign mdi_rState_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 ||
	     WILL_FIRE_RL_mdi_start ;

  // register mdi_rWrite
  assign mdi_rWrite_D_IN = mdi_fRequest_D_OUT[26] ;
  assign mdi_rWrite_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rWriteData
  assign mdi_rWriteData_D_IN = mdi_fRequest_D_OUT[15:0] ;
  assign mdi_rWriteData_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_vrReadData_0
  assign mdi_vrReadData_0_D_IN = mdi_tMDD_O ;
  assign mdi_vrReadData_0_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1_D_IN = mdi_vrReadData_0 ;
  assign mdi_vrReadData_1_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10_D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11_D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12_D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13_D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14_D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15_D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2_D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3_D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4_D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5_D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6_D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7_D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8_D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9_D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q21[mdi_rPlayIndex_Q_OUT] ;

  // register notFF
  assign notFF_D_IN = 1'b0 ;
  assign notFF_EN = 1'd1 ;

  // register qcl2_ptr
  assign qcl2_ptr_D_IN =
	     SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 ?
	       qcl2_ptr + 2'd1 :
	       2'd0 ;
  assign qcl2_ptr_EN = CAN_FIRE_RL_qcl2_funnel ;

  // register selEepromOK
  assign selEepromOK_D_IN = 1'b0 ;
  assign selEepromOK_EN = 1'b0 ;

  // submodule a4ls
  assign a4ls_ARADDR = crt2axi_axiM0_rdAddr_data[31:0] ;
  assign a4ls_ARPROT = crt2axi_axiM0_rdAddr_data[34:32] ;
  assign a4ls_AWADDR = crt2axi_axiM0_wrAddr_data[31:0] ;
  assign a4ls_AWPROT = crt2axi_axiM0_wrAddr_data[34:32] ;
  assign a4ls_WDATA = crt2axi_axiM0_wrData_data[31:0] ;
  assign a4ls_WSTRB = crt2axi_axiM0_wrData_data[35:32] ;
  assign a4ls_AWVALID = crt2axi_axiM0_wrAddr_valid ;
  assign a4ls_WVALID = crt2axi_axiM0_wrData_valid ;
  assign a4ls_BREADY = crt2axi_axiM0_wrResp_ready ;
  assign a4ls_ARVALID = crt2axi_axiM0_rdAddr_valid ;
  assign a4ls_RREADY = crt2axi_axiM0_rdResp_ready ;

  // submodule crt2axi
  assign crt2axi_axiM0_rdAddr_ready_value = a4ls_ARREADY ;
  assign crt2axi_axiM0_rdResp_data_value = { a4ls_RRESP, a4ls_RDATA } ;
  assign crt2axi_axiM0_rdResp_valid_value = a4ls_RVALID ;
  assign crt2axi_axiM0_wrAddr_ready_value = a4ls_AWREADY ;
  assign crt2axi_axiM0_wrData_ready_value = a4ls_WREADY ;
  assign crt2axi_axiM0_wrResp_data_value = a4ls_BRESP ;
  assign crt2axi_axiM0_wrResp_valid_value = a4ls_BVALID ;
  assign crt2axi_crtS0_request_put =
	     { l2qc_outF_D_OUT[37:30],
	       l2qc_outF_D_OUT[27:20],
	       l2qc_outF_D_OUT[17:10],
	       l2qc_outF_D_OUT[7:0] } ;
  assign crt2axi_EN_crtS0_request_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign crt2axi_EN_crtS0_response_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // submodule gmac
  assign gmac_gmii_col_i = gmii_col_i ;
  assign gmac_gmii_crs_i = gmii_crs_i ;
  assign gmac_gmii_intr_i = gmii_intr_i ;
  assign gmac_gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac_gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac_gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac_tx_put =
	     { CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q19,
	       l2P_server_response_get[7:0] } ;
  assign gmac_EN_rx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign gmac_EN_tx_put = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign gmac_EN_rxOperate = 1'd1 ;
  assign gmac_EN_txOperate = 1'd1 ;

  // submodule i2cC_fRequest
  assign i2cC_fRequest_D_IN = { 1'd1, v__h51390[23:17], v__h51390[15:0] } ;
  assign i2cC_fRequest_ENQ = CAN_FIRE_RL_response_iicrom ;
  assign i2cC_fRequest_DEQ = CAN_FIRE_RL_i2cC_start ;
  assign i2cC_fRequest_CLR = 1'b0 ;

  // submodule i2cC_fResponse
  assign i2cC_fResponse_D_IN =
	     { i2cC_vrReadData_7,
	       i2cC_vrReadData_6,
	       i2cC_vrReadData_5,
	       i2cC_vrReadData_4,
	       i2cC_vrReadData_3,
	       i2cC_vrReadData_2,
	       i2cC_vrReadData_1,
	       i2cC_vrReadData_0 } ;
  assign i2cC_fResponse_ENQ = CAN_FIRE_RL_i2cC_done_read ;
  assign i2cC_fResponse_DEQ = 1'b0 ;
  assign i2cC_fResponse_CLR = 1'b0 ;

  // submodule i2cC_rPlayIndex
  assign i2cC_rPlayIndex_DATA_A = 10'h0 ;
  assign i2cC_rPlayIndex_DATA_B = 10'd1023 ;
  assign i2cC_rPlayIndex_DATA_C = 10'h0 ;
  assign i2cC_rPlayIndex_DATA_F = i2cC_fRequest_D_OUT[23] ? 10'd86 : 10'd116 ;
  assign i2cC_rPlayIndex_ADDA = 1'b0 ;
  assign i2cC_rPlayIndex_ADDB =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_running_write ;
  assign i2cC_rPlayIndex_SETC = 1'b0 ;
  assign i2cC_rPlayIndex_SETF = CAN_FIRE_RL_i2cC_start ;

  // submodule i2cC_rPrescaler
  assign i2cC_rPrescaler_DATA_A = 32'h0 ;
  assign i2cC_rPrescaler_DATA_B = 32'hFFFFFFFF ;
  assign i2cC_rPrescaler_DATA_C = 32'h0 ;
  assign i2cC_rPrescaler_DATA_F = 32'd666 ;
  assign i2cC_rPrescaler_ADDA = 1'b0 ;
  assign i2cC_rPrescaler_ADDB = CAN_FIRE_RL_i2cC_update_prescaler ;
  assign i2cC_rPrescaler_SETC = 1'b0 ;
  assign i2cC_rPrescaler_SETF = CAN_FIRE_RL_i2cC_reset_prescaler ;

  // submodule idc_idcRst
  assign idc_idcRst_ASSERT_IN = CAN_FIRE_RL_idc_my_reset_condition ;

  // submodule iicrom_memory
  assign iicrom_memory_ADDR = iicPtr ;
  assign iicrom_memory_DI = 32'd0 ;
  assign iicrom_memory_WE = 1'd0 ;
  assign iicrom_memory_EN =
	     CAN_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ;

  // submodule iicrom_serverAdapter_outDataCore
  assign iicrom_serverAdapter_outDataCore_D_IN = iicrom_memory_DO ;
  assign iicrom_serverAdapter_outDataCore_ENQ =
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqOnly ;
  assign iicrom_serverAdapter_outDataCore_DEQ =
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_enqAndDeq ||
	     WILL_FIRE_RL_iicrom_serverAdapter_outData_deqOnly ;
  assign iicrom_serverAdapter_outDataCore_CLR = 1'b0 ;

  // submodule l2P
  assign l2P_client_response_put =
	     { CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q2,
	       qcl2_outF_D_OUT[7:0] } ;
  assign l2P_macAddr_u = 48'h0 ;
  assign l2P_server_request_put =
	     { CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q1,
	       gmac_rx_get[7:0] } ;
  assign l2P_EN_server_request_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign l2P_EN_server_response_get = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign l2P_EN_client_request_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign l2P_EN_client_response_put = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign l2P_EN_macAddr = 1'b0 ;

  // submodule l2qc_inF
  assign l2qc_inF_D_IN =
	     { CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q3,
	       l2P_client_request_get[7:0] } ;
  assign l2qc_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign l2qc_inF_DEQ = CAN_FIRE_RL_l2qc_unfunnel ;
  assign l2qc_inF_CLR = 1'b0 ;

  // submodule l2qc_outF
  assign l2qc_outF_D_IN =
	     { IF_l2qc_inF_first__99_BITS_9_TO_8_00_EQ_0_01_O_ETC___d337,
	       IF_l2qc_sr_06_BITS_9_TO_8_18_EQ_0_19_OR_l2qc_s_ETC___d328,
	       IF_l2qc_sr_06_BITS_19_TO_18_07_EQ_0_08_OR_l2qc_ETC___d317,
	       CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q11,
	       l2qc_sr[27:20] } ;
  assign l2qc_outF_ENQ =
	     WILL_FIRE_RL_l2qc_unfunnel &&
	     (l2qc_ptr == 2'd3 || l2qc_inF_D_OUT[9:8] != 2'd0) ;
  assign l2qc_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign l2qc_outF_CLR = 1'b0 ;

  // submodule lcd_ctrl
  assign lcd_ctrl_setLine1_text = 128'h434C4C2073656C75522063696D6F7441 ;
  assign lcd_ctrl_setLine2_text = 128'h796461655220545243656E696C746F48 ;
  assign lcd_ctrl_EN_setLine1 = CAN_FIRE_RL_init_lcd ;
  assign lcd_ctrl_EN_setLine2 = CAN_FIRE_RL_init_lcd ;

  // submodule mdi_fRequest
  assign mdi_fRequest_D_IN = 27'h0 ;
  assign mdi_fRequest_ENQ = 1'b0 ;
  assign mdi_fRequest_DEQ = CAN_FIRE_RL_mdi_start ;
  assign mdi_fRequest_CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse_D_IN = { 1'd1, x_data__h37792 } ;
  assign mdi_fResponse_ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse_DEQ = 1'b0 ;
  assign mdi_fResponse_CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex_DATA_A = 8'h0 ;
  assign mdi_rPlayIndex_DATA_B = 8'd255 ;
  assign mdi_rPlayIndex_DATA_C = 8'h0 ;
  assign mdi_rPlayIndex_DATA_F = 8'd194 ;
  assign mdi_rPlayIndex_ADDA = 1'b0 ;
  assign mdi_rPlayIndex_ADDB = CAN_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex_SETC = 1'b0 ;
  assign mdi_rPlayIndex_SETF = CAN_FIRE_RL_mdi_start ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler_DATA_A = 4'h0 ;
  assign mdi_rPrescaler_DATA_B = 4'd15 ;
  assign mdi_rPrescaler_DATA_C = 4'h0 ;
  assign mdi_rPrescaler_DATA_F = 4'd6 ;
  assign mdi_rPrescaler_ADDA = 1'b0 ;
  assign mdi_rPrescaler_ADDB = CAN_FIRE_RL_mdi_update_prescaler ;
  assign mdi_rPrescaler_SETC = 1'b0 ;
  assign mdi_rPrescaler_SETF = CAN_FIRE_RL_mdi_reset_prescaler ;

  // submodule qcl2_inF
  assign qcl2_inF_D_IN =
	     { CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q4,
	       crt2axi_crtS0_response_get[37:30],
	       CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q5,
	       crt2axi_crtS0_response_get[27:20],
	       CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q6,
	       crt2axi_crtS0_response_get[17:10],
	       CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q7,
	       crt2axi_crtS0_response_get[7:0] } ;
  assign qcl2_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign qcl2_inF_DEQ =
	     WILL_FIRE_RL_qcl2_funnel &&
	     (qcl2_ptr == 2'd3 ||
	      !SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369) ;
  assign qcl2_inF_CLR = 1'b0 ;

  // submodule qcl2_outF
  assign qcl2_outF_D_IN =
	     SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 ?
	       { 2'd0,
		 SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 } :
	       IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d394 ;
  assign qcl2_outF_ENQ = CAN_FIRE_RL_qcl2_funnel ;
  assign qcl2_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign qcl2_outF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d393 =
	     { CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13 ?
		 2'd2 :
		 2'd3,
	       SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 } ;
  assign IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d394 =
	     CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14 ?
	       { 2'd1,
		 SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 } :
	       IF_SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_E_ETC___d393 ;
  assign IF_l2qc_inF_first__99_BITS_9_TO_8_00_EQ_0_01_O_ETC___d337 =
	     { CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q8,
	       l2qc_inF_D_OUT[7:0] } ;
  assign IF_l2qc_sr_06_BITS_19_TO_18_07_EQ_0_08_OR_l2qc_ETC___d317 =
	     { CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q10,
	       l2qc_sr[17:10] } ;
  assign IF_l2qc_sr_06_BITS_9_TO_8_18_EQ_0_19_OR_l2qc_s_ETC___d328 =
	     { CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q9,
	       l2qc_sr[7:0] } ;
  assign _121583396715528419856163987__q17 = 87'h6492492492492492492493 ;
  assign _130549178157447095380771276656813203__q18 =
	     117'h192492492492492E92492492492493 ;
  assign _1434766110945527031733894725304609466537681244_ETC__q20 =
	     195'h2492492492492492492492492492492492492492492492492 ;
  assign _154742503901866210315206599__q15 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _166153498389916941667817601160445959__q16 =
	     117'h1FFFFFFC7FFFFF8FFFFFFE00000007 ;
  assign _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d108 =
	     _306783360__q12[i2cC_rPlayIndex_Q_OUT[6:0]] ;
  assign _306783360__q12 = 117'd306783360 ;
  assign _643371375338640__q21 =
	     195'h0000000000000000000000000000000000002492492492490 ;
  assign a0__h1737 = {3{i2cC_rAddress[0]}} ;
  assign a1__h1736 = {3{i2cC_rAddress[1]}} ;
  assign a2__h1735 = {3{i2cC_rAddress[2]}} ;
  assign a3__h1734 = {3{i2cC_rAddress[3]}} ;
  assign a4__h1733 = {3{i2cC_rAddress[4]}} ;
  assign a5__h1732 = {3{i2cC_rAddress[5]}} ;
  assign a6__h1731 = {3{i2cC_rAddress[6]}} ;
  assign a7__h1730 = {3{i2cC_rAddress[7]}} ;
  assign bs__h21756 =
	     { mdi_rWrite ?
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1C7 :
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1F8,
	       pa4__h21355,
	       pa3__h21356,
	       pa2__h21357,
	       pa1__h21358,
	       pa0__h21359,
	       ra4__h21361,
	       ra3__h21362,
	       ra2__h21363,
	       ra1__h21364,
	       ra0__h21365,
	       6'd56,
	       d15__h21367,
	       d14__h21368,
	       d13__h21369,
	       d12__h21370,
	       d11__h21371,
	       d10__h21372,
	       d9__h21373,
	       d8__h21374,
	       d7__h21375,
	       d6__h21376,
	       d5__h21377,
	       d4__h21378,
	       d3__h21379,
	       d2__h21380,
	       d1__h21381,
	       d0__h21382,
	       3'b111 } ;
  assign bs__h34515 =
	     mdi_rWrite ?
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 :
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000 ;
  assign d0__h1746 = {3{i2cC_rWriteData[0]}} ;
  assign d0__h21382 = {3{mdi_rWriteData[0]}} ;
  assign d10__h21372 = {3{mdi_rWriteData[10]}} ;
  assign d11__h21371 = {3{mdi_rWriteData[11]}} ;
  assign d12__h21370 = {3{mdi_rWriteData[12]}} ;
  assign d13__h21369 = {3{mdi_rWriteData[13]}} ;
  assign d14__h21368 = {3{mdi_rWriteData[14]}} ;
  assign d15__h21367 = {3{mdi_rWriteData[15]}} ;
  assign d1__h1745 = {3{i2cC_rWriteData[1]}} ;
  assign d1__h21381 = {3{mdi_rWriteData[1]}} ;
  assign d2__h1744 = {3{i2cC_rWriteData[2]}} ;
  assign d2__h21380 = {3{mdi_rWriteData[2]}} ;
  assign d3__h1743 = {3{i2cC_rWriteData[3]}} ;
  assign d3__h21379 = {3{mdi_rWriteData[3]}} ;
  assign d4__h1742 = {3{i2cC_rWriteData[4]}} ;
  assign d4__h21378 = {3{mdi_rWriteData[4]}} ;
  assign d5__h1741 = {3{i2cC_rWriteData[5]}} ;
  assign d5__h21377 = {3{mdi_rWriteData[5]}} ;
  assign d6__h1740 = {3{i2cC_rWriteData[6]}} ;
  assign d6__h21376 = {3{mdi_rWriteData[6]}} ;
  assign d7__h1739 = {3{i2cC_rWriteData[7]}} ;
  assign d7__h21375 = {3{mdi_rWriteData[7]}} ;
  assign d8__h21374 = {3{mdi_rWriteData[8]}} ;
  assign d9__h21373 = {3{mdi_rWriteData[9]}} ;
  assign iicrom_serverAdapter_cnt_83_PLUS_IF_iicrom_ser_ETC___d589 =
	     iicrom_serverAdapter_cnt +
	     (WILL_FIRE_RL_iicrom_serverAdapter_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_response_iicrom ? 3'd7 : 3'd0) ;
  assign pa0__h21359 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h21358 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h21357 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h21356 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h21355 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h21365 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h21364 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h21363 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h21362 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h21361 = {3{mdi_rRegAddr[4]}} ;
  assign s0__h1728 = {3{i2cC_rSlaveAddr[0]}} ;
  assign s1__h1727 = {3{i2cC_rSlaveAddr[1]}} ;
  assign s2__h1726 = {3{i2cC_rSlaveAddr[2]}} ;
  assign s3__h1725 = {3{i2cC_rSlaveAddr[3]}} ;
  assign s4__h1724 = {3{i2cC_rSlaveAddr[4]}} ;
  assign s5__h1723 = {3{i2cC_rSlaveAddr[5]}} ;
  assign s6__h1722 = {3{i2cC_rSlaveAddr[6]}} ;
  assign v__h51390 =
	     iicrom_serverAdapter_outDataCore_EMPTY_N ?
	       iicrom_serverAdapter_outDataCore_D_OUT :
	       iicrom_memory_DO ;
  assign wRdData__h1748 =
	     { 3'b100,
	       s6__h1722,
	       s5__h1723,
	       s4__h1724,
	       s3__h1725,
	       s2__h1726,
	       s1__h1727,
	       s0__h1728,
	       6'd0,
	       a7__h1730,
	       a6__h1731,
	       a5__h1732,
	       a4__h1733,
	       a3__h1734,
	       a2__h1735,
	       a1__h1736,
	       a0__h1737,
	       6'd6,
	       s6__h1722,
	       s5__h1723,
	       s4__h1724,
	       s3__h1725,
	       s2__h1726,
	       s1__h1727,
	       s0__h1728,
	       36'hE00000001 } ;
  assign wWrData__h1752 =
	     { 3'b100,
	       s6__h1722,
	       s5__h1723,
	       s4__h1724,
	       s3__h1725,
	       s2__h1726,
	       s1__h1727,
	       s0__h1728,
	       6'd0,
	       a7__h1730,
	       a6__h1731,
	       a5__h1732,
	       a4__h1733,
	       a3__h1734,
	       a2__h1735,
	       a1__h1736,
	       a0__h1737,
	       3'b0,
	       d7__h1739,
	       d6__h1740,
	       d5__h1741,
	       d4__h1742,
	       d3__h1743,
	       d2__h1744,
	       d1__h1745,
	       d0__h1746,
	       6'd1 } ;
  assign x_data__h37792 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData_0 } ;
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q1 =
	      gmac_rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q1 = 2'd3;
    endcase
  end
  always@(qcl2_outF_D_OUT)
  begin
    case (qcl2_outF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q2 =
	      qcl2_outF_D_OUT[9:8];
      2'd3: CASE_qcl2_outFD_OUT_BITS_9_TO_8_0_qcl2_outFD_ETC__q2 = 2'd3;
    endcase
  end
  always@(l2P_client_request_get)
  begin
    case (l2P_client_request_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q3 =
	      l2P_client_request_get[9:8];
      2'd3: CASE_l2Pclient_request_get_BITS_9_TO_8_0_l2P_ETC__q3 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q4 =
	      crt2axi_crtS0_response_get[39:38];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_39_TO_38__ETC__q4 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q5 =
	      crt2axi_crtS0_response_get[29:28];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_29_TO_28__ETC__q5 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q6 =
	      crt2axi_crtS0_response_get[19:18];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_19_TO_18__ETC__q6 = 2'd3;
    endcase
  end
  always@(crt2axi_crtS0_response_get)
  begin
    case (crt2axi_crtS0_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q7 =
	      crt2axi_crtS0_response_get[9:8];
      2'd3: CASE_crt2axicrtS0_response_get_BITS_9_TO_8_0__ETC__q7 = 2'd3;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 =
	      qcl2_inF_D_OUT[9:8] == 2'd0;
      2'd1:
	  SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 =
	      qcl2_inF_D_OUT[19:18] == 2'd0;
      2'd2:
	  SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 =
	      qcl2_inF_D_OUT[29:28] == 2'd0;
      2'd3:
	  SEL_ARR_qcl2_inF_first__58_BITS_9_TO_8_59_EQ_0_ETC___d369 =
	      qcl2_inF_D_OUT[39:38] == 2'd0;
    endcase
  end
  always@(l2qc_inF_D_OUT)
  begin
    case (l2qc_inF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q8 =
	      l2qc_inF_D_OUT[9:8];
      2'd3: CASE_l2qc_inFD_OUT_BITS_9_TO_8_0_l2qc_inFD_O_ETC__q8 = 2'd3;
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q9 =
	      l2qc_sr[9:8];
      2'd3: CASE_l2qc_sr_BITS_9_TO_8_0_l2qc_sr_BITS_9_TO_8_ETC__q9 = 2'd3;
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q10 =
	      l2qc_sr[19:18];
      2'd3: CASE_l2qc_sr_BITS_19_TO_18_0_l2qc_sr_BITS_19_T_ETC__q10 = 2'd3;
    endcase
  end
  always@(l2qc_sr)
  begin
    case (l2qc_sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q11 =
	      l2qc_sr[29:28];
      2'd3: CASE_l2qc_sr_BITS_29_TO_28_0_l2qc_sr_BITS_29_T_ETC__q11 = 2'd3;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 =
	      qcl2_inF_D_OUT[7:0];
      2'd1:
	  SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 =
	      qcl2_inF_D_OUT[17:10];
      2'd2:
	  SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 =
	      qcl2_inF_D_OUT[27:20];
      2'd3:
	  SEL_ARR_qcl2_inF_first__58_BITS_7_TO_0_72_qcl2_ETC___d377 =
	      qcl2_inF_D_OUT[37:30];
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13 =
	      qcl2_inF_D_OUT[9:8] == 2'd2;
      2'd1:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13 =
	      qcl2_inF_D_OUT[19:18] == 2'd2;
      2'd2:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13 =
	      qcl2_inF_D_OUT[29:28] == 2'd2;
      2'd3:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q13 =
	      qcl2_inF_D_OUT[39:38] == 2'd2;
    endcase
  end
  always@(qcl2_ptr or qcl2_inF_D_OUT)
  begin
    case (qcl2_ptr)
      2'd0:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14 =
	      qcl2_inF_D_OUT[9:8] == 2'd1;
      2'd1:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14 =
	      qcl2_inF_D_OUT[19:18] == 2'd1;
      2'd2:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14 =
	      qcl2_inF_D_OUT[29:28] == 2'd1;
      2'd3:
	  CASE_qcl2_ptr_0_qcl2_inFD_OUT_BITS_9_TO_8_EQ__ETC__q14 =
	      qcl2_inF_D_OUT[39:38] == 2'd1;
    endcase
  end
  always@(l2P_server_response_get)
  begin
    case (l2P_server_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q19 =
	      l2P_server_response_get[9:8];
      2'd3: CASE_l2Pserver_response_get_BITS_9_TO_8_0_l2P_ETC__q19 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys0_clk)
  begin
    if (sys0_rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        cycleCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	idc_doResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	idc_preResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	iicDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicGo <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	iicTG <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iicrom_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iicrom_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lcdNeedsInit <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macAddrCnt <= `BSV_ASSIGNMENT_DELAY 11'd0;
	macAddrRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macAddrRespCnt <= `BSV_ASSIGNMENT_DELAY 11'd0;
	notFF <= `BSV_ASSIGNMENT_DELAY 1'd0;
	selEepromOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cycleCount_EN)
	  cycleCount <= `BSV_ASSIGNMENT_DELAY cycleCount_D_IN;
	if (i2cC_rOutEn_EN)
	  i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY i2cC_rOutEn_D_IN;
	if (i2cC_rSCL_EN) i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY i2cC_rSCL_D_IN;
	if (i2cC_rSDA_EN) i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY i2cC_rSDA_D_IN;
	if (i2cC_rState_EN)
	  i2cC_rState <= `BSV_ASSIGNMENT_DELAY i2cC_rState_D_IN;
	if (idc_doResetCount_EN)
	  idc_doResetCount <= `BSV_ASSIGNMENT_DELAY idc_doResetCount_D_IN;
	if (idc_preResetCount_EN)
	  idc_preResetCount <= `BSV_ASSIGNMENT_DELAY idc_preResetCount_D_IN;
	if (iicDone_EN) iicDone <= `BSV_ASSIGNMENT_DELAY iicDone_D_IN;
	if (iicGo_EN) iicGo <= `BSV_ASSIGNMENT_DELAY iicGo_D_IN;
	if (iicPtr_EN) iicPtr <= `BSV_ASSIGNMENT_DELAY iicPtr_D_IN;
	if (iicTG_EN) iicTG <= `BSV_ASSIGNMENT_DELAY iicTG_D_IN;
	if (iicrom_serverAdapter_cnt_EN)
	  iicrom_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      iicrom_serverAdapter_cnt_D_IN;
	if (iicrom_serverAdapter_s1_EN)
	  iicrom_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      iicrom_serverAdapter_s1_D_IN;
	if (lcdNeedsInit_EN)
	  lcdNeedsInit <= `BSV_ASSIGNMENT_DELAY lcdNeedsInit_D_IN;
	if (macAddrCnt_EN)
	  macAddrCnt <= `BSV_ASSIGNMENT_DELAY macAddrCnt_D_IN;
	if (macAddrRead_EN)
	  macAddrRead <= `BSV_ASSIGNMENT_DELAY macAddrRead_D_IN;
	if (macAddrRespCnt_EN)
	  macAddrRespCnt <= `BSV_ASSIGNMENT_DELAY macAddrRespCnt_D_IN;
	if (notFF_EN) notFF <= `BSV_ASSIGNMENT_DELAY notFF_D_IN;
	if (selEepromOK_EN)
	  selEepromOK <= `BSV_ASSIGNMENT_DELAY selEepromOK_D_IN;
      end
    if (i2cC_rAddress_EN)
      i2cC_rAddress <= `BSV_ASSIGNMENT_DELAY i2cC_rAddress_D_IN;
    if (i2cC_rSlaveAddr_EN)
      i2cC_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY i2cC_rSlaveAddr_D_IN;
    if (i2cC_rWrite_EN) i2cC_rWrite <= `BSV_ASSIGNMENT_DELAY i2cC_rWrite_D_IN;
    if (i2cC_rWriteData_EN)
      i2cC_rWriteData <= `BSV_ASSIGNMENT_DELAY i2cC_rWriteData_D_IN;
    if (i2cC_vrReadData_0_EN)
      i2cC_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_0_D_IN;
    if (i2cC_vrReadData_1_EN)
      i2cC_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_1_D_IN;
    if (i2cC_vrReadData_2_EN)
      i2cC_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_2_D_IN;
    if (i2cC_vrReadData_3_EN)
      i2cC_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_3_D_IN;
    if (i2cC_vrReadData_4_EN)
      i2cC_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_4_D_IN;
    if (i2cC_vrReadData_5_EN)
      i2cC_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_5_D_IN;
    if (i2cC_vrReadData_6_EN)
      i2cC_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_6_D_IN;
    if (i2cC_vrReadData_7_EN)
      i2cC_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_7_D_IN;
    if (macV_EN) macV <= `BSV_ASSIGNMENT_DELAY macV_D_IN;
  end

  always@(posedge sys1_clk_O)
  begin
    if (sys1_rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        l2qc_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	qcl2_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (l2qc_ptr_EN) l2qc_ptr <= `BSV_ASSIGNMENT_DELAY l2qc_ptr_D_IN;
	if (mdi_rMDC_EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC_D_IN;
	if (mdi_rMDD_EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD_D_IN;
	if (mdi_rOutEn_EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn_D_IN;
	if (mdi_rState_EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState_D_IN;
	if (qcl2_ptr_EN) qcl2_ptr <= `BSV_ASSIGNMENT_DELAY qcl2_ptr_D_IN;
      end
    if (l2qc_sr_EN) l2qc_sr <= `BSV_ASSIGNMENT_DELAY l2qc_sr_D_IN;
    if (mdi_rPhyAddr_EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr_D_IN;
    if (mdi_rRegAddr_EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr_D_IN;
    if (mdi_rWrite_EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite_D_IN;
    if (mdi_rWriteData_EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData_D_IN;
    if (mdi_vrReadData_0_EN)
      mdi_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_0_D_IN;
    if (mdi_vrReadData_1_EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1_D_IN;
    if (mdi_vrReadData_10_EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10_D_IN;
    if (mdi_vrReadData_11_EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11_D_IN;
    if (mdi_vrReadData_12_EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12_D_IN;
    if (mdi_vrReadData_13_EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13_D_IN;
    if (mdi_vrReadData_14_EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14_D_IN;
    if (mdi_vrReadData_15_EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15_D_IN;
    if (mdi_vrReadData_2_EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2_D_IN;
    if (mdi_vrReadData_3_EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3_D_IN;
    if (mdi_vrReadData_4_EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4_D_IN;
    if (mdi_vrReadData_5_EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5_D_IN;
    if (mdi_vrReadData_6_EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6_D_IN;
    if (mdi_vrReadData_7_EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7_D_IN;
    if (mdi_vrReadData_8_EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8_D_IN;
    if (mdi_vrReadData_9_EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycleCount = 32'hAAAAAAAA;
    i2cC_rAddress = 8'hAA;
    i2cC_rOutEn = 1'h0;
    i2cC_rSCL = 1'h0;
    i2cC_rSDA = 1'h0;
    i2cC_rSlaveAddr = 7'h2A;
    i2cC_rState = 1'h0;
    i2cC_rWrite = 1'h0;
    i2cC_rWriteData = 8'hAA;
    i2cC_vrReadData_0 = 1'h0;
    i2cC_vrReadData_1 = 1'h0;
    i2cC_vrReadData_2 = 1'h0;
    i2cC_vrReadData_3 = 1'h0;
    i2cC_vrReadData_4 = 1'h0;
    i2cC_vrReadData_5 = 1'h0;
    i2cC_vrReadData_6 = 1'h0;
    i2cC_vrReadData_7 = 1'h0;
    idc_doResetCount = 4'hA;
    idc_preResetCount = 4'hA;
    iicDone = 1'h0;
    iicGo = 1'h0;
    iicPtr = 10'h2AA;
    iicTG = 1'h0;
    iicrom_serverAdapter_cnt = 3'h2;
    iicrom_serverAdapter_s1 = 2'h2;
    l2qc_ptr = 2'h2;
    l2qc_sr = 30'h2AAAAAAA;
    lcdNeedsInit = 1'h0;
    macAddrCnt = 11'h2AA;
    macAddrRead = 1'h0;
    macAddrRespCnt = 11'h2AA;
    macV = 48'hAAAAAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData_0 = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    notFF = 1'h0;
    qcl2_ptr = 2'h2;
    selEepromOK = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge sys0_clk)
  begin
    #0;
    if (sys0_rst_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_simulationTermination) $finish(32'd1);
    if (sys0_rst_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_iicrom_serverAdapter_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkFTop_kc705

