//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sat Feb  2 15:12:37 EST 2013
//
// Method conflict info:
// Method: crtS0_request_put
// Conflict-free: crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: crtS0_request_put
//
// Method: crtS0_response_get
// Conflict-free: crtS0_request_put,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: crtS0_response_get
//
// Method: axiM0_wrAddr_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_wrAddr_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_wrAddr_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_wrAddr_ready
//
// Method: axiM0_wrData_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_wrData_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_wrData_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_wrData_ready
//
// Method: axiM0_wrResp_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_wrResp_data
//
// Method: axiM0_wrResp_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_wrResp_valid
//
// Method: axiM0_wrResp_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_rdAddr_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_rdAddr_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
// Method: axiM0_rdAddr_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_rdAddr_ready
//
// Method: axiM0_rdResp_data
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_rdResp_data
//
// Method: axiM0_rdResp_valid
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_ready
// Conflicts: axiM0_rdResp_valid
//
// Method: axiM0_rdResp_ready
// Conflict-free: crtS0_request_put,
// 	       crtS0_response_get,
// 	       axiM0_wrAddr_data,
// 	       axiM0_wrAddr_valid,
// 	       axiM0_wrAddr_ready,
// 	       axiM0_wrData_data,
// 	       axiM0_wrData_valid,
// 	       axiM0_wrData_ready,
// 	       axiM0_wrResp_data,
// 	       axiM0_wrResp_valid,
// 	       axiM0_wrResp_ready,
// 	       axiM0_rdAddr_data,
// 	       axiM0_rdAddr_valid,
// 	       axiM0_rdAddr_ready,
// 	       axiM0_rdResp_data,
// 	       axiM0_rdResp_valid,
// 	       axiM0_rdResp_ready
//
//
// Ports:
// Name                         I/O  size props
// RDY_crtS0_request_put          O     1 reg
// crtS0_response_get             O    32 reg
// RDY_crtS0_response_get         O     1 reg
// axiM0_wrAddr_data              O    35 reg
// axiM0_wrAddr_valid             O     1
// axiM0_wrData_data              O    36 reg
// axiM0_wrData_valid             O     1
// axiM0_wrResp_ready             O     1 reg
// axiM0_rdAddr_data              O    35 reg
// axiM0_rdAddr_valid             O     1
// axiM0_rdResp_ready             O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// crtS0_request_put              I    32 reg
// axiM0_wrAddr_ready_value       I     1
// axiM0_wrData_ready_value       I     1
// axiM0_wrResp_data_value        I     2 reg
// axiM0_wrResp_valid_value       I     1
// axiM0_rdAddr_ready_value       I     1
// axiM0_rdResp_data_value        I    34 reg
// axiM0_rdResp_valid_value       I     1
// EN_crtS0_request_put           I     1
// EN_crtS0_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCRTServToA4LM(CLK,
		       RST_N,

		       crtS0_request_put,
		       EN_crtS0_request_put,
		       RDY_crtS0_request_put,

		       EN_crtS0_response_get,
		       crtS0_response_get,
		       RDY_crtS0_response_get,

		       axiM0_wrAddr_data,

		       axiM0_wrAddr_valid,

		       axiM0_wrAddr_ready_value,

		       axiM0_wrData_data,

		       axiM0_wrData_valid,

		       axiM0_wrData_ready_value,

		       axiM0_wrResp_data_value,

		       axiM0_wrResp_valid_value,

		       axiM0_wrResp_ready,

		       axiM0_rdAddr_data,

		       axiM0_rdAddr_valid,

		       axiM0_rdAddr_ready_value,

		       axiM0_rdResp_data_value,

		       axiM0_rdResp_valid_value,

		       axiM0_rdResp_ready);
  input  CLK;
  input  RST_N;

  // action method crtS0_request_put
  input  [31 : 0] crtS0_request_put;
  input  EN_crtS0_request_put;
  output RDY_crtS0_request_put;

  // actionvalue method crtS0_response_get
  input  EN_crtS0_response_get;
  output [31 : 0] crtS0_response_get;
  output RDY_crtS0_response_get;

  // value method axiM0_wrAddr_data
  output [34 : 0] axiM0_wrAddr_data;

  // value method axiM0_wrAddr_valid
  output axiM0_wrAddr_valid;

  // action method axiM0_wrAddr_ready
  input  axiM0_wrAddr_ready_value;

  // value method axiM0_wrData_data
  output [35 : 0] axiM0_wrData_data;

  // value method axiM0_wrData_valid
  output axiM0_wrData_valid;

  // action method axiM0_wrData_ready
  input  axiM0_wrData_ready_value;

  // action method axiM0_wrResp_data
  input  [1 : 0] axiM0_wrResp_data_value;

  // action method axiM0_wrResp_valid
  input  axiM0_wrResp_valid_value;

  // value method axiM0_wrResp_ready
  output axiM0_wrResp_ready;

  // value method axiM0_rdAddr_data
  output [34 : 0] axiM0_rdAddr_data;

  // value method axiM0_rdAddr_valid
  output axiM0_rdAddr_valid;

  // action method axiM0_rdAddr_ready
  input  axiM0_rdAddr_ready_value;

  // action method axiM0_rdResp_data
  input  [33 : 0] axiM0_rdResp_data_value;

  // action method axiM0_rdResp_valid
  input  axiM0_rdResp_valid_value;

  // value method axiM0_rdResp_ready
  output axiM0_rdResp_ready;

  // signals for module outputs
  wire [35 : 0] axiM0_wrData_data;
  wire [34 : 0] axiM0_rdAddr_data, axiM0_wrAddr_data;
  wire [31 : 0] crtS0_response_get;
  wire RDY_crtS0_request_put,
       RDY_crtS0_response_get,
       axiM0_rdAddr_valid,
       axiM0_rdResp_ready,
       axiM0_wrAddr_valid,
       axiM0_wrData_valid,
       axiM0_wrResp_ready;

  // register a4l_a4rdAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4rdAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdAddr_fifof_cntr_r_D_IN;
  wire a4l_a4rdAddr_fifof_cntr_r_EN;

  // register a4l_a4rdAddr_fifof_q_0
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0;
  wire [34 : 0] a4l_a4rdAddr_fifof_q_0_D_IN;
  wire a4l_a4rdAddr_fifof_q_0_EN;

  // register a4l_a4rdAddr_fifof_q_1
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1;
  wire [34 : 0] a4l_a4rdAddr_fifof_q_1_D_IN;
  wire a4l_a4rdAddr_fifof_q_1_EN;

  // register a4l_a4wrAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4wrAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrAddr_fifof_cntr_r_D_IN;
  wire a4l_a4wrAddr_fifof_cntr_r_EN;

  // register a4l_a4wrAddr_fifof_q_0
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0;
  wire [34 : 0] a4l_a4wrAddr_fifof_q_0_D_IN;
  wire a4l_a4wrAddr_fifof_q_0_EN;

  // register a4l_a4wrAddr_fifof_q_1
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1;
  wire [34 : 0] a4l_a4wrAddr_fifof_q_1_D_IN;
  wire a4l_a4wrAddr_fifof_q_1_EN;

  // register a4l_a4wrData_fifof_cntr_r
  reg [1 : 0] a4l_a4wrData_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrData_fifof_cntr_r_D_IN;
  wire a4l_a4wrData_fifof_cntr_r_EN;

  // register a4l_a4wrData_fifof_q_0
  reg [35 : 0] a4l_a4wrData_fifof_q_0;
  wire [35 : 0] a4l_a4wrData_fifof_q_0_D_IN;
  wire a4l_a4wrData_fifof_q_0_EN;

  // register a4l_a4wrData_fifof_q_1
  reg [35 : 0] a4l_a4wrData_fifof_q_1;
  wire [35 : 0] a4l_a4wrData_fifof_q_1_D_IN;
  wire a4l_a4wrData_fifof_q_1_EN;

  // register adlLastResp
  reg [11 : 0] adlLastResp;
  wire [11 : 0] adlLastResp_D_IN;
  wire adlLastResp_EN;

  // register adlRemain
  reg [11 : 0] adlRemain;
  wire [11 : 0] adlRemain_D_IN;
  wire adlRemain_EN;

  // register doInFlight
  reg doInFlight;
  wire doInFlight_D_IN, doInFlight_EN;

  // register fault
  reg fault;
  wire fault_D_IN, fault_EN;

  // register isCmdCRH
  reg isCmdCRH;
  wire isCmdCRH_D_IN, isCmdCRH_EN;

  // register lastTag
  reg [8 : 0] lastTag;
  wire [8 : 0] lastTag_D_IN;
  wire lastTag_EN;

  // register thisCRH
  reg [34 : 0] thisCRH;
  wire [34 : 0] thisCRH_D_IN;
  wire thisCRH_EN;

  // ports of submodule a4l_a4rdResp_fifof
  wire [33 : 0] a4l_a4rdResp_fifof_D_IN;
  wire a4l_a4rdResp_fifof_CLR,
       a4l_a4rdResp_fifof_DEQ,
       a4l_a4rdResp_fifof_ENQ,
       a4l_a4rdResp_fifof_FULL_N;

  // ports of submodule a4l_a4wrResp_fifof
  wire [1 : 0] a4l_a4wrResp_fifof_D_IN;
  wire a4l_a4wrResp_fifof_CLR,
       a4l_a4wrResp_fifof_DEQ,
       a4l_a4wrResp_fifof_ENQ,
       a4l_a4wrResp_fifof_FULL_N;

  // ports of submodule crtCmdF
  wire [31 : 0] crtCmdF_D_IN, crtCmdF_D_OUT;
  wire crtCmdF_CLR, crtCmdF_DEQ, crtCmdF_EMPTY_N, crtCmdF_ENQ, crtCmdF_FULL_N;

  // ports of submodule crtRespF
  wire [31 : 0] crtRespF_D_IN, crtRespF_D_OUT;
  wire crtRespF_CLR, crtRespF_DEQ, crtRespF_EMPTY_N, crtRespF_ENQ;

  // ports of submodule respBuffer
  wire [31 : 0] respBuffer_D_IN;
  wire respBuffer_CLR, respBuffer_DEQ, respBuffer_ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_deq,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4rdResp_do_enq,
       CAN_FIRE_RL_a4l_a4wrAddr_do_deq,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrData_do_deq,
       CAN_FIRE_RL_a4l_a4wrData_fifof_both,
       CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrResp_do_enq,
       CAN_FIRE_RL_crt_cmd_ingress,
       CAN_FIRE_axiM0_rdAddr_ready,
       CAN_FIRE_axiM0_rdResp_data,
       CAN_FIRE_axiM0_rdResp_valid,
       CAN_FIRE_axiM0_wrAddr_ready,
       CAN_FIRE_axiM0_wrData_ready,
       CAN_FIRE_axiM0_wrResp_data,
       CAN_FIRE_axiM0_wrResp_valid,
       CAN_FIRE_crtS0_request_put,
       CAN_FIRE_crtS0_response_get,
       WILL_FIRE_RL_a4l_a4rdAddr_do_deq,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4rdResp_do_enq,
       WILL_FIRE_RL_a4l_a4wrAddr_do_deq,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrData_do_deq,
       WILL_FIRE_RL_a4l_a4wrData_fifof_both,
       WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrResp_do_enq,
       WILL_FIRE_RL_crt_cmd_ingress,
       WILL_FIRE_axiM0_rdAddr_ready,
       WILL_FIRE_axiM0_rdResp_data,
       WILL_FIRE_axiM0_rdResp_valid,
       WILL_FIRE_axiM0_wrAddr_ready,
       WILL_FIRE_axiM0_wrData_ready,
       WILL_FIRE_axiM0_wrResp_data,
       WILL_FIRE_axiM0_wrResp_valid,
       WILL_FIRE_crtS0_request_put,
       WILL_FIRE_crtS0_response_get;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_1,
	       MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_1,
	       MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_1;

  // remaining internal signals
  reg [2 : 0] CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q1;

  // action method crtS0_request_put
  assign RDY_crtS0_request_put = crtCmdF_FULL_N ;
  assign CAN_FIRE_crtS0_request_put = crtCmdF_FULL_N ;
  assign WILL_FIRE_crtS0_request_put = EN_crtS0_request_put ;

  // actionvalue method crtS0_response_get
  assign crtS0_response_get = crtRespF_D_OUT ;
  assign RDY_crtS0_response_get = crtRespF_EMPTY_N ;
  assign CAN_FIRE_crtS0_response_get = crtRespF_EMPTY_N ;
  assign WILL_FIRE_crtS0_response_get = EN_crtS0_response_get ;

  // value method axiM0_wrAddr_data
  assign axiM0_wrAddr_data = a4l_a4wrAddr_fifof_q_0 ;

  // value method axiM0_wrAddr_valid
  assign axiM0_wrAddr_valid = a4l_a4wrAddr_fifof_cntr_r != 2'd0 ;

  // action method axiM0_wrAddr_ready
  assign CAN_FIRE_axiM0_wrAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrAddr_ready = 1'd1 ;

  // value method axiM0_wrData_data
  assign axiM0_wrData_data = a4l_a4wrData_fifof_q_0 ;

  // value method axiM0_wrData_valid
  assign axiM0_wrData_valid = a4l_a4wrData_fifof_cntr_r != 2'd0 ;

  // action method axiM0_wrData_ready
  assign CAN_FIRE_axiM0_wrData_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrData_ready = 1'd1 ;

  // action method axiM0_wrResp_data
  assign CAN_FIRE_axiM0_wrResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_data = 1'd1 ;

  // action method axiM0_wrResp_valid
  assign CAN_FIRE_axiM0_wrResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_valid = 1'd1 ;

  // value method axiM0_wrResp_ready
  assign axiM0_wrResp_ready = a4l_a4wrResp_fifof_FULL_N ;

  // value method axiM0_rdAddr_data
  assign axiM0_rdAddr_data = a4l_a4rdAddr_fifof_q_0 ;

  // value method axiM0_rdAddr_valid
  assign axiM0_rdAddr_valid = a4l_a4rdAddr_fifof_cntr_r != 2'd0 ;

  // action method axiM0_rdAddr_ready
  assign CAN_FIRE_axiM0_rdAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_rdAddr_ready = 1'd1 ;

  // action method axiM0_rdResp_data
  assign CAN_FIRE_axiM0_rdResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_data = 1'd1 ;

  // action method axiM0_rdResp_valid
  assign CAN_FIRE_axiM0_rdResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_valid = 1'd1 ;

  // value method axiM0_rdResp_ready
  assign axiM0_rdResp_ready = a4l_a4rdResp_fifof_FULL_N ;

  // submodule a4l_a4rdResp_fifof
  FIFO2 #(.width(32'd34), .guarded(32'd1)) a4l_a4rdResp_fifof(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(a4l_a4rdResp_fifof_D_IN),
							      .ENQ(a4l_a4rdResp_fifof_ENQ),
							      .DEQ(a4l_a4rdResp_fifof_DEQ),
							      .CLR(a4l_a4rdResp_fifof_CLR),
							      .D_OUT(),
							      .FULL_N(a4l_a4rdResp_fifof_FULL_N),
							      .EMPTY_N());

  // submodule a4l_a4wrResp_fifof
  FIFO2 #(.width(32'd2), .guarded(32'd1)) a4l_a4wrResp_fifof(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(a4l_a4wrResp_fifof_D_IN),
							     .ENQ(a4l_a4wrResp_fifof_ENQ),
							     .DEQ(a4l_a4wrResp_fifof_DEQ),
							     .CLR(a4l_a4wrResp_fifof_CLR),
							     .D_OUT(),
							     .FULL_N(a4l_a4wrResp_fifof_FULL_N),
							     .EMPTY_N());

  // submodule crtCmdF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) crtCmdF(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(crtCmdF_D_IN),
						   .ENQ(crtCmdF_ENQ),
						   .DEQ(crtCmdF_DEQ),
						   .CLR(crtCmdF_CLR),
						   .D_OUT(crtCmdF_D_OUT),
						   .FULL_N(crtCmdF_FULL_N),
						   .EMPTY_N(crtCmdF_EMPTY_N));

  // submodule crtRespF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) crtRespF(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(crtRespF_D_IN),
						    .ENQ(crtRespF_ENQ),
						    .DEQ(crtRespF_DEQ),
						    .CLR(crtRespF_CLR),
						    .D_OUT(crtRespF_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(crtRespF_EMPTY_N));

  // submodule respBuffer
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) respBuffer(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(respBuffer_D_IN),
					  .ENQ(respBuffer_ENQ),
					  .DEQ(respBuffer_DEQ),
					  .CLR(respBuffer_CLR),
					  .D_OUT(),
					  .FULL_N(),
					  .EMPTY_N());

  // rule RL_crt_cmd_ingress
  assign CAN_FIRE_RL_crt_cmd_ingress = crtCmdF_EMPTY_N ;
  assign WILL_FIRE_RL_crt_cmd_ingress = crtCmdF_EMPTY_N ;

  // rule RL_a4l_a4wrAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_deq =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd0 && axiM0_wrAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_deq = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // rule RL_a4l_a4wrAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr = 1'b0 ;

  // rule RL_a4l_a4wrAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // rule RL_a4l_a4wrAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_both = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_both = 1'b0 ;

  // rule RL_a4l_a4wrData_do_deq
  assign CAN_FIRE_RL_a4l_a4wrData_do_deq =
	     a4l_a4wrData_fifof_cntr_r != 2'd0 && axiM0_wrData_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_deq = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // rule RL_a4l_a4wrData_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr = 1'b0 ;

  // rule RL_a4l_a4wrData_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // rule RL_a4l_a4wrData_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_both = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_both = 1'b0 ;

  // rule RL_a4l_a4wrResp_do_enq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_enq =
	     a4l_a4wrResp_fifof_FULL_N && axiM0_wrResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_enq = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;

  // rule RL_a4l_a4rdAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_deq =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd0 && axiM0_rdAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_deq = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // rule RL_a4l_a4rdAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr = 1'b0 ;

  // rule RL_a4l_a4rdAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // rule RL_a4l_a4rdAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_both = 1'b0 ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_both = 1'b0 ;

  // rule RL_a4l_a4rdResp_do_enq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_enq =
	     a4l_a4rdResp_fifof_FULL_N && axiM0_rdResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_enq = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_1 =
	     a4l_a4rdAddr_fifof_cntr_r - 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_1 =
	     a4l_a4wrAddr_fifof_cntr_r - 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_1 =
	     a4l_a4wrData_fifof_cntr_r - 2'd1 ;

  // register a4l_a4rdAddr_fifof_cntr_r
  assign a4l_a4rdAddr_fifof_cntr_r_D_IN =
	     MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_1 ;
  assign a4l_a4rdAddr_fifof_cntr_r_EN = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // register a4l_a4rdAddr_fifof_q_0
  assign a4l_a4rdAddr_fifof_q_0_D_IN = a4l_a4rdAddr_fifof_q_1 ;
  assign a4l_a4rdAddr_fifof_q_0_EN = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // register a4l_a4rdAddr_fifof_q_1
  assign a4l_a4rdAddr_fifof_q_1_D_IN = 35'd0 ;
  assign a4l_a4rdAddr_fifof_q_1_EN = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // register a4l_a4wrAddr_fifof_cntr_r
  assign a4l_a4wrAddr_fifof_cntr_r_D_IN =
	     MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_1 ;
  assign a4l_a4wrAddr_fifof_cntr_r_EN = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // register a4l_a4wrAddr_fifof_q_0
  assign a4l_a4wrAddr_fifof_q_0_D_IN = a4l_a4wrAddr_fifof_q_1 ;
  assign a4l_a4wrAddr_fifof_q_0_EN = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // register a4l_a4wrAddr_fifof_q_1
  assign a4l_a4wrAddr_fifof_q_1_D_IN = 35'd0 ;
  assign a4l_a4wrAddr_fifof_q_1_EN = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // register a4l_a4wrData_fifof_cntr_r
  assign a4l_a4wrData_fifof_cntr_r_D_IN =
	     MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_1 ;
  assign a4l_a4wrData_fifof_cntr_r_EN = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // register a4l_a4wrData_fifof_q_0
  assign a4l_a4wrData_fifof_q_0_D_IN = a4l_a4wrData_fifof_q_1 ;
  assign a4l_a4wrData_fifof_q_0_EN = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // register a4l_a4wrData_fifof_q_1
  assign a4l_a4wrData_fifof_q_1_D_IN = 36'd0 ;
  assign a4l_a4wrData_fifof_q_1_EN = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // register adlLastResp
  assign adlLastResp_D_IN = 12'h0 ;
  assign adlLastResp_EN = 1'b0 ;

  // register adlRemain
  assign adlRemain_D_IN = 12'h0 ;
  assign adlRemain_EN = 1'b0 ;

  // register doInFlight
  assign doInFlight_D_IN = 1'b0 ;
  assign doInFlight_EN = 1'b0 ;

  // register fault
  assign fault_D_IN = 1'd1 ;
  assign fault_EN =
	     crtCmdF_EMPTY_N && isCmdCRH && crtCmdF_D_OUT[5:4] == 2'd3 ;

  // register isCmdCRH
  assign isCmdCRH_D_IN = 1'b0 ;
  assign isCmdCRH_EN = 1'b0 ;

  // register lastTag
  assign lastTag_D_IN = 9'h0 ;
  assign lastTag_EN = 1'b0 ;

  // register thisCRH
  assign thisCRH_D_IN =
	     { CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q1, crtCmdF_D_OUT } ;
  assign thisCRH_EN =
	     crtCmdF_EMPTY_N && isCmdCRH &&
	     (crtCmdF_D_OUT[5:4] == 2'd0 || crtCmdF_D_OUT[5:4] == 2'd1 ||
	      crtCmdF_D_OUT[5:4] == 2'd2) ;

  // submodule a4l_a4rdResp_fifof
  assign a4l_a4rdResp_fifof_D_IN = axiM0_rdResp_data_value ;
  assign a4l_a4rdResp_fifof_ENQ = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;
  assign a4l_a4rdResp_fifof_DEQ = 1'b0 ;
  assign a4l_a4rdResp_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrResp_fifof
  assign a4l_a4wrResp_fifof_D_IN = axiM0_wrResp_data_value ;
  assign a4l_a4wrResp_fifof_ENQ = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;
  assign a4l_a4wrResp_fifof_DEQ = 1'b0 ;
  assign a4l_a4wrResp_fifof_CLR = 1'b0 ;

  // submodule crtCmdF
  assign crtCmdF_D_IN = crtS0_request_put ;
  assign crtCmdF_ENQ = EN_crtS0_request_put ;
  assign crtCmdF_DEQ = crtCmdF_EMPTY_N ;
  assign crtCmdF_CLR = 1'b0 ;

  // submodule crtRespF
  assign crtRespF_D_IN = 32'h0 ;
  assign crtRespF_ENQ = 1'b0 ;
  assign crtRespF_DEQ = EN_crtS0_response_get ;
  assign crtRespF_CLR = 1'b0 ;

  // submodule respBuffer
  assign respBuffer_D_IN = 32'h0 ;
  assign respBuffer_ENQ = 1'b0 ;
  assign respBuffer_DEQ = 1'b0 ;
  assign respBuffer_CLR = 1'b0 ;

  // remaining internal signals
  always@(crtCmdF_D_OUT)
  begin
    case (crtCmdF_D_OUT[5:4])
      2'd0: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q1 = 3'd0;
      2'd1: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q1 = 3'd1;
      default: CASE_crtCmdFD_OUT_BITS_5_TO_4_0_0_1_1_2__q1 = 3'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	adlLastResp <= `BSV_ASSIGNMENT_DELAY 12'd0;
	adlRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	doInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fault <= `BSV_ASSIGNMENT_DELAY 1'd0;
	isCmdCRH <= `BSV_ASSIGNMENT_DELAY 1'd1;
	lastTag <= `BSV_ASSIGNMENT_DELAY 9'd170;
	thisCRH <= `BSV_ASSIGNMENT_DELAY 35'h4AAAAAAAA;
      end
    else
      begin
        if (a4l_a4rdAddr_fifof_cntr_r_EN)
	  a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_cntr_r_D_IN;
	if (a4l_a4rdAddr_fifof_q_0_EN)
	  a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_0_D_IN;
	if (a4l_a4rdAddr_fifof_q_1_EN)
	  a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_1_D_IN;
	if (a4l_a4wrAddr_fifof_cntr_r_EN)
	  a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_cntr_r_D_IN;
	if (a4l_a4wrAddr_fifof_q_0_EN)
	  a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_0_D_IN;
	if (a4l_a4wrAddr_fifof_q_1_EN)
	  a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_1_D_IN;
	if (a4l_a4wrData_fifof_cntr_r_EN)
	  a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_cntr_r_D_IN;
	if (a4l_a4wrData_fifof_q_0_EN)
	  a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_0_D_IN;
	if (a4l_a4wrData_fifof_q_1_EN)
	  a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_1_D_IN;
	if (adlLastResp_EN)
	  adlLastResp <= `BSV_ASSIGNMENT_DELAY adlLastResp_D_IN;
	if (adlRemain_EN) adlRemain <= `BSV_ASSIGNMENT_DELAY adlRemain_D_IN;
	if (doInFlight_EN)
	  doInFlight <= `BSV_ASSIGNMENT_DELAY doInFlight_D_IN;
	if (fault_EN) fault <= `BSV_ASSIGNMENT_DELAY fault_D_IN;
	if (isCmdCRH_EN) isCmdCRH <= `BSV_ASSIGNMENT_DELAY isCmdCRH_D_IN;
	if (lastTag_EN) lastTag <= `BSV_ASSIGNMENT_DELAY lastTag_D_IN;
	if (thisCRH_EN) thisCRH <= `BSV_ASSIGNMENT_DELAY thisCRH_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdAddr_fifof_cntr_r = 2'h2;
    a4l_a4rdAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4rdAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_cntr_r = 2'h2;
    a4l_a4wrAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrData_fifof_cntr_r = 2'h2;
    a4l_a4wrData_fifof_q_0 = 36'hAAAAAAAAA;
    a4l_a4wrData_fifof_q_1 = 36'hAAAAAAAAA;
    adlLastResp = 12'hAAA;
    adlRemain = 12'hAAA;
    doInFlight = 1'h0;
    fault = 1'h0;
    isCmdCRH = 1'h0;
    lastTag = 9'h0AA;
    thisCRH = 35'h2AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkCRTServToA4LM

