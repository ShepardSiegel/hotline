//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Mon Sep  2 12:45:37 EDT 2013
//
// Method conflict info:
// (none)
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // register done
  reg done;
  wire done_D_IN, done_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_r, CAN_FIRE_RL_r2, WILL_FIRE_RL_r, WILL_FIRE_RL_r2;

  // rule RL_r
  assign CAN_FIRE_RL_r = !done ;
  assign WILL_FIRE_RL_r = CAN_FIRE_RL_r ;

  // rule RL_r2
  assign CAN_FIRE_RL_r2 = done ;
  assign WILL_FIRE_RL_r2 = done ;

  // register done
  assign done_D_IN = 1'd1 ;
  assign done_EN = CAN_FIRE_RL_r ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (done_EN) done <= `BSV_ASSIGNMENT_DELAY done_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    done = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v1[0] -> %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v1[1] -> %b", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v1[2] -> %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v1[3] -> %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v2[0] -> %d", $unsigned(8'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v2[1] -> %d", $unsigned(8'd32));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v3[0] -> %b", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v3[1] -> %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v3[2] -> %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r) $display("v4[0] -> %d", $unsigned(4'd3));
    if (RST_N != `BSV_RESET_VALUE) if (done) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTest

