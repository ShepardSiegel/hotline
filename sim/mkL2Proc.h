/*
 * Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
 * 
 * On Sun Feb 10 16:32:37 EST 2013
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkL2Proc_h__
#define __mkL2Proc_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkL2Proc module */
class MOD_mkL2Proc : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_dgRxCount;
  MOD_Fifo<tUInt32> INST_dgRxF;
  MOD_Reg<tUInt32> INST_dgTxCount;
  MOD_Fifo<tUInt32> INST_dgTxF;
  MOD_Reg<tUInt64> INST_egDA;
  MOD_Reg<tUInt8> INST_egL2Hdr;
  MOD_Reg<tUInt8> INST_egPDU;
  MOD_Reg<tUInt8> INST_egPtr;
  MOD_Reg<tUInt64> INST_egSA;
  MOD_Reg<tUInt64> INST_igDA;
  MOD_Reg<tUInt8> INST_igL2Hdr;
  MOD_Reg<tUInt8> INST_igPDU;
  MOD_Reg<tUInt8> INST_igPtr;
  MOD_Reg<tUInt64> INST_igSA;
  MOD_Fifo<tUInt64> INST_igSAF;
  MOD_Reg<tUInt64> INST_igSR;
  MOD_Reg<tUInt32> INST_igTyp;
  MOD_Reg<tUInt8> INST_l2Egress;
  MOD_Wire<tUInt8> INST_l2Egress_1;
  MOD_Reg<tUInt8> INST_l2Ingress;
  MOD_Wire<tUInt8> INST_l2Ingress_1;
  MOD_Fifo<tUInt32> INST_l2RxF;
  MOD_Fifo<tUInt32> INST_l2TxF;
  MOD_Reg<tUInt64> INST_uMAddr;
 
 /* Constructor */
 public:
  MOD_mkL2Proc(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_server_request_put;
  tUInt8 PORT_EN_server_response_get;
  tUInt8 PORT_EN_client_request_get;
  tUInt8 PORT_EN_client_response_put;
  tUInt8 PORT_EN_macAddr;
  tUInt32 PORT_server_request_put;
  tUInt32 PORT_client_response_put;
  tUInt64 PORT_macAddr_u;
  tUInt8 PORT_RDY_server_request_put;
  tUInt32 PORT_server_response_get;
  tUInt8 PORT_RDY_server_response_get;
  tUInt32 PORT_client_request_get;
  tUInt8 PORT_RDY_client_request_get;
  tUInt8 PORT_RDY_client_response_put;
  tUInt8 PORT_RDY_macAddr;
  tUInt8 PORT_l2Rx;
  tUInt8 PORT_RDY_l2Rx;
  tUInt8 PORT_l2Tx;
  tUInt8 PORT_RDY_l2Tx;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_macAddr;
  tUInt8 DEF_WILL_FIRE_client_response_put;
  tUInt8 DEF_WILL_FIRE_client_request_get;
  tUInt8 DEF_WILL_FIRE_server_response_get;
  tUInt8 DEF_WILL_FIRE_server_request_put;
  tUInt8 DEF_WILL_FIRE_RL_l2_egress_payload;
  tUInt8 DEF_CAN_FIRE_RL_l2_egress_payload;
  tUInt8 DEF_WILL_FIRE_RL_l2_egress_header;
  tUInt8 DEF_CAN_FIRE_RL_l2_egress_header;
  tUInt8 DEF_WILL_FIRE_RL_l2_ingress_payload;
  tUInt8 DEF_CAN_FIRE_RL_l2_ingress_payload;
  tUInt8 DEF_WILL_FIRE_RL_l2_ingress_header;
  tUInt8 DEF_CAN_FIRE_RL_l2_ingress_header;
  tUInt8 DEF_WILL_FIRE_RL_l2Egress__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_l2Egress__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_l2Ingress__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_l2Ingress__dreg_update;
  tUInt8 DEF_CAN_FIRE_l2Tx;
  tUInt8 DEF_CAN_FIRE_l2Rx;
  tUInt8 DEF_CAN_FIRE_macAddr;
  tUInt8 DEF_CAN_FIRE_client_response_put;
  tUInt8 DEF_CAN_FIRE_client_request_get;
  tUInt8 DEF_CAN_FIRE_server_response_get;
  tUInt8 DEF_CAN_FIRE_server_request_put;
  tUInt8 DEF_b__h5826;
  tUInt8 DEF_b__h1929;
  tUInt8 DEF_igPDU__h5674;
  tUInt8 DEF_egPtr_6_EQ_0___d57;
  tUInt8 DEF_egPtr_6_EQ_13___d59;
  tUInt8 DEF_egPtr_6_EQ_14___d88;
  tUInt8 DEF_igPtr_EQ_11___d9;
 
 /* Local definitions */
 private:
  tUInt8 DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19;
  tUInt64 DEF_v__h11391;
  tUInt32 DEF_l2RxF_first____d16;
  tUInt8 DEF_l2RxF_first__6_BITS_7_TO_0___d28;
  tUInt8 DEF_l2RxF_first__6_BITS_9_TO_8___d17;
  tUInt8 DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29;
  tUInt8 DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18;
 
 /* Rules */
 public:
  void RL_l2Ingress__dreg_update();
  void RL_l2Egress__dreg_update();
  void RL_l2_ingress_header();
  void RL_l2_ingress_payload();
  void RL_l2_egress_header();
  void RL_l2_egress_payload();
 
 /* Methods */
 public:
  void METH_server_request_put(tUInt32 ARG_server_request_put);
  tUInt8 METH_RDY_server_request_put();
  tUInt32 METH_server_response_get();
  tUInt8 METH_RDY_server_response_get();
  tUInt32 METH_client_request_get();
  tUInt8 METH_RDY_client_request_get();
  void METH_client_response_put(tUInt32 ARG_client_response_put);
  tUInt8 METH_RDY_client_response_put();
  void METH_macAddr(tUInt64 ARG_macAddr_u);
  tUInt8 METH_RDY_macAddr();
  tUInt8 METH_l2Rx();
  tUInt8 METH_RDY_l2Rx();
  tUInt8 METH_l2Tx();
  tUInt8 METH_RDY_l2Tx();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkL2Proc &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkL2Proc &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkL2Proc &backing);
};

#endif /* ifndef __mkL2Proc_h__ */
