/*
 * Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
 * 
 * On Sun Feb 10 10:16:41 EST 2013
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkHCrtCompleter2Axi_h__
#define __mkHCrtCompleter2Axi_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkHCrtCompleter2Axi module */
class MOD_mkHCrtCompleter2Axi : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_a4l_a4rdAddr_deq_deq;
  MOD_Wire<tUInt8> INST_a4l_a4rdAddr_deq_ready;
  MOD_Reg<tUInt8> INST_a4l_a4rdAddr_fifof_cntr_r;
  MOD_Wire<tUInt8> INST_a4l_a4rdAddr_fifof_dequeueing;
  MOD_Wire<tUInt8> INST_a4l_a4rdAddr_fifof_enqueueing;
  MOD_Reg<tUInt64> INST_a4l_a4rdAddr_fifof_q_0;
  MOD_Reg<tUInt64> INST_a4l_a4rdAddr_fifof_q_1;
  MOD_Wire<tUInt64> INST_a4l_a4rdAddr_fifof_x_wire;
  MOD_Wire<tUInt64> INST_a4l_a4rdResp_data_wire;
  MOD_Wire<tUInt8> INST_a4l_a4rdResp_enq_enq;
  MOD_Wire<tUInt8> INST_a4l_a4rdResp_enq_valid;
  MOD_Fifo<tUInt64> INST_a4l_a4rdResp_fifof;
  MOD_Wire<tUInt8> INST_a4l_a4wrAddr_deq_deq;
  MOD_Wire<tUInt8> INST_a4l_a4wrAddr_deq_ready;
  MOD_Reg<tUInt8> INST_a4l_a4wrAddr_fifof_cntr_r;
  MOD_Wire<tUInt8> INST_a4l_a4wrAddr_fifof_dequeueing;
  MOD_Wire<tUInt8> INST_a4l_a4wrAddr_fifof_enqueueing;
  MOD_Reg<tUInt64> INST_a4l_a4wrAddr_fifof_q_0;
  MOD_Reg<tUInt64> INST_a4l_a4wrAddr_fifof_q_1;
  MOD_Wire<tUInt64> INST_a4l_a4wrAddr_fifof_x_wire;
  MOD_Wire<tUInt8> INST_a4l_a4wrData_deq_deq;
  MOD_Wire<tUInt8> INST_a4l_a4wrData_deq_ready;
  MOD_Reg<tUInt8> INST_a4l_a4wrData_fifof_cntr_r;
  MOD_Wire<tUInt8> INST_a4l_a4wrData_fifof_dequeueing;
  MOD_Wire<tUInt8> INST_a4l_a4wrData_fifof_enqueueing;
  MOD_Reg<tUInt64> INST_a4l_a4wrData_fifof_q_0;
  MOD_Reg<tUInt64> INST_a4l_a4wrData_fifof_q_1;
  MOD_Wire<tUInt64> INST_a4l_a4wrData_fifof_x_wire;
  MOD_Wire<tUInt8> INST_a4l_a4wrResp_data_wire;
  MOD_Wire<tUInt8> INST_a4l_a4wrResp_enq_enq;
  MOD_Wire<tUInt8> INST_a4l_a4wrResp_enq_valid;
  MOD_Fifo<tUInt8> INST_a4l_a4wrResp_fifof;
  MOD_Reg<tUInt32> INST_adlLastResp;
  MOD_Reg<tUInt32> INST_adlRemain;
  MOD_Fifo<tUInt32> INST_crtCmdF;
  MOD_Fifo<tUInt32> INST_crtRespF;
  MOD_Reg<tUInt8> INST_doInFlight;
  MOD_Reg<tUInt8> INST_isCmdCRH;
  MOD_Reg<tUInt32> INST_lastTag;
  MOD_Reg<tUInt8> INST_modActive;
  MOD_Wire<tUInt8> INST_modActive_1;
  MOD_Reg<tUInt8> INST_modFaulted;
  MOD_Wire<tUInt8> INST_modFaulted_1;
  MOD_Fifo<tUInt32> INST_respBuffer;
  MOD_Reg<tUInt64> INST_thisCRH;
 
 /* Constructor */
 public:
  MOD_mkHCrtCompleter2Axi(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_crtS0_request_put;
  tUInt8 PORT_EN_crtS0_response_get;
  tUInt32 PORT_crtS0_request_put;
  tUInt8 PORT_axiM0_wrAddr_ready_value;
  tUInt8 PORT_axiM0_wrData_ready_value;
  tUInt8 PORT_axiM0_wrResp_data_value;
  tUInt8 PORT_axiM0_wrResp_valid_value;
  tUInt8 PORT_axiM0_rdAddr_ready_value;
  tUInt64 PORT_axiM0_rdResp_data_value;
  tUInt8 PORT_axiM0_rdResp_valid_value;
  tUInt8 PORT_RDY_crtS0_request_put;
  tUInt32 PORT_crtS0_response_get;
  tUInt8 PORT_RDY_crtS0_response_get;
  tUInt64 PORT_axiM0_wrAddr_data;
  tUInt8 PORT_axiM0_wrAddr_valid;
  tUInt64 PORT_axiM0_wrData_data;
  tUInt8 PORT_axiM0_wrData_valid;
  tUInt8 PORT_axiM0_wrResp_ready;
  tUInt64 PORT_axiM0_rdAddr_data;
  tUInt8 PORT_axiM0_rdAddr_valid;
  tUInt8 PORT_axiM0_rdResp_ready;
  tUInt8 PORT_isActive;
  tUInt8 PORT_RDY_isActive;
  tUInt8 PORT_isFaulted;
  tUInt8 PORT_RDY_isFaulted;
  tUInt8 PORT_RDY_axiM0_wrAddr_data;
  tUInt8 PORT_RDY_axiM0_wrAddr_valid;
  tUInt8 PORT_RDY_axiM0_wrAddr_ready;
  tUInt8 PORT_RDY_axiM0_wrData_data;
  tUInt8 PORT_RDY_axiM0_wrData_valid;
  tUInt8 PORT_RDY_axiM0_wrData_ready;
  tUInt8 PORT_RDY_axiM0_wrResp_data;
  tUInt8 PORT_RDY_axiM0_wrResp_valid;
  tUInt8 PORT_RDY_axiM0_wrResp_ready;
  tUInt8 PORT_RDY_axiM0_rdAddr_data;
  tUInt8 PORT_RDY_axiM0_rdAddr_valid;
  tUInt8 PORT_RDY_axiM0_rdAddr_ready;
  tUInt8 PORT_RDY_axiM0_rdResp_data;
  tUInt8 PORT_RDY_axiM0_rdResp_valid;
  tUInt8 PORT_RDY_axiM0_rdResp_ready;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_axiM0_rdResp_valid;
  tUInt8 DEF_WILL_FIRE_axiM0_rdResp_data;
  tUInt8 DEF_WILL_FIRE_axiM0_rdAddr_ready;
  tUInt8 DEF_WILL_FIRE_axiM0_wrResp_valid;
  tUInt8 DEF_WILL_FIRE_axiM0_wrResp_data;
  tUInt8 DEF_WILL_FIRE_axiM0_wrData_ready;
  tUInt8 DEF_WILL_FIRE_axiM0_wrAddr_ready;
  tUInt8 DEF_WILL_FIRE_crtS0_response_get;
  tUInt8 DEF_WILL_FIRE_crtS0_request_put;
  tUInt8 DEF_WILL_FIRE_RL_crt_cmd_ingress;
  tUInt8 DEF_CAN_FIRE_RL_crt_cmd_ingress;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4rdResp_do_enq;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4rdResp_do_enq;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4rdAddr_do_deq;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4rdAddr_do_deq;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4rdAddr_fifof_both;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4rdAddr_fifof_both;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrResp_do_enq;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrResp_do_enq;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrData_do_deq;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrData_do_deq;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrData_fifof_both;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrData_fifof_both;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrAddr_do_deq;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrAddr_do_deq;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrAddr_fifof_both;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrAddr_fifof_both;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr;
  tUInt8 DEF_WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr;
  tUInt8 DEF_CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr;
  tUInt8 DEF_WILL_FIRE_RL_modFaulted__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_modFaulted__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_modActive__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_modActive__dreg_update;
  tUInt8 DEF_CAN_FIRE_isFaulted;
  tUInt8 DEF_CAN_FIRE_isActive;
  tUInt8 DEF_CAN_FIRE_axiM0_rdResp_ready;
  tUInt8 DEF_CAN_FIRE_axiM0_rdResp_valid;
  tUInt8 DEF_CAN_FIRE_axiM0_rdResp_data;
  tUInt8 DEF_CAN_FIRE_axiM0_rdAddr_ready;
  tUInt8 DEF_CAN_FIRE_axiM0_rdAddr_valid;
  tUInt8 DEF_CAN_FIRE_axiM0_rdAddr_data;
  tUInt8 DEF_CAN_FIRE_axiM0_wrResp_ready;
  tUInt8 DEF_CAN_FIRE_axiM0_wrResp_valid;
  tUInt8 DEF_CAN_FIRE_axiM0_wrResp_data;
  tUInt8 DEF_CAN_FIRE_axiM0_wrData_ready;
  tUInt8 DEF_CAN_FIRE_axiM0_wrData_valid;
  tUInt8 DEF_CAN_FIRE_axiM0_wrData_data;
  tUInt8 DEF_CAN_FIRE_axiM0_wrAddr_ready;
  tUInt8 DEF_CAN_FIRE_axiM0_wrAddr_valid;
  tUInt8 DEF_CAN_FIRE_axiM0_wrAddr_data;
  tUInt8 DEF_CAN_FIRE_crtS0_response_get;
  tUInt8 DEF_CAN_FIRE_crtS0_request_put;
  tUInt8 DEF_x__h3620;
  tUInt8 DEF_x__h2282;
  tUInt8 DEF_x__h1150;
  tUInt8 DEF_a4l_a4rdAddr_fifof_cntr_r_5_EQ_0___d77;
  tUInt8 DEF_a4l_a4wrData_fifof_cntr_r_2_EQ_0___d44;
  tUInt8 DEF_a4l_a4wrAddr_fifof_cntr_r_5_EQ_0___d17;
 
 /* Local definitions */
 private:
  tUInt64 DEF_a4l_a4rdAddr_fifof_q_1___d82;
  tUInt64 DEF_a4l_a4rdAddr_fifof_x_wire_wget____d78;
  tUInt64 DEF_a4l_a4wrData_fifof_q_1___d49;
  tUInt64 DEF_a4l_a4wrData_fifof_x_wire_wget____d45;
  tUInt64 DEF_a4l_a4wrAddr_fifof_q_1___d22;
  tUInt64 DEF_a4l_a4wrAddr_fifof_x_wire_wget____d18;
  tUInt8 DEF_a4l_a4rdAddr_fifof_cntr_r_5_MINUS_1___d83;
  tUInt8 DEF_a4l_a4rdAddr_fifof_cntr_r_5_EQ_1___d79;
  tUInt8 DEF_a4l_a4wrData_fifof_cntr_r_2_MINUS_1___d50;
  tUInt8 DEF_a4l_a4wrData_fifof_cntr_r_2_EQ_1___d46;
  tUInt8 DEF_a4l_a4wrAddr_fifof_cntr_r_5_MINUS_1___d23;
  tUInt8 DEF_a4l_a4wrAddr_fifof_cntr_r_5_EQ_1___d19;
 
 /* Rules */
 public:
  void RL_modActive__dreg_update();
  void RL_modFaulted__dreg_update();
  void RL_a4l_a4wrAddr_fifof_incCtr();
  void RL_a4l_a4wrAddr_fifof_decCtr();
  void RL_a4l_a4wrAddr_fifof_both();
  void RL_a4l_a4wrAddr_do_deq();
  void RL_a4l_a4wrData_fifof_incCtr();
  void RL_a4l_a4wrData_fifof_decCtr();
  void RL_a4l_a4wrData_fifof_both();
  void RL_a4l_a4wrData_do_deq();
  void RL_a4l_a4wrResp_do_enq();
  void RL_a4l_a4rdAddr_fifof_incCtr();
  void RL_a4l_a4rdAddr_fifof_decCtr();
  void RL_a4l_a4rdAddr_fifof_both();
  void RL_a4l_a4rdAddr_do_deq();
  void RL_a4l_a4rdResp_do_enq();
  void RL_crt_cmd_ingress();
 
 /* Methods */
 public:
  void METH_crtS0_request_put(tUInt32 ARG_crtS0_request_put);
  tUInt8 METH_RDY_crtS0_request_put();
  tUInt32 METH_crtS0_response_get();
  tUInt8 METH_RDY_crtS0_response_get();
  tUInt64 METH_axiM0_wrAddr_data();
  tUInt8 METH_RDY_axiM0_wrAddr_data();
  tUInt8 METH_axiM0_wrAddr_valid();
  tUInt8 METH_RDY_axiM0_wrAddr_valid();
  void METH_axiM0_wrAddr_ready(tUInt8 ARG_axiM0_wrAddr_ready_value);
  tUInt8 METH_RDY_axiM0_wrAddr_ready();
  tUInt64 METH_axiM0_wrData_data();
  tUInt8 METH_RDY_axiM0_wrData_data();
  tUInt8 METH_axiM0_wrData_valid();
  tUInt8 METH_RDY_axiM0_wrData_valid();
  void METH_axiM0_wrData_ready(tUInt8 ARG_axiM0_wrData_ready_value);
  tUInt8 METH_RDY_axiM0_wrData_ready();
  void METH_axiM0_wrResp_data(tUInt8 ARG_axiM0_wrResp_data_value);
  tUInt8 METH_RDY_axiM0_wrResp_data();
  void METH_axiM0_wrResp_valid(tUInt8 ARG_axiM0_wrResp_valid_value);
  tUInt8 METH_RDY_axiM0_wrResp_valid();
  tUInt8 METH_axiM0_wrResp_ready();
  tUInt8 METH_RDY_axiM0_wrResp_ready();
  tUInt64 METH_axiM0_rdAddr_data();
  tUInt8 METH_RDY_axiM0_rdAddr_data();
  tUInt8 METH_axiM0_rdAddr_valid();
  tUInt8 METH_RDY_axiM0_rdAddr_valid();
  void METH_axiM0_rdAddr_ready(tUInt8 ARG_axiM0_rdAddr_ready_value);
  tUInt8 METH_RDY_axiM0_rdAddr_ready();
  void METH_axiM0_rdResp_data(tUInt64 ARG_axiM0_rdResp_data_value);
  tUInt8 METH_RDY_axiM0_rdResp_data();
  void METH_axiM0_rdResp_valid(tUInt8 ARG_axiM0_rdResp_valid_value);
  tUInt8 METH_RDY_axiM0_rdResp_valid();
  tUInt8 METH_axiM0_rdResp_ready();
  tUInt8 METH_RDY_axiM0_rdResp_ready();
  tUInt8 METH_isActive();
  tUInt8 METH_RDY_isActive();
  tUInt8 METH_isFaulted();
  tUInt8 METH_RDY_isFaulted();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkHCrtCompleter2Axi &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkHCrtCompleter2Axi &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkHCrtCompleter2Axi &backing);
};

#endif /* ifndef __mkHCrtCompleter2Axi_h__ */
