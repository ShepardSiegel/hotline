/*
 * Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
 * 
 * On Mon Feb 11 09:29:54 EST 2013
 * 
 */
#include "bluesim_primitives.h"
#include "mkL2Proc.h"


/* String declarations */
static std::string const __str_literal_1("[%0d]: %m:       L2_EGRESS_PAYLOAD:%0x", 38u);


/* Constructor */
MOD_mkL2Proc::MOD_mkL2Proc(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dgRxCount(simHdl, "dgRxCount", this, 16u, 0u, (tUInt8)0u),
    INST_dgRxF(simHdl, "dgRxF", this, 10u, 2u, 1u, 0u),
    INST_dgTxCount(simHdl, "dgTxCount", this, 16u, 0u, (tUInt8)0u),
    INST_dgTxF(simHdl, "dgTxF", this, 10u, 2u, 1u, 0u),
    INST_egDA(simHdl, "egDA", this, 48u),
    INST_egL2Hdr(simHdl, "egL2Hdr", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_egPDU(simHdl, "egPDU", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_egPtr(simHdl, "egPtr", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_egSA(simHdl, "egSA", this, 48u),
    INST_igDA(simHdl, "igDA", this, 48u),
    INST_igL2Hdr(simHdl, "igL2Hdr", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_igPDU(simHdl, "igPDU", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_igPtr(simHdl, "igPtr", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_igSA(simHdl, "igSA", this, 48u),
    INST_igSAF(simHdl, "igSAF", this, 48u, 2u, 1u, 0u),
    INST_igSR(simHdl, "igSR", this, 48u),
    INST_igTyp(simHdl, "igTyp", this, 16u),
    INST_l2Egress(simHdl, "l2Egress", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_l2Egress_1(simHdl, "l2Egress_1", this, 1u, (tUInt8)0u),
    INST_l2Ingress(simHdl, "l2Ingress", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_l2Ingress_1(simHdl, "l2Ingress_1", this, 1u, (tUInt8)0u),
    INST_l2RxF(simHdl, "l2RxF", this, 10u, 2u, 1u, 0u),
    INST_l2TxF(simHdl, "l2TxF", this, 10u, 2u, 1u, 0u),
    INST_uMAddr(simHdl, "uMAddr", this, 48u, 43839021184llu, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h11391(12297829382473034410llu)
{
  PORT_EN_server_request_put = false;
  PORT_EN_server_response_get = false;
  PORT_EN_client_request_get = false;
  PORT_EN_client_response_put = false;
  PORT_EN_macAddr = false;
  PORT_server_request_put = 0u;
  PORT_client_response_put = 0u;
  PORT_macAddr_u = 0llu;
  PORT_RDY_server_request_put = false;
  PORT_server_response_get = 0u;
  PORT_RDY_server_response_get = false;
  PORT_client_request_get = 0u;
  PORT_RDY_client_request_get = false;
  PORT_RDY_client_response_put = false;
  PORT_RDY_macAddr = false;
  PORT_l2Rx = false;
  PORT_RDY_l2Rx = false;
  PORT_l2Tx = false;
  PORT_RDY_l2Tx = false;
  symbol_count = 76u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkL2Proc::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h1929", SYM_DEF, &DEF_b__h1929, 4u);
  init_symbol(&symbols[1u], "b__h5826", SYM_DEF, &DEF_b__h5826, 4u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_client_request_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_client_request_get,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_client_response_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_client_response_put,
	      1u);
  init_symbol(&symbols[4u], "CAN_FIRE_l2Rx", SYM_DEF, &DEF_CAN_FIRE_l2Rx, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_l2Tx", SYM_DEF, &DEF_CAN_FIRE_l2Tx, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_macAddr", SYM_DEF, &DEF_CAN_FIRE_macAddr, 1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_RL_l2_egress_header",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2_egress_header,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_l2_egress_payload",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2_egress_payload,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_RL_l2_ingress_header",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2_ingress_header,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_RL_l2_ingress_payload",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2_ingress_payload,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_RL_l2Egress__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2Egress__dreg_update,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_RL_l2Ingress__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_l2Ingress__dreg_update,
	      1u);
  init_symbol(&symbols[13u],
	      "CAN_FIRE_server_request_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_server_request_put,
	      1u);
  init_symbol(&symbols[14u],
	      "CAN_FIRE_server_response_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_server_response_get,
	      1u);
  init_symbol(&symbols[15u], "client_request_get", SYM_PORT, &PORT_client_request_get, 10u);
  init_symbol(&symbols[16u], "client_response_put", SYM_PORT, &PORT_client_response_put, 10u);
  init_symbol(&symbols[17u], "dgRxCount", SYM_MODULE, &INST_dgRxCount);
  init_symbol(&symbols[18u], "dgRxF", SYM_MODULE, &INST_dgRxF);
  init_symbol(&symbols[19u], "dgTxCount", SYM_MODULE, &INST_dgTxCount);
  init_symbol(&symbols[20u], "dgTxF", SYM_MODULE, &INST_dgTxF);
  init_symbol(&symbols[21u], "EN_client_request_get", SYM_PORT, &PORT_EN_client_request_get, 1u);
  init_symbol(&symbols[22u], "EN_client_response_put", SYM_PORT, &PORT_EN_client_response_put, 1u);
  init_symbol(&symbols[23u], "EN_macAddr", SYM_PORT, &PORT_EN_macAddr, 1u);
  init_symbol(&symbols[24u], "EN_server_request_put", SYM_PORT, &PORT_EN_server_request_put, 1u);
  init_symbol(&symbols[25u], "EN_server_response_get", SYM_PORT, &PORT_EN_server_response_get, 1u);
  init_symbol(&symbols[26u], "egDA", SYM_MODULE, &INST_egDA);
  init_symbol(&symbols[27u], "egL2Hdr", SYM_MODULE, &INST_egL2Hdr);
  init_symbol(&symbols[28u], "egPDU", SYM_MODULE, &INST_egPDU);
  init_symbol(&symbols[29u], "egPtr", SYM_MODULE, &INST_egPtr);
  init_symbol(&symbols[30u], "egSA", SYM_MODULE, &INST_egSA);
  init_symbol(&symbols[31u], "igDA", SYM_MODULE, &INST_igDA);
  init_symbol(&symbols[32u], "igL2Hdr", SYM_MODULE, &INST_igL2Hdr);
  init_symbol(&symbols[33u], "igPDU", SYM_MODULE, &INST_igPDU);
  init_symbol(&symbols[34u], "igPDU__h5674", SYM_DEF, &DEF_igPDU__h5674, 1u);
  init_symbol(&symbols[35u], "igPtr", SYM_MODULE, &INST_igPtr);
  init_symbol(&symbols[36u], "igSA", SYM_MODULE, &INST_igSA);
  init_symbol(&symbols[37u], "igSAF", SYM_MODULE, &INST_igSAF);
  init_symbol(&symbols[38u], "igSR", SYM_MODULE, &INST_igSR);
  init_symbol(&symbols[39u], "igTyp", SYM_MODULE, &INST_igTyp);
  init_symbol(&symbols[40u], "l2Egress", SYM_MODULE, &INST_l2Egress);
  init_symbol(&symbols[41u], "l2Egress_1", SYM_MODULE, &INST_l2Egress_1);
  init_symbol(&symbols[42u], "l2Ingress", SYM_MODULE, &INST_l2Ingress);
  init_symbol(&symbols[43u], "l2Ingress_1", SYM_MODULE, &INST_l2Ingress_1);
  init_symbol(&symbols[44u], "l2Rx", SYM_PORT, &PORT_l2Rx, 1u);
  init_symbol(&symbols[45u], "l2RxF", SYM_MODULE, &INST_l2RxF);
  init_symbol(&symbols[46u], "l2Tx", SYM_PORT, &PORT_l2Tx, 1u);
  init_symbol(&symbols[47u], "l2TxF", SYM_MODULE, &INST_l2TxF);
  init_symbol(&symbols[48u], "macAddr_u", SYM_PORT, &PORT_macAddr_u, 48u);
  init_symbol(&symbols[49u], "RDY_client_request_get", SYM_PORT, &PORT_RDY_client_request_get, 1u);
  init_symbol(&symbols[50u], "RDY_client_response_put", SYM_PORT, &PORT_RDY_client_response_put, 1u);
  init_symbol(&symbols[51u], "RDY_l2Rx", SYM_PORT, &PORT_RDY_l2Rx, 1u);
  init_symbol(&symbols[52u], "RDY_l2Tx", SYM_PORT, &PORT_RDY_l2Tx, 1u);
  init_symbol(&symbols[53u], "RDY_macAddr", SYM_PORT, &PORT_RDY_macAddr, 1u);
  init_symbol(&symbols[54u], "RDY_server_request_put", SYM_PORT, &PORT_RDY_server_request_put, 1u);
  init_symbol(&symbols[55u], "RDY_server_response_get", SYM_PORT, &PORT_RDY_server_response_get, 1u);
  init_symbol(&symbols[56u], "RL_l2_egress_header", SYM_RULE);
  init_symbol(&symbols[57u], "RL_l2_egress_payload", SYM_RULE);
  init_symbol(&symbols[58u], "RL_l2_ingress_header", SYM_RULE);
  init_symbol(&symbols[59u], "RL_l2_ingress_payload", SYM_RULE);
  init_symbol(&symbols[60u], "RL_l2Egress__dreg_update", SYM_RULE);
  init_symbol(&symbols[61u], "RL_l2Ingress__dreg_update", SYM_RULE);
  init_symbol(&symbols[62u], "server_request_put", SYM_PORT, &PORT_server_request_put, 10u);
  init_symbol(&symbols[63u], "server_response_get", SYM_PORT, &PORT_server_response_get, 10u);
  init_symbol(&symbols[64u], "uMAddr", SYM_MODULE, &INST_uMAddr);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_client_request_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_client_request_get,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_client_response_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_client_response_put,
	      1u);
  init_symbol(&symbols[67u], "WILL_FIRE_macAddr", SYM_DEF, &DEF_WILL_FIRE_macAddr, 1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_l2_egress_header",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2_egress_header,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_l2_egress_payload",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2_egress_payload,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_l2_ingress_header",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2_ingress_header,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_l2_ingress_payload",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2_ingress_payload,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_l2Egress__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2Egress__dreg_update,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_l2Ingress__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_l2Ingress__dreg_update,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_server_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_server_request_put,
	      1u);
  init_symbol(&symbols[75u],
	      "WILL_FIRE_server_response_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_server_response_get,
	      1u);
}


/* Rule actions */

void MOD_mkL2Proc::RL_l2Ingress__dreg_update()
{
  tUInt8 DEF_l2Ingress_1_whas_AND_l2Ingress_1_wget___d3;
  DEF_l2Ingress_1_whas_AND_l2Ingress_1_wget___d3 = INST_l2Ingress_1.METH_whas() && INST_l2Ingress_1.METH_wget();
  INST_l2Ingress.METH_write(DEF_l2Ingress_1_whas_AND_l2Ingress_1_wget___d3);
}

void MOD_mkL2Proc::RL_l2Egress__dreg_update()
{
  tUInt8 DEF_l2Egress_1_whas_AND_l2Egress_1_wget___d6;
  DEF_l2Egress_1_whas_AND_l2Egress_1_wget___d6 = INST_l2Egress_1.METH_whas() && INST_l2Egress_1.METH_wget();
  INST_l2Egress.METH_write(DEF_l2Egress_1_whas_AND_l2Egress_1_wget___d6);
}

void MOD_mkL2Proc::RL_l2_ingress_header()
{
  tUInt64 DEF_x__h3477;
  tUInt8 DEF_igDA_4_EQ_0xFFFFFFFFFFFF_5_OR_igDA_4_EQ_uMAddr_ETC___d41;
  tUInt8 DEF_igPtr_EQ_5___d31;
  tUInt8 DEF_igPtr_EQ_13___d20;
  tUInt32 DEF_x__h5423;
  tUInt8 DEF_IF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_9_O_ETC___d23;
  tUInt8 DEF_igSR_BITS_7_TO_0___h3323;
  tUInt64 DEF_y__h5526;
  tUInt64 DEF_x__h5525;
  tUInt64 DEF_igSR__h3322;
  DEF_igSR__h3322 = INST_igSR.METH_read();
  DEF_x__h5525 = INST_igDA.METH_read();
  DEF_y__h5526 = INST_uMAddr.METH_read();
  DEF_l2RxF_first____d16 = INST_l2RxF.METH_first();
  DEF_igSR_BITS_7_TO_0___h3323 = (tUInt8)((tUInt8)255u & DEF_igSR__h3322);
  DEF_b__h1929 = INST_igPtr.METH_read();
  DEF_l2RxF_first__6_BITS_7_TO_0___d28 = (tUInt8)((tUInt8)255u & DEF_l2RxF_first____d16);
  DEF_l2RxF_first__6_BITS_9_TO_8___d17 = (tUInt8)(DEF_l2RxF_first____d16 >> 8u);
  DEF_igPtr_EQ_13___d20 = DEF_b__h1929 == (tUInt8)13u;
  DEF_igPtr_EQ_11___d9 = DEF_b__h1929 == (tUInt8)11u;
  DEF_igPtr_EQ_5___d31 = DEF_b__h1929 == (tUInt8)5u;
  DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 = DEF_l2RxF_first__6_BITS_9_TO_8___d17 == (tUInt8)0u;
  DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19 = !DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18;
  DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29 = DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 || DEF_l2RxF_first__6_BITS_9_TO_8___d17 == (tUInt8)1u ? DEF_l2RxF_first__6_BITS_7_TO_0___d28 : DEF_l2RxF_first__6_BITS_7_TO_0___d28;
  DEF_IF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_9_O_ETC___d23 = DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19 || DEF_igPtr_EQ_13___d20 ? (tUInt8)0u : (tUInt8)15u & (DEF_b__h1929 + (tUInt8)1u);
  DEF_x__h5423 = 65535u & ((((tUInt32)(DEF_igSR_BITS_7_TO_0___h3323)) << 8u) | (tUInt32)(DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29));
  DEF_igDA_4_EQ_0xFFFFFFFFFFFF_5_OR_igDA_4_EQ_uMAddr_ETC___d41 = (DEF_x__h5525 == 281474976710655llu || DEF_x__h5525 == DEF_y__h5526) && (DEF_igPtr_EQ_13___d20 && DEF_x__h5423 == 61522u);
  DEF_x__h3477 = 281474976710655llu & ((((tUInt64)(1099511627775llu & DEF_igSR__h3322)) << 8u) | (tUInt64)(DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29));
  INST_l2Ingress_1.METH_wset((tUInt8)1u);
  INST_igPtr.METH_write(DEF_IF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_9_O_ETC___d23);
  INST_l2RxF.METH_deq();
  INST_igSR.METH_write(DEF_x__h3477);
  if (DEF_igPtr_EQ_5___d31)
    INST_igDA.METH_write(DEF_x__h3477);
  if (DEF_igPtr_EQ_11___d9)
    INST_igSA.METH_write(DEF_x__h3477);
  if (DEF_igPtr_EQ_11___d9)
    INST_igSAF.METH_enq(DEF_x__h3477);
  if (DEF_igPtr_EQ_13___d20)
    INST_igTyp.METH_write(DEF_x__h5423);
  INST_igPDU.METH_write(DEF_igDA_4_EQ_0xFFFFFFFFFFFF_5_OR_igDA_4_EQ_uMAddr_ETC___d41);
  if (DEF_igPtr_EQ_13___d20)
    INST_igL2Hdr.METH_write((tUInt8)0u);
}

void MOD_mkL2Proc::RL_l2_ingress_payload()
{
  tUInt32 DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d55;
  tUInt32 DEF_dgRxCount_9_PLUS_1___d50;
  tUInt8 DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d54;
  tUInt32 DEF_b__h5628;
  DEF_b__h5628 = INST_dgRxCount.METH_read();
  DEF_l2RxF_first____d16 = INST_l2RxF.METH_first();
  DEF_igPDU__h5674 = INST_igPDU.METH_read();
  DEF_l2RxF_first__6_BITS_7_TO_0___d28 = (tUInt8)((tUInt8)255u & DEF_l2RxF_first____d16);
  DEF_l2RxF_first__6_BITS_9_TO_8___d17 = (tUInt8)(DEF_l2RxF_first____d16 >> 8u);
  switch (DEF_l2RxF_first__6_BITS_9_TO_8___d17) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d54 = DEF_l2RxF_first__6_BITS_9_TO_8___d17;
    break;
  default:
    DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d54 = (tUInt8)3u;
  }
  DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 = DEF_l2RxF_first__6_BITS_9_TO_8___d17 == (tUInt8)0u;
  DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19 = !DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18;
  DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29 = DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 || DEF_l2RxF_first__6_BITS_9_TO_8___d17 == (tUInt8)1u ? DEF_l2RxF_first__6_BITS_7_TO_0___d28 : DEF_l2RxF_first__6_BITS_7_TO_0___d28;
  DEF_dgRxCount_9_PLUS_1___d50 = 65535u & (DEF_b__h5628 + 1u);
  DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d55 = 1023u & ((((tUInt32)(DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d54)) << 8u) | (tUInt32)(DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29));
  INST_l2Ingress_1.METH_wset((tUInt8)1u);
  INST_dgRxCount.METH_write(DEF_dgRxCount_9_PLUS_1___d50);
  INST_l2RxF.METH_deq();
  if (DEF_igPDU__h5674)
    INST_dgRxF.METH_enq(DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d55);
  INST_igL2Hdr.METH_write(DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19);
}

void MOD_mkL2Proc::RL_l2_egress_header()
{
  tUInt8 DEF_egPtr_6_PLUS_1___d103;
  tUInt8 DEF_NOT_egPtr_6_EQ_0_7_29_AND_egPtr_6_EQ_1_5_OR_eg_ETC___d133;
  tUInt8 DEF_egPtr_6_EQ_1___d65;
  tUInt8 DEF_egPtr_6_EQ_2___d66;
  tUInt8 DEF_egPtr_6_EQ_3___d68;
  tUInt8 DEF_egPtr_6_EQ_4___d70;
  tUInt8 DEF_egPtr_6_EQ_5___d72;
  tUInt8 DEF_egPtr_6_EQ_6___d74;
  tUInt32 DEF__0_CONCAT_egDA_06_BITS_47_TO_40_08___d134;
  tUInt32 DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138;
  tUInt32 DEF__0_CONCAT_egSA_24_BITS_47_TO_40_26___d135;
  tUInt64 DEF_IF_egPtr_6_EQ_0_7_THEN_igSAF_first__05_ELSE_eg_ETC___d110;
  tUInt64 DEF_IF_egPtr_6_EQ_0_7_THEN_43839021184_ELSE_egSA_2_ETC___d128;
  tUInt8 DEF_egDA_BITS_47_TO_40___h7495;
  tUInt8 DEF_egSA_BITS_47_TO_40___h7847;
  tUInt64 DEF_egDA__h10041;
  tUInt64 DEF_egSA__h11182;
  tUInt8 DEF_egPtr_6_EQ_0_7_OR_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_ETC___d104;
  tUInt8 DEF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_6__ETC___d75;
  tUInt8 DEF_egPtr_6_EQ_7_6_OR_egPtr_6_EQ_8_7_8_OR_egPtr_6__ETC___d86;
  tUInt8 DEF_egPtr_6_EQ_0_7_OR_NOT_egPtr_6_EQ_1_5_11_AND_NO_ETC___d123;
  DEF_egSA__h11182 = INST_egSA.METH_read();
  DEF_egDA__h10041 = INST_egDA.METH_read();
  DEF_b__h5826 = INST_egPtr.METH_read();
  DEF_egPtr_6_EQ_7_6_OR_egPtr_6_EQ_8_7_8_OR_egPtr_6__ETC___d86 = ((((DEF_b__h5826 == (tUInt8)7u || DEF_b__h5826 == (tUInt8)8u) || DEF_b__h5826 == (tUInt8)9u) || DEF_b__h5826 == (tUInt8)10u) || DEF_b__h5826 == (tUInt8)11u) || DEF_b__h5826 == (tUInt8)12u;
  DEF_egSA_BITS_47_TO_40___h7847 = (tUInt8)(DEF_egSA__h11182 >> 40u);
  DEF_egDA_BITS_47_TO_40___h7495 = (tUInt8)(DEF_egDA__h10041 >> 40u);
  DEF_egPtr_6_EQ_0___d57 = DEF_b__h5826 == (tUInt8)0u;
  DEF_IF_egPtr_6_EQ_0_7_THEN_43839021184_ELSE_egSA_2_ETC___d128 = DEF_egPtr_6_EQ_0___d57 ? 43839021184llu : 281474976710655llu & ((((tUInt64)(1099511627775llu & DEF_egSA__h11182)) << 8u) | (tUInt64)(DEF_egSA_BITS_47_TO_40___h7847));
  DEF_IF_egPtr_6_EQ_0_7_THEN_igSAF_first__05_ELSE_eg_ETC___d110 = DEF_egPtr_6_EQ_0___d57 ? INST_igSAF.METH_first() : 281474976710655llu & ((((tUInt64)(1099511627775llu & DEF_egDA__h10041)) << 8u) | (tUInt64)(DEF_egDA_BITS_47_TO_40___h7495));
  DEF__0_CONCAT_egSA_24_BITS_47_TO_40_26___d135 = 1023u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_egSA_BITS_47_TO_40___h7847));
  DEF__0_CONCAT_egDA_06_BITS_47_TO_40_08___d134 = 1023u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_egDA_BITS_47_TO_40___h7495));
  switch (DEF_b__h5826) {
  case (tUInt8)1u:
  case (tUInt8)2u:
  case (tUInt8)3u:
  case (tUInt8)4u:
  case (tUInt8)5u:
  case (tUInt8)6u:
    DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138 = DEF__0_CONCAT_egDA_06_BITS_47_TO_40_08___d134;
    break;
  case (tUInt8)7u:
  case (tUInt8)8u:
  case (tUInt8)9u:
  case (tUInt8)10u:
  case (tUInt8)11u:
  case (tUInt8)12u:
    DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138 = DEF__0_CONCAT_egSA_24_BITS_47_TO_40_26___d135;
    break;
  case (tUInt8)13u:
    DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138 = 240u;
    break;
  default:
    DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138 = 82u;
  }
  DEF_egPtr_6_EQ_13___d59 = DEF_b__h5826 == (tUInt8)13u;
  DEF_egPtr_6_EQ_14___d88 = DEF_b__h5826 == (tUInt8)14u;
  DEF_egPtr_6_EQ_6___d74 = DEF_b__h5826 == (tUInt8)6u;
  DEF_egPtr_6_EQ_5___d72 = DEF_b__h5826 == (tUInt8)5u;
  DEF_egPtr_6_EQ_4___d70 = DEF_b__h5826 == (tUInt8)4u;
  DEF_egPtr_6_EQ_3___d68 = DEF_b__h5826 == (tUInt8)3u;
  DEF_egPtr_6_EQ_2___d66 = DEF_b__h5826 == (tUInt8)2u;
  DEF_egPtr_6_EQ_1___d65 = DEF_b__h5826 == (tUInt8)1u;
  DEF_egPtr_6_EQ_0_7_OR_NOT_egPtr_6_EQ_1_5_11_AND_NO_ETC___d123 = DEF_egPtr_6_EQ_0___d57 || ((((((!DEF_egPtr_6_EQ_1___d65 && !DEF_egPtr_6_EQ_2___d66) && !DEF_egPtr_6_EQ_3___d68) && !DEF_egPtr_6_EQ_4___d70) && !DEF_egPtr_6_EQ_5___d72) && !DEF_egPtr_6_EQ_6___d74) && DEF_egPtr_6_EQ_7_6_OR_egPtr_6_EQ_8_7_8_OR_egPtr_6__ETC___d86);
  DEF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_6__ETC___d75 = ((((DEF_egPtr_6_EQ_1___d65 || DEF_egPtr_6_EQ_2___d66) || DEF_egPtr_6_EQ_3___d68) || DEF_egPtr_6_EQ_4___d70) || DEF_egPtr_6_EQ_5___d72) || DEF_egPtr_6_EQ_6___d74;
  DEF_egPtr_6_EQ_0_7_OR_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_ETC___d104 = DEF_egPtr_6_EQ_0___d57 || DEF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_6__ETC___d75;
  DEF_NOT_egPtr_6_EQ_0_7_29_AND_egPtr_6_EQ_1_5_OR_eg_ETC___d133 = !DEF_egPtr_6_EQ_0___d57 && (DEF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_6__ETC___d75 || (DEF_egPtr_6_EQ_7_6_OR_egPtr_6_EQ_8_7_8_OR_egPtr_6__ETC___d86 || (DEF_egPtr_6_EQ_13___d59 || DEF_egPtr_6_EQ_14___d88)));
  DEF_egPtr_6_PLUS_1___d103 = (tUInt8)15u & (DEF_b__h5826 + (tUInt8)1u);
  INST_l2Egress_1.METH_wset((tUInt8)1u);
  INST_egPtr.METH_write(DEF_egPtr_6_PLUS_1___d103);
  if (DEF_egPtr_6_EQ_0_7_OR_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_ETC___d104)
    INST_egDA.METH_write(DEF_IF_egPtr_6_EQ_0_7_THEN_igSAF_first__05_ELSE_eg_ETC___d110);
  if (DEF_egPtr_6_EQ_0_7_OR_NOT_egPtr_6_EQ_1_5_11_AND_NO_ETC___d123)
    INST_egSA.METH_write(DEF_IF_egPtr_6_EQ_0_7_THEN_43839021184_ELSE_egSA_2_ETC___d128);
  if (DEF_egPtr_6_EQ_0___d57)
    INST_igSAF.METH_deq();
  if (DEF_NOT_egPtr_6_EQ_0_7_29_AND_egPtr_6_EQ_1_5_OR_eg_ETC___d133)
    INST_l2TxF.METH_enq(DEF_IF_egPtr_6_EQ_1_5_OR_egPtr_6_EQ_2_6_7_OR_egPtr_ETC___d138);
  if (DEF_egPtr_6_EQ_14___d88)
    INST_egPDU.METH_write((tUInt8)1u);
}

void MOD_mkL2Proc::RL_l2_egress_payload()
{
  tUInt32 DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d156;
  tUInt32 DEF_dgTxCount_42_PLUS_1___d143;
  tUInt8 DEF_NOT_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47___d157;
  tUInt8 DEF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0___d147;
  tUInt8 DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d152;
  tUInt8 DEF_dgTxF_first__45_BITS_9_TO_8___d146;
  tUInt8 DEF_dgTxF_first__45_BITS_7_TO_0___d154;
  tUInt32 DEF_dgTxF_first____d145;
  tUInt32 DEF_b__h11336;
  DEF_b__h11336 = INST_dgTxCount.METH_read();
  DEF_dgTxF_first____d145 = INST_dgTxF.METH_first();
  DEF_dgTxF_first__45_BITS_7_TO_0___d154 = (tUInt8)((tUInt8)255u & DEF_dgTxF_first____d145);
  DEF_dgTxF_first__45_BITS_9_TO_8___d146 = (tUInt8)(DEF_dgTxF_first____d145 >> 8u);
  switch (DEF_dgTxF_first__45_BITS_9_TO_8___d146) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d152 = DEF_dgTxF_first__45_BITS_9_TO_8___d146;
    break;
  default:
    DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d152 = (tUInt8)3u;
  }
  DEF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0___d147 = DEF_dgTxF_first__45_BITS_9_TO_8___d146 == (tUInt8)0u;
  DEF_NOT_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47___d157 = !DEF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0___d147;
  DEF_dgTxCount_42_PLUS_1___d143 = 65535u & (DEF_b__h11336 + 1u);
  DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d156 = 1023u & ((((tUInt32)(DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d152)) << 8u) | (tUInt32)(DEF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0___d147 || DEF_dgTxF_first__45_BITS_9_TO_8___d146 == (tUInt8)1u ? DEF_dgTxF_first__45_BITS_7_TO_0___d154 : DEF_dgTxF_first__45_BITS_7_TO_0___d154));
  INST_l2Egress_1.METH_wset((tUInt8)1u);
  INST_dgTxCount.METH_write(DEF_dgTxCount_42_PLUS_1___d143);
  INST_dgTxF.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h11391 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,10",
		   &__str_literal_1,
		   DEF_v__h11391,
		   DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d156);
  INST_l2TxF.METH_enq(DEF_IF_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47_OR_d_ETC___d156);
  if (DEF_NOT_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47___d157)
    INST_egPtr.METH_write((tUInt8)0u);
  if (DEF_NOT_dgTxF_first__45_BITS_9_TO_8_46_EQ_0_47___d157)
    INST_egPDU.METH_write((tUInt8)0u);
}


/* Methods */

void MOD_mkL2Proc::METH_server_request_put(tUInt32 ARG_server_request_put)
{
  tUInt32 DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d168;
  tUInt8 DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d164;
  tUInt8 DEF_server_request_put_BITS_9_TO_8___d158;
  tUInt8 DEF_server_request_put_BITS_7_TO_0___d166;
  PORT_EN_server_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_server_request_put = (tUInt8)1u;
  PORT_server_request_put = ARG_server_request_put;
  DEF_server_request_put_BITS_7_TO_0___d166 = (tUInt8)((tUInt8)255u & ARG_server_request_put);
  DEF_server_request_put_BITS_9_TO_8___d158 = (tUInt8)(ARG_server_request_put >> 8u);
  switch (DEF_server_request_put_BITS_9_TO_8___d158) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d164 = DEF_server_request_put_BITS_9_TO_8___d158;
    break;
  default:
    DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d164 = (tUInt8)3u;
  }
  DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d168 = 1023u & ((((tUInt32)(DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d164)) << 8u) | (tUInt32)(DEF_server_request_put_BITS_9_TO_8___d158 == (tUInt8)0u || DEF_server_request_put_BITS_9_TO_8___d158 == (tUInt8)1u ? DEF_server_request_put_BITS_7_TO_0___d166 : DEF_server_request_put_BITS_7_TO_0___d166));
  INST_l2RxF.METH_enq(DEF_IF_server_request_put_BITS_9_TO_8_58_EQ_0_59_O_ETC___d168);
}

tUInt8 MOD_mkL2Proc::METH_RDY_server_request_put()
{
  DEF_CAN_FIRE_server_request_put = INST_l2RxF.METH_i_notFull();
  PORT_RDY_server_request_put = DEF_CAN_FIRE_server_request_put;
  return PORT_RDY_server_request_put;
}

tUInt32 MOD_mkL2Proc::METH_server_response_get()
{
  tUInt8 DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d176;
  tUInt8 DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d179;
  tUInt8 DEF_l2TxF_first__69_BITS_9_TO_8___d170;
  tUInt8 DEF_l2TxF_first__69_BITS_7_TO_0___d178;
  tUInt32 DEF_l2TxF_first____d169;
  PORT_EN_server_response_get = (tUInt8)1u;
  DEF_WILL_FIRE_server_response_get = (tUInt8)1u;
  DEF_l2TxF_first____d169 = INST_l2TxF.METH_first();
  DEF_l2TxF_first__69_BITS_7_TO_0___d178 = (tUInt8)((tUInt8)255u & DEF_l2TxF_first____d169);
  DEF_l2TxF_first__69_BITS_9_TO_8___d170 = (tUInt8)(DEF_l2TxF_first____d169 >> 8u);
  DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d179 = DEF_l2TxF_first__69_BITS_9_TO_8___d170 == (tUInt8)0u || DEF_l2TxF_first__69_BITS_9_TO_8___d170 == (tUInt8)1u ? DEF_l2TxF_first__69_BITS_7_TO_0___d178 : DEF_l2TxF_first__69_BITS_7_TO_0___d178;
  switch (DEF_l2TxF_first__69_BITS_9_TO_8___d170) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d176 = DEF_l2TxF_first__69_BITS_9_TO_8___d170;
    break;
  default:
    DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d176 = (tUInt8)3u;
  }
  INST_l2TxF.METH_deq();
  PORT_server_response_get = 1023u & ((((tUInt32)(DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d176)) << 8u) | (tUInt32)(DEF_IF_l2TxF_first__69_BITS_9_TO_8_70_EQ_0_71_OR_l_ETC___d179));
  return PORT_server_response_get;
}

tUInt8 MOD_mkL2Proc::METH_RDY_server_response_get()
{
  DEF_CAN_FIRE_server_response_get = INST_l2TxF.METH_i_notEmpty();
  PORT_RDY_server_response_get = DEF_CAN_FIRE_server_response_get;
  return PORT_RDY_server_response_get;
}

tUInt32 MOD_mkL2Proc::METH_client_request_get()
{
  tUInt8 DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d187;
  tUInt8 DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d190;
  tUInt8 DEF_dgRxF_first__80_BITS_9_TO_8___d181;
  tUInt8 DEF_dgRxF_first__80_BITS_7_TO_0___d189;
  tUInt32 DEF_dgRxF_first____d180;
  PORT_EN_client_request_get = (tUInt8)1u;
  DEF_WILL_FIRE_client_request_get = (tUInt8)1u;
  DEF_dgRxF_first____d180 = INST_dgRxF.METH_first();
  DEF_dgRxF_first__80_BITS_7_TO_0___d189 = (tUInt8)((tUInt8)255u & DEF_dgRxF_first____d180);
  DEF_dgRxF_first__80_BITS_9_TO_8___d181 = (tUInt8)(DEF_dgRxF_first____d180 >> 8u);
  DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d190 = DEF_dgRxF_first__80_BITS_9_TO_8___d181 == (tUInt8)0u || DEF_dgRxF_first__80_BITS_9_TO_8___d181 == (tUInt8)1u ? DEF_dgRxF_first__80_BITS_7_TO_0___d189 : DEF_dgRxF_first__80_BITS_7_TO_0___d189;
  switch (DEF_dgRxF_first__80_BITS_9_TO_8___d181) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d187 = DEF_dgRxF_first__80_BITS_9_TO_8___d181;
    break;
  default:
    DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d187 = (tUInt8)3u;
  }
  INST_dgRxF.METH_deq();
  PORT_client_request_get = 1023u & ((((tUInt32)(DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d187)) << 8u) | (tUInt32)(DEF_IF_dgRxF_first__80_BITS_9_TO_8_81_EQ_0_82_OR_d_ETC___d190));
  return PORT_client_request_get;
}

tUInt8 MOD_mkL2Proc::METH_RDY_client_request_get()
{
  DEF_CAN_FIRE_client_request_get = INST_dgRxF.METH_i_notEmpty();
  PORT_RDY_client_request_get = DEF_CAN_FIRE_client_request_get;
  return PORT_RDY_client_request_get;
}

void MOD_mkL2Proc::METH_client_response_put(tUInt32 ARG_client_response_put)
{
  tUInt32 DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d201;
  tUInt8 DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d197;
  tUInt8 DEF_client_response_put_BITS_9_TO_8___d191;
  tUInt8 DEF_client_response_put_BITS_7_TO_0___d199;
  PORT_EN_client_response_put = (tUInt8)1u;
  DEF_WILL_FIRE_client_response_put = (tUInt8)1u;
  PORT_client_response_put = ARG_client_response_put;
  DEF_client_response_put_BITS_7_TO_0___d199 = (tUInt8)((tUInt8)255u & ARG_client_response_put);
  DEF_client_response_put_BITS_9_TO_8___d191 = (tUInt8)(ARG_client_response_put >> 8u);
  switch (DEF_client_response_put_BITS_9_TO_8___d191) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d197 = DEF_client_response_put_BITS_9_TO_8___d191;
    break;
  default:
    DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d197 = (tUInt8)3u;
  }
  DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d201 = 1023u & ((((tUInt32)(DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d197)) << 8u) | (tUInt32)(DEF_client_response_put_BITS_9_TO_8___d191 == (tUInt8)0u || DEF_client_response_put_BITS_9_TO_8___d191 == (tUInt8)1u ? DEF_client_response_put_BITS_7_TO_0___d199 : DEF_client_response_put_BITS_7_TO_0___d199));
  INST_dgTxF.METH_enq(DEF_IF_client_response_put_BITS_9_TO_8_91_EQ_0_92__ETC___d201);
}

tUInt8 MOD_mkL2Proc::METH_RDY_client_response_put()
{
  DEF_CAN_FIRE_client_response_put = INST_dgTxF.METH_i_notFull();
  PORT_RDY_client_response_put = DEF_CAN_FIRE_client_response_put;
  return PORT_RDY_client_response_put;
}

void MOD_mkL2Proc::METH_macAddr(tUInt64 ARG_macAddr_u)
{
  PORT_EN_macAddr = (tUInt8)1u;
  DEF_WILL_FIRE_macAddr = (tUInt8)1u;
  PORT_macAddr_u = ARG_macAddr_u;
  INST_uMAddr.METH_write(ARG_macAddr_u);
}

tUInt8 MOD_mkL2Proc::METH_RDY_macAddr()
{
  DEF_CAN_FIRE_macAddr = (tUInt8)1u;
  PORT_RDY_macAddr = DEF_CAN_FIRE_macAddr;
  return PORT_RDY_macAddr;
}

tUInt8 MOD_mkL2Proc::METH_l2Rx()
{
  PORT_l2Rx = INST_l2Ingress.METH_read();
  return PORT_l2Rx;
}

tUInt8 MOD_mkL2Proc::METH_RDY_l2Rx()
{
  DEF_CAN_FIRE_l2Rx = (tUInt8)1u;
  PORT_RDY_l2Rx = DEF_CAN_FIRE_l2Rx;
  return PORT_RDY_l2Rx;
}

tUInt8 MOD_mkL2Proc::METH_l2Tx()
{
  PORT_l2Tx = INST_l2Egress.METH_read();
  return PORT_l2Tx;
}

tUInt8 MOD_mkL2Proc::METH_RDY_l2Tx()
{
  DEF_CAN_FIRE_l2Tx = (tUInt8)1u;
  PORT_RDY_l2Tx = DEF_CAN_FIRE_l2Tx;
  return PORT_RDY_l2Tx;
}


/* Reset routines */

void MOD_mkL2Proc::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_uMAddr.reset_RST(ARG_rst_in);
  INST_l2TxF.reset_RST(ARG_rst_in);
  INST_l2RxF.reset_RST(ARG_rst_in);
  INST_l2Ingress.reset_RST(ARG_rst_in);
  INST_l2Egress.reset_RST(ARG_rst_in);
  INST_igSAF.reset_RST(ARG_rst_in);
  INST_igPtr.reset_RST(ARG_rst_in);
  INST_igPDU.reset_RST(ARG_rst_in);
  INST_igL2Hdr.reset_RST(ARG_rst_in);
  INST_egPtr.reset_RST(ARG_rst_in);
  INST_egPDU.reset_RST(ARG_rst_in);
  INST_egL2Hdr.reset_RST(ARG_rst_in);
  INST_dgTxF.reset_RST(ARG_rst_in);
  INST_dgTxCount.reset_RST(ARG_rst_in);
  INST_dgRxF.reset_RST(ARG_rst_in);
  INST_dgRxCount.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkL2Proc::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkL2Proc::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dgRxCount.dump_state(indent + 2u);
  INST_dgRxF.dump_state(indent + 2u);
  INST_dgTxCount.dump_state(indent + 2u);
  INST_dgTxF.dump_state(indent + 2u);
  INST_egDA.dump_state(indent + 2u);
  INST_egL2Hdr.dump_state(indent + 2u);
  INST_egPDU.dump_state(indent + 2u);
  INST_egPtr.dump_state(indent + 2u);
  INST_egSA.dump_state(indent + 2u);
  INST_igDA.dump_state(indent + 2u);
  INST_igL2Hdr.dump_state(indent + 2u);
  INST_igPDU.dump_state(indent + 2u);
  INST_igPtr.dump_state(indent + 2u);
  INST_igSA.dump_state(indent + 2u);
  INST_igSAF.dump_state(indent + 2u);
  INST_igSR.dump_state(indent + 2u);
  INST_igTyp.dump_state(indent + 2u);
  INST_l2Egress.dump_state(indent + 2u);
  INST_l2Egress_1.dump_state(indent + 2u);
  INST_l2Ingress.dump_state(indent + 2u);
  INST_l2Ingress_1.dump_state(indent + 2u);
  INST_l2RxF.dump_state(indent + 2u);
  INST_l2TxF.dump_state(indent + 2u);
  INST_uMAddr.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkL2Proc::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 82u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2Egress__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2Ingress__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2_egress_header", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2_egress_payload", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2_ingress_header", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_l2_ingress_payload", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_l2Rx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_l2Tx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_macAddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_server_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_server_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2Egress__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2Ingress__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2_egress_header", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2_egress_payload", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2_ingress_header", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_l2_ingress_payload", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_macAddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_server_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_server_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h1929", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5826", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "egPtr_6_EQ_0___d57", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "egPtr_6_EQ_13___d59", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "egPtr_6_EQ_14___d88", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "igPDU__h5674", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "igPtr_EQ_11___d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2RxF_first__6_BITS_7_TO_0___d28", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2RxF_first__6_BITS_9_TO_8___d17", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2RxF_first____d16", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h11391", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_macAddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_server_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_server_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_client_request_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_client_response_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_l2Rx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_l2Tx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_macAddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_server_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_server_response_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "client_request_get", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "client_response_put", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2Rx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "l2Tx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "macAddr_u", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "server_request_put", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "server_response_get", 10u);
  num = INST_dgRxCount.dump_VCD_defs(num);
  num = INST_dgRxF.dump_VCD_defs(num);
  num = INST_dgTxCount.dump_VCD_defs(num);
  num = INST_dgTxF.dump_VCD_defs(num);
  num = INST_egDA.dump_VCD_defs(num);
  num = INST_egL2Hdr.dump_VCD_defs(num);
  num = INST_egPDU.dump_VCD_defs(num);
  num = INST_egPtr.dump_VCD_defs(num);
  num = INST_egSA.dump_VCD_defs(num);
  num = INST_igDA.dump_VCD_defs(num);
  num = INST_igL2Hdr.dump_VCD_defs(num);
  num = INST_igPDU.dump_VCD_defs(num);
  num = INST_igPtr.dump_VCD_defs(num);
  num = INST_igSA.dump_VCD_defs(num);
  num = INST_igSAF.dump_VCD_defs(num);
  num = INST_igSR.dump_VCD_defs(num);
  num = INST_igTyp.dump_VCD_defs(num);
  num = INST_l2Egress.dump_VCD_defs(num);
  num = INST_l2Egress_1.dump_VCD_defs(num);
  num = INST_l2Ingress.dump_VCD_defs(num);
  num = INST_l2Ingress_1.dump_VCD_defs(num);
  num = INST_l2RxF.dump_VCD_defs(num);
  num = INST_l2TxF.dump_VCD_defs(num);
  num = INST_uMAddr.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkL2Proc::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkL2Proc &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkL2Proc::vcd_defs(tVCDDumpType dt, MOD_mkL2Proc &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 10u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_l2Egress__dreg_update) != DEF_CAN_FIRE_RL_l2Egress__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2Egress__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_l2Egress__dreg_update = DEF_CAN_FIRE_RL_l2Egress__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_l2Ingress__dreg_update) != DEF_CAN_FIRE_RL_l2Ingress__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2Ingress__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_l2Ingress__dreg_update = DEF_CAN_FIRE_RL_l2Ingress__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_l2_egress_header) != DEF_CAN_FIRE_RL_l2_egress_header)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2_egress_header, 1u);
	backing.DEF_CAN_FIRE_RL_l2_egress_header = DEF_CAN_FIRE_RL_l2_egress_header;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_l2_egress_payload) != DEF_CAN_FIRE_RL_l2_egress_payload)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2_egress_payload, 1u);
	backing.DEF_CAN_FIRE_RL_l2_egress_payload = DEF_CAN_FIRE_RL_l2_egress_payload;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_l2_ingress_header) != DEF_CAN_FIRE_RL_l2_ingress_header)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2_ingress_header, 1u);
	backing.DEF_CAN_FIRE_RL_l2_ingress_header = DEF_CAN_FIRE_RL_l2_ingress_header;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_l2_ingress_payload) != DEF_CAN_FIRE_RL_l2_ingress_payload)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_l2_ingress_payload, 1u);
	backing.DEF_CAN_FIRE_RL_l2_ingress_payload = DEF_CAN_FIRE_RL_l2_ingress_payload;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_client_request_get) != DEF_CAN_FIRE_client_request_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_client_request_get, 1u);
	backing.DEF_CAN_FIRE_client_request_get = DEF_CAN_FIRE_client_request_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_client_response_put) != DEF_CAN_FIRE_client_response_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_client_response_put, 1u);
	backing.DEF_CAN_FIRE_client_response_put = DEF_CAN_FIRE_client_response_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_l2Rx) != DEF_CAN_FIRE_l2Rx)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_l2Rx, 1u);
	backing.DEF_CAN_FIRE_l2Rx = DEF_CAN_FIRE_l2Rx;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_l2Tx) != DEF_CAN_FIRE_l2Tx)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_l2Tx, 1u);
	backing.DEF_CAN_FIRE_l2Tx = DEF_CAN_FIRE_l2Tx;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_macAddr) != DEF_CAN_FIRE_macAddr)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_macAddr, 1u);
	backing.DEF_CAN_FIRE_macAddr = DEF_CAN_FIRE_macAddr;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_server_request_put) != DEF_CAN_FIRE_server_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_server_request_put, 1u);
	backing.DEF_CAN_FIRE_server_request_put = DEF_CAN_FIRE_server_request_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_server_response_get) != DEF_CAN_FIRE_server_response_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_server_response_get, 1u);
	backing.DEF_CAN_FIRE_server_response_get = DEF_CAN_FIRE_server_response_get;
      }
      ++num;
      if ((backing.DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29) != DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29, 8u);
	backing.DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29 = DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29;
      }
      ++num;
      if ((backing.DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19) != DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19, 1u);
	backing.DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19 = DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2Egress__dreg_update) != DEF_WILL_FIRE_RL_l2Egress__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2Egress__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_l2Egress__dreg_update = DEF_WILL_FIRE_RL_l2Egress__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2Ingress__dreg_update) != DEF_WILL_FIRE_RL_l2Ingress__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2Ingress__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_l2Ingress__dreg_update = DEF_WILL_FIRE_RL_l2Ingress__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2_egress_header) != DEF_WILL_FIRE_RL_l2_egress_header)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2_egress_header, 1u);
	backing.DEF_WILL_FIRE_RL_l2_egress_header = DEF_WILL_FIRE_RL_l2_egress_header;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2_egress_payload) != DEF_WILL_FIRE_RL_l2_egress_payload)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2_egress_payload, 1u);
	backing.DEF_WILL_FIRE_RL_l2_egress_payload = DEF_WILL_FIRE_RL_l2_egress_payload;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2_ingress_header) != DEF_WILL_FIRE_RL_l2_ingress_header)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2_ingress_header, 1u);
	backing.DEF_WILL_FIRE_RL_l2_ingress_header = DEF_WILL_FIRE_RL_l2_ingress_header;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_l2_ingress_payload) != DEF_WILL_FIRE_RL_l2_ingress_payload)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_l2_ingress_payload, 1u);
	backing.DEF_WILL_FIRE_RL_l2_ingress_payload = DEF_WILL_FIRE_RL_l2_ingress_payload;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_client_request_get) != DEF_WILL_FIRE_client_request_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_client_request_get, 1u);
	backing.DEF_WILL_FIRE_client_request_get = DEF_WILL_FIRE_client_request_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_client_response_put) != DEF_WILL_FIRE_client_response_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_client_response_put, 1u);
	backing.DEF_WILL_FIRE_client_response_put = DEF_WILL_FIRE_client_response_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_macAddr) != DEF_WILL_FIRE_macAddr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_macAddr, 1u);
	backing.DEF_WILL_FIRE_macAddr = DEF_WILL_FIRE_macAddr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_server_request_put) != DEF_WILL_FIRE_server_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_server_request_put, 1u);
	backing.DEF_WILL_FIRE_server_request_put = DEF_WILL_FIRE_server_request_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_server_response_get) != DEF_WILL_FIRE_server_response_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_server_response_get, 1u);
	backing.DEF_WILL_FIRE_server_response_get = DEF_WILL_FIRE_server_response_get;
      }
      ++num;
      if ((backing.DEF_b__h1929) != DEF_b__h1929)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h1929, 4u);
	backing.DEF_b__h1929 = DEF_b__h1929;
      }
      ++num;
      if ((backing.DEF_b__h5826) != DEF_b__h5826)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5826, 4u);
	backing.DEF_b__h5826 = DEF_b__h5826;
      }
      ++num;
      if ((backing.DEF_egPtr_6_EQ_0___d57) != DEF_egPtr_6_EQ_0___d57)
      {
	vcd_write_val(sim_hdl, num, DEF_egPtr_6_EQ_0___d57, 1u);
	backing.DEF_egPtr_6_EQ_0___d57 = DEF_egPtr_6_EQ_0___d57;
      }
      ++num;
      if ((backing.DEF_egPtr_6_EQ_13___d59) != DEF_egPtr_6_EQ_13___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_egPtr_6_EQ_13___d59, 1u);
	backing.DEF_egPtr_6_EQ_13___d59 = DEF_egPtr_6_EQ_13___d59;
      }
      ++num;
      if ((backing.DEF_egPtr_6_EQ_14___d88) != DEF_egPtr_6_EQ_14___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_egPtr_6_EQ_14___d88, 1u);
	backing.DEF_egPtr_6_EQ_14___d88 = DEF_egPtr_6_EQ_14___d88;
      }
      ++num;
      if ((backing.DEF_igPDU__h5674) != DEF_igPDU__h5674)
      {
	vcd_write_val(sim_hdl, num, DEF_igPDU__h5674, 1u);
	backing.DEF_igPDU__h5674 = DEF_igPDU__h5674;
      }
      ++num;
      if ((backing.DEF_igPtr_EQ_11___d9) != DEF_igPtr_EQ_11___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_igPtr_EQ_11___d9, 1u);
	backing.DEF_igPtr_EQ_11___d9 = DEF_igPtr_EQ_11___d9;
      }
      ++num;
      if ((backing.DEF_l2RxF_first__6_BITS_7_TO_0___d28) != DEF_l2RxF_first__6_BITS_7_TO_0___d28)
      {
	vcd_write_val(sim_hdl, num, DEF_l2RxF_first__6_BITS_7_TO_0___d28, 8u);
	backing.DEF_l2RxF_first__6_BITS_7_TO_0___d28 = DEF_l2RxF_first__6_BITS_7_TO_0___d28;
      }
      ++num;
      if ((backing.DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18) != DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18)
      {
	vcd_write_val(sim_hdl, num, DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18, 1u);
	backing.DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 = DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18;
      }
      ++num;
      if ((backing.DEF_l2RxF_first__6_BITS_9_TO_8___d17) != DEF_l2RxF_first__6_BITS_9_TO_8___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_l2RxF_first__6_BITS_9_TO_8___d17, 2u);
	backing.DEF_l2RxF_first__6_BITS_9_TO_8___d17 = DEF_l2RxF_first__6_BITS_9_TO_8___d17;
      }
      ++num;
      if ((backing.DEF_l2RxF_first____d16) != DEF_l2RxF_first____d16)
      {
	vcd_write_val(sim_hdl, num, DEF_l2RxF_first____d16, 10u);
	backing.DEF_l2RxF_first____d16 = DEF_l2RxF_first____d16;
      }
      ++num;
      if ((backing.DEF_v__h11391) != DEF_v__h11391)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h11391, 64u);
	backing.DEF_v__h11391 = DEF_v__h11391;
      }
      ++num;
      if ((backing.PORT_EN_client_request_get) != PORT_EN_client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_client_request_get, 1u);
	backing.PORT_EN_client_request_get = PORT_EN_client_request_get;
      }
      ++num;
      if ((backing.PORT_EN_client_response_put) != PORT_EN_client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_client_response_put, 1u);
	backing.PORT_EN_client_response_put = PORT_EN_client_response_put;
      }
      ++num;
      if ((backing.PORT_EN_macAddr) != PORT_EN_macAddr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_macAddr, 1u);
	backing.PORT_EN_macAddr = PORT_EN_macAddr;
      }
      ++num;
      if ((backing.PORT_EN_server_request_put) != PORT_EN_server_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_server_request_put, 1u);
	backing.PORT_EN_server_request_put = PORT_EN_server_request_put;
      }
      ++num;
      if ((backing.PORT_EN_server_response_get) != PORT_EN_server_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_server_response_get, 1u);
	backing.PORT_EN_server_response_get = PORT_EN_server_response_get;
      }
      ++num;
      if ((backing.PORT_RDY_client_request_get) != PORT_RDY_client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_client_request_get, 1u);
	backing.PORT_RDY_client_request_get = PORT_RDY_client_request_get;
      }
      ++num;
      if ((backing.PORT_RDY_client_response_put) != PORT_RDY_client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_client_response_put, 1u);
	backing.PORT_RDY_client_response_put = PORT_RDY_client_response_put;
      }
      ++num;
      if ((backing.PORT_RDY_l2Rx) != PORT_RDY_l2Rx)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_l2Rx, 1u);
	backing.PORT_RDY_l2Rx = PORT_RDY_l2Rx;
      }
      ++num;
      if ((backing.PORT_RDY_l2Tx) != PORT_RDY_l2Tx)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_l2Tx, 1u);
	backing.PORT_RDY_l2Tx = PORT_RDY_l2Tx;
      }
      ++num;
      if ((backing.PORT_RDY_macAddr) != PORT_RDY_macAddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_macAddr, 1u);
	backing.PORT_RDY_macAddr = PORT_RDY_macAddr;
      }
      ++num;
      if ((backing.PORT_RDY_server_request_put) != PORT_RDY_server_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_server_request_put, 1u);
	backing.PORT_RDY_server_request_put = PORT_RDY_server_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_server_response_get) != PORT_RDY_server_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_server_response_get, 1u);
	backing.PORT_RDY_server_response_get = PORT_RDY_server_response_get;
      }
      ++num;
      if ((backing.PORT_client_request_get) != PORT_client_request_get)
      {
	vcd_write_val(sim_hdl, num, PORT_client_request_get, 10u);
	backing.PORT_client_request_get = PORT_client_request_get;
      }
      ++num;
      if ((backing.PORT_client_response_put) != PORT_client_response_put)
      {
	vcd_write_val(sim_hdl, num, PORT_client_response_put, 10u);
	backing.PORT_client_response_put = PORT_client_response_put;
      }
      ++num;
      if ((backing.PORT_l2Rx) != PORT_l2Rx)
      {
	vcd_write_val(sim_hdl, num, PORT_l2Rx, 1u);
	backing.PORT_l2Rx = PORT_l2Rx;
      }
      ++num;
      if ((backing.PORT_l2Tx) != PORT_l2Tx)
      {
	vcd_write_val(sim_hdl, num, PORT_l2Tx, 1u);
	backing.PORT_l2Tx = PORT_l2Tx;
      }
      ++num;
      if ((backing.PORT_macAddr_u) != PORT_macAddr_u)
      {
	vcd_write_val(sim_hdl, num, PORT_macAddr_u, 48u);
	backing.PORT_macAddr_u = PORT_macAddr_u;
      }
      ++num;
      if ((backing.PORT_server_request_put) != PORT_server_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_server_request_put, 10u);
	backing.PORT_server_request_put = PORT_server_request_put;
      }
      ++num;
      if ((backing.PORT_server_response_get) != PORT_server_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_server_response_get, 10u);
	backing.PORT_server_response_get = PORT_server_response_get;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2Egress__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_l2Egress__dreg_update = DEF_CAN_FIRE_RL_l2Egress__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2Ingress__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_l2Ingress__dreg_update = DEF_CAN_FIRE_RL_l2Ingress__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2_egress_header, 1u);
      backing.DEF_CAN_FIRE_RL_l2_egress_header = DEF_CAN_FIRE_RL_l2_egress_header;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2_egress_payload, 1u);
      backing.DEF_CAN_FIRE_RL_l2_egress_payload = DEF_CAN_FIRE_RL_l2_egress_payload;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2_ingress_header, 1u);
      backing.DEF_CAN_FIRE_RL_l2_ingress_header = DEF_CAN_FIRE_RL_l2_ingress_header;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_l2_ingress_payload, 1u);
      backing.DEF_CAN_FIRE_RL_l2_ingress_payload = DEF_CAN_FIRE_RL_l2_ingress_payload;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_client_request_get, 1u);
      backing.DEF_CAN_FIRE_client_request_get = DEF_CAN_FIRE_client_request_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_client_response_put, 1u);
      backing.DEF_CAN_FIRE_client_response_put = DEF_CAN_FIRE_client_response_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_l2Rx, 1u);
      backing.DEF_CAN_FIRE_l2Rx = DEF_CAN_FIRE_l2Rx;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_l2Tx, 1u);
      backing.DEF_CAN_FIRE_l2Tx = DEF_CAN_FIRE_l2Tx;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_macAddr, 1u);
      backing.DEF_CAN_FIRE_macAddr = DEF_CAN_FIRE_macAddr;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_server_request_put, 1u);
      backing.DEF_CAN_FIRE_server_request_put = DEF_CAN_FIRE_server_request_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_server_response_get, 1u);
      backing.DEF_CAN_FIRE_server_response_get = DEF_CAN_FIRE_server_response_get;
      vcd_write_val(sim_hdl, num++, DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29, 8u);
      backing.DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29 = DEF_IF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8_OR_l2Rx_ETC___d29;
      vcd_write_val(sim_hdl, num++, DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19, 1u);
      backing.DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19 = DEF_NOT_l2RxF_first__6_BITS_9_TO_8_7_EQ_0_8___d19;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2Egress__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_l2Egress__dreg_update = DEF_WILL_FIRE_RL_l2Egress__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2Ingress__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_l2Ingress__dreg_update = DEF_WILL_FIRE_RL_l2Ingress__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2_egress_header, 1u);
      backing.DEF_WILL_FIRE_RL_l2_egress_header = DEF_WILL_FIRE_RL_l2_egress_header;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2_egress_payload, 1u);
      backing.DEF_WILL_FIRE_RL_l2_egress_payload = DEF_WILL_FIRE_RL_l2_egress_payload;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2_ingress_header, 1u);
      backing.DEF_WILL_FIRE_RL_l2_ingress_header = DEF_WILL_FIRE_RL_l2_ingress_header;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_l2_ingress_payload, 1u);
      backing.DEF_WILL_FIRE_RL_l2_ingress_payload = DEF_WILL_FIRE_RL_l2_ingress_payload;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_client_request_get, 1u);
      backing.DEF_WILL_FIRE_client_request_get = DEF_WILL_FIRE_client_request_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_client_response_put, 1u);
      backing.DEF_WILL_FIRE_client_response_put = DEF_WILL_FIRE_client_response_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_macAddr, 1u);
      backing.DEF_WILL_FIRE_macAddr = DEF_WILL_FIRE_macAddr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_server_request_put, 1u);
      backing.DEF_WILL_FIRE_server_request_put = DEF_WILL_FIRE_server_request_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_server_response_get, 1u);
      backing.DEF_WILL_FIRE_server_response_get = DEF_WILL_FIRE_server_response_get;
      vcd_write_val(sim_hdl, num++, DEF_b__h1929, 4u);
      backing.DEF_b__h1929 = DEF_b__h1929;
      vcd_write_val(sim_hdl, num++, DEF_b__h5826, 4u);
      backing.DEF_b__h5826 = DEF_b__h5826;
      vcd_write_val(sim_hdl, num++, DEF_egPtr_6_EQ_0___d57, 1u);
      backing.DEF_egPtr_6_EQ_0___d57 = DEF_egPtr_6_EQ_0___d57;
      vcd_write_val(sim_hdl, num++, DEF_egPtr_6_EQ_13___d59, 1u);
      backing.DEF_egPtr_6_EQ_13___d59 = DEF_egPtr_6_EQ_13___d59;
      vcd_write_val(sim_hdl, num++, DEF_egPtr_6_EQ_14___d88, 1u);
      backing.DEF_egPtr_6_EQ_14___d88 = DEF_egPtr_6_EQ_14___d88;
      vcd_write_val(sim_hdl, num++, DEF_igPDU__h5674, 1u);
      backing.DEF_igPDU__h5674 = DEF_igPDU__h5674;
      vcd_write_val(sim_hdl, num++, DEF_igPtr_EQ_11___d9, 1u);
      backing.DEF_igPtr_EQ_11___d9 = DEF_igPtr_EQ_11___d9;
      vcd_write_val(sim_hdl, num++, DEF_l2RxF_first__6_BITS_7_TO_0___d28, 8u);
      backing.DEF_l2RxF_first__6_BITS_7_TO_0___d28 = DEF_l2RxF_first__6_BITS_7_TO_0___d28;
      vcd_write_val(sim_hdl, num++, DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18, 1u);
      backing.DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18 = DEF_l2RxF_first__6_BITS_9_TO_8_7_EQ_0___d18;
      vcd_write_val(sim_hdl, num++, DEF_l2RxF_first__6_BITS_9_TO_8___d17, 2u);
      backing.DEF_l2RxF_first__6_BITS_9_TO_8___d17 = DEF_l2RxF_first__6_BITS_9_TO_8___d17;
      vcd_write_val(sim_hdl, num++, DEF_l2RxF_first____d16, 10u);
      backing.DEF_l2RxF_first____d16 = DEF_l2RxF_first____d16;
      vcd_write_val(sim_hdl, num++, DEF_v__h11391, 64u);
      backing.DEF_v__h11391 = DEF_v__h11391;
      vcd_write_val(sim_hdl, num++, PORT_EN_client_request_get, 1u);
      backing.PORT_EN_client_request_get = PORT_EN_client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_client_response_put, 1u);
      backing.PORT_EN_client_response_put = PORT_EN_client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_macAddr, 1u);
      backing.PORT_EN_macAddr = PORT_EN_macAddr;
      vcd_write_val(sim_hdl, num++, PORT_EN_server_request_put, 1u);
      backing.PORT_EN_server_request_put = PORT_EN_server_request_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_server_response_get, 1u);
      backing.PORT_EN_server_response_get = PORT_EN_server_response_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_client_request_get, 1u);
      backing.PORT_RDY_client_request_get = PORT_RDY_client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_client_response_put, 1u);
      backing.PORT_RDY_client_response_put = PORT_RDY_client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_l2Rx, 1u);
      backing.PORT_RDY_l2Rx = PORT_RDY_l2Rx;
      vcd_write_val(sim_hdl, num++, PORT_RDY_l2Tx, 1u);
      backing.PORT_RDY_l2Tx = PORT_RDY_l2Tx;
      vcd_write_val(sim_hdl, num++, PORT_RDY_macAddr, 1u);
      backing.PORT_RDY_macAddr = PORT_RDY_macAddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_server_request_put, 1u);
      backing.PORT_RDY_server_request_put = PORT_RDY_server_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_server_response_get, 1u);
      backing.PORT_RDY_server_response_get = PORT_RDY_server_response_get;
      vcd_write_val(sim_hdl, num++, PORT_client_request_get, 10u);
      backing.PORT_client_request_get = PORT_client_request_get;
      vcd_write_val(sim_hdl, num++, PORT_client_response_put, 10u);
      backing.PORT_client_response_put = PORT_client_response_put;
      vcd_write_val(sim_hdl, num++, PORT_l2Rx, 1u);
      backing.PORT_l2Rx = PORT_l2Rx;
      vcd_write_val(sim_hdl, num++, PORT_l2Tx, 1u);
      backing.PORT_l2Tx = PORT_l2Tx;
      vcd_write_val(sim_hdl, num++, PORT_macAddr_u, 48u);
      backing.PORT_macAddr_u = PORT_macAddr_u;
      vcd_write_val(sim_hdl, num++, PORT_server_request_put, 10u);
      backing.PORT_server_request_put = PORT_server_request_put;
      vcd_write_val(sim_hdl, num++, PORT_server_response_get, 10u);
      backing.PORT_server_response_get = PORT_server_response_get;
    }
}

void MOD_mkL2Proc::vcd_prims(tVCDDumpType dt, MOD_mkL2Proc &backing)
{
  INST_dgRxCount.dump_VCD(dt, backing.INST_dgRxCount);
  INST_dgRxF.dump_VCD(dt, backing.INST_dgRxF);
  INST_dgTxCount.dump_VCD(dt, backing.INST_dgTxCount);
  INST_dgTxF.dump_VCD(dt, backing.INST_dgTxF);
  INST_egDA.dump_VCD(dt, backing.INST_egDA);
  INST_egL2Hdr.dump_VCD(dt, backing.INST_egL2Hdr);
  INST_egPDU.dump_VCD(dt, backing.INST_egPDU);
  INST_egPtr.dump_VCD(dt, backing.INST_egPtr);
  INST_egSA.dump_VCD(dt, backing.INST_egSA);
  INST_igDA.dump_VCD(dt, backing.INST_igDA);
  INST_igL2Hdr.dump_VCD(dt, backing.INST_igL2Hdr);
  INST_igPDU.dump_VCD(dt, backing.INST_igPDU);
  INST_igPtr.dump_VCD(dt, backing.INST_igPtr);
  INST_igSA.dump_VCD(dt, backing.INST_igSA);
  INST_igSAF.dump_VCD(dt, backing.INST_igSAF);
  INST_igSR.dump_VCD(dt, backing.INST_igSR);
  INST_igTyp.dump_VCD(dt, backing.INST_igTyp);
  INST_l2Egress.dump_VCD(dt, backing.INST_l2Egress);
  INST_l2Egress_1.dump_VCD(dt, backing.INST_l2Egress_1);
  INST_l2Ingress.dump_VCD(dt, backing.INST_l2Ingress);
  INST_l2Ingress_1.dump_VCD(dt, backing.INST_l2Ingress_1);
  INST_l2RxF.dump_VCD(dt, backing.INST_l2RxF);
  INST_l2TxF.dump_VCD(dt, backing.INST_l2TxF);
  INST_uMAddr.dump_VCD(dt, backing.INST_uMAddr);
}
